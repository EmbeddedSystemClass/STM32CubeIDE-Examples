
Interface_1_HCSR04.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d40  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002ec8  08002ec8  00012ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ee0  08002ee0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002ee0  08002ee0  00012ee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002ee8  08002ee8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ee8  08002ee8  00012ee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002eec  08002eec  00012eec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002ef0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  2000000c  08002efc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08002efc  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a400  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001899  00000000  00000000  0002a43c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b48  00000000  00000000  0002bcd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a60  00000000  00000000  0002c820  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020d59  00000000  00000000  0002d280  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008b2d  00000000  00000000  0004dfd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c86e2  00000000  00000000  00056b06  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011f1e8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e80  00000000  00000000  0011f264  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002eb0 	.word	0x08002eb0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002eb0 	.word	0x08002eb0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004cc:	4b0e      	ldr	r3, [pc, #56]	; (8000508 <HAL_Init+0x40>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a0d      	ldr	r2, [pc, #52]	; (8000508 <HAL_Init+0x40>)
 80004d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004d8:	4b0b      	ldr	r3, [pc, #44]	; (8000508 <HAL_Init+0x40>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a0a      	ldr	r2, [pc, #40]	; (8000508 <HAL_Init+0x40>)
 80004de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004e4:	4b08      	ldr	r3, [pc, #32]	; (8000508 <HAL_Init+0x40>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a07      	ldr	r2, [pc, #28]	; (8000508 <HAL_Init+0x40>)
 80004ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004f0:	2003      	movs	r0, #3
 80004f2:	f000 f90d 	bl	8000710 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004f6:	2000      	movs	r0, #0
 80004f8:	f000 f808 	bl	800050c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004fc:	f002 fa24 	bl	8002948 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000500:	2300      	movs	r3, #0
}
 8000502:	4618      	mov	r0, r3
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40023c00 	.word	0x40023c00

0800050c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000514:	4b12      	ldr	r3, [pc, #72]	; (8000560 <HAL_InitTick+0x54>)
 8000516:	681a      	ldr	r2, [r3, #0]
 8000518:	4b12      	ldr	r3, [pc, #72]	; (8000564 <HAL_InitTick+0x58>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	4619      	mov	r1, r3
 800051e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000522:	fbb3 f3f1 	udiv	r3, r3, r1
 8000526:	fbb2 f3f3 	udiv	r3, r2, r3
 800052a:	4618      	mov	r0, r3
 800052c:	f000 f917 	bl	800075e <HAL_SYSTICK_Config>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000536:	2301      	movs	r3, #1
 8000538:	e00e      	b.n	8000558 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	2b0f      	cmp	r3, #15
 800053e:	d80a      	bhi.n	8000556 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000540:	2200      	movs	r2, #0
 8000542:	6879      	ldr	r1, [r7, #4]
 8000544:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000548:	f000 f8ed 	bl	8000726 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800054c:	4a06      	ldr	r2, [pc, #24]	; (8000568 <HAL_InitTick+0x5c>)
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000552:	2300      	movs	r3, #0
 8000554:	e000      	b.n	8000558 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000556:	2301      	movs	r3, #1
}
 8000558:	4618      	mov	r0, r3
 800055a:	3708      	adds	r7, #8
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	20000008 	.word	0x20000008
 8000564:	20000004 	.word	0x20000004
 8000568:	20000000 	.word	0x20000000

0800056c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000570:	4b06      	ldr	r3, [pc, #24]	; (800058c <HAL_IncTick+0x20>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	461a      	mov	r2, r3
 8000576:	4b06      	ldr	r3, [pc, #24]	; (8000590 <HAL_IncTick+0x24>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4413      	add	r3, r2
 800057c:	4a04      	ldr	r2, [pc, #16]	; (8000590 <HAL_IncTick+0x24>)
 800057e:	6013      	str	r3, [r2, #0]
}
 8000580:	bf00      	nop
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	20000004 	.word	0x20000004
 8000590:	20000028 	.word	0x20000028

08000594 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  return uwTick;
 8000598:	4b03      	ldr	r3, [pc, #12]	; (80005a8 <HAL_GetTick+0x14>)
 800059a:	681b      	ldr	r3, [r3, #0]
}
 800059c:	4618      	mov	r0, r3
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	20000028 	.word	0x20000028

080005ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	f003 0307 	and.w	r3, r3, #7
 80005ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005bc:	4b0c      	ldr	r3, [pc, #48]	; (80005f0 <__NVIC_SetPriorityGrouping+0x44>)
 80005be:	68db      	ldr	r3, [r3, #12]
 80005c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005c2:	68ba      	ldr	r2, [r7, #8]
 80005c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005c8:	4013      	ands	r3, r2
 80005ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005d0:	68bb      	ldr	r3, [r7, #8]
 80005d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005de:	4a04      	ldr	r2, [pc, #16]	; (80005f0 <__NVIC_SetPriorityGrouping+0x44>)
 80005e0:	68bb      	ldr	r3, [r7, #8]
 80005e2:	60d3      	str	r3, [r2, #12]
}
 80005e4:	bf00      	nop
 80005e6:	3714      	adds	r7, #20
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr
 80005f0:	e000ed00 	.word	0xe000ed00

080005f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005f8:	4b04      	ldr	r3, [pc, #16]	; (800060c <__NVIC_GetPriorityGrouping+0x18>)
 80005fa:	68db      	ldr	r3, [r3, #12]
 80005fc:	0a1b      	lsrs	r3, r3, #8
 80005fe:	f003 0307 	and.w	r3, r3, #7
}
 8000602:	4618      	mov	r0, r3
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr
 800060c:	e000ed00 	.word	0xe000ed00

08000610 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	6039      	str	r1, [r7, #0]
 800061a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800061c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000620:	2b00      	cmp	r3, #0
 8000622:	db0a      	blt.n	800063a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000624:	683b      	ldr	r3, [r7, #0]
 8000626:	b2da      	uxtb	r2, r3
 8000628:	490c      	ldr	r1, [pc, #48]	; (800065c <__NVIC_SetPriority+0x4c>)
 800062a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800062e:	0112      	lsls	r2, r2, #4
 8000630:	b2d2      	uxtb	r2, r2
 8000632:	440b      	add	r3, r1
 8000634:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000638:	e00a      	b.n	8000650 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800063a:	683b      	ldr	r3, [r7, #0]
 800063c:	b2da      	uxtb	r2, r3
 800063e:	4908      	ldr	r1, [pc, #32]	; (8000660 <__NVIC_SetPriority+0x50>)
 8000640:	79fb      	ldrb	r3, [r7, #7]
 8000642:	f003 030f 	and.w	r3, r3, #15
 8000646:	3b04      	subs	r3, #4
 8000648:	0112      	lsls	r2, r2, #4
 800064a:	b2d2      	uxtb	r2, r2
 800064c:	440b      	add	r3, r1
 800064e:	761a      	strb	r2, [r3, #24]
}
 8000650:	bf00      	nop
 8000652:	370c      	adds	r7, #12
 8000654:	46bd      	mov	sp, r7
 8000656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065a:	4770      	bx	lr
 800065c:	e000e100 	.word	0xe000e100
 8000660:	e000ed00 	.word	0xe000ed00

08000664 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000664:	b480      	push	{r7}
 8000666:	b089      	sub	sp, #36	; 0x24
 8000668:	af00      	add	r7, sp, #0
 800066a:	60f8      	str	r0, [r7, #12]
 800066c:	60b9      	str	r1, [r7, #8]
 800066e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	f003 0307 	and.w	r3, r3, #7
 8000676:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000678:	69fb      	ldr	r3, [r7, #28]
 800067a:	f1c3 0307 	rsb	r3, r3, #7
 800067e:	2b04      	cmp	r3, #4
 8000680:	bf28      	it	cs
 8000682:	2304      	movcs	r3, #4
 8000684:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000686:	69fb      	ldr	r3, [r7, #28]
 8000688:	3304      	adds	r3, #4
 800068a:	2b06      	cmp	r3, #6
 800068c:	d902      	bls.n	8000694 <NVIC_EncodePriority+0x30>
 800068e:	69fb      	ldr	r3, [r7, #28]
 8000690:	3b03      	subs	r3, #3
 8000692:	e000      	b.n	8000696 <NVIC_EncodePriority+0x32>
 8000694:	2300      	movs	r3, #0
 8000696:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000698:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800069c:	69bb      	ldr	r3, [r7, #24]
 800069e:	fa02 f303 	lsl.w	r3, r2, r3
 80006a2:	43da      	mvns	r2, r3
 80006a4:	68bb      	ldr	r3, [r7, #8]
 80006a6:	401a      	ands	r2, r3
 80006a8:	697b      	ldr	r3, [r7, #20]
 80006aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80006b0:	697b      	ldr	r3, [r7, #20]
 80006b2:	fa01 f303 	lsl.w	r3, r1, r3
 80006b6:	43d9      	mvns	r1, r3
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006bc:	4313      	orrs	r3, r2
         );
}
 80006be:	4618      	mov	r0, r3
 80006c0:	3724      	adds	r7, #36	; 0x24
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr
	...

080006cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	3b01      	subs	r3, #1
 80006d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80006dc:	d301      	bcc.n	80006e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006de:	2301      	movs	r3, #1
 80006e0:	e00f      	b.n	8000702 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006e2:	4a0a      	ldr	r2, [pc, #40]	; (800070c <SysTick_Config+0x40>)
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	3b01      	subs	r3, #1
 80006e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80006ea:	210f      	movs	r1, #15
 80006ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80006f0:	f7ff ff8e 	bl	8000610 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006f4:	4b05      	ldr	r3, [pc, #20]	; (800070c <SysTick_Config+0x40>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006fa:	4b04      	ldr	r3, [pc, #16]	; (800070c <SysTick_Config+0x40>)
 80006fc:	2207      	movs	r2, #7
 80006fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000700:	2300      	movs	r3, #0
}
 8000702:	4618      	mov	r0, r3
 8000704:	3708      	adds	r7, #8
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	e000e010 	.word	0xe000e010

08000710 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000718:	6878      	ldr	r0, [r7, #4]
 800071a:	f7ff ff47 	bl	80005ac <__NVIC_SetPriorityGrouping>
}
 800071e:	bf00      	nop
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}

08000726 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000726:	b580      	push	{r7, lr}
 8000728:	b086      	sub	sp, #24
 800072a:	af00      	add	r7, sp, #0
 800072c:	4603      	mov	r3, r0
 800072e:	60b9      	str	r1, [r7, #8]
 8000730:	607a      	str	r2, [r7, #4]
 8000732:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000734:	2300      	movs	r3, #0
 8000736:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000738:	f7ff ff5c 	bl	80005f4 <__NVIC_GetPriorityGrouping>
 800073c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800073e:	687a      	ldr	r2, [r7, #4]
 8000740:	68b9      	ldr	r1, [r7, #8]
 8000742:	6978      	ldr	r0, [r7, #20]
 8000744:	f7ff ff8e 	bl	8000664 <NVIC_EncodePriority>
 8000748:	4602      	mov	r2, r0
 800074a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800074e:	4611      	mov	r1, r2
 8000750:	4618      	mov	r0, r3
 8000752:	f7ff ff5d 	bl	8000610 <__NVIC_SetPriority>
}
 8000756:	bf00      	nop
 8000758:	3718      	adds	r7, #24
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}

0800075e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800075e:	b580      	push	{r7, lr}
 8000760:	b082      	sub	sp, #8
 8000762:	af00      	add	r7, sp, #0
 8000764:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000766:	6878      	ldr	r0, [r7, #4]
 8000768:	f7ff ffb0 	bl	80006cc <SysTick_Config>
 800076c:	4603      	mov	r3, r0
}
 800076e:	4618      	mov	r0, r3
 8000770:	3708      	adds	r7, #8
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
	...

08000778 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000778:	b480      	push	{r7}
 800077a:	b089      	sub	sp, #36	; 0x24
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
 8000780:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000782:	2300      	movs	r3, #0
 8000784:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000786:	2300      	movs	r3, #0
 8000788:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800078a:	2300      	movs	r3, #0
 800078c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800078e:	2300      	movs	r3, #0
 8000790:	61fb      	str	r3, [r7, #28]
 8000792:	e16b      	b.n	8000a6c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000794:	2201      	movs	r2, #1
 8000796:	69fb      	ldr	r3, [r7, #28]
 8000798:	fa02 f303 	lsl.w	r3, r2, r3
 800079c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	697a      	ldr	r2, [r7, #20]
 80007a4:	4013      	ands	r3, r2
 80007a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80007a8:	693a      	ldr	r2, [r7, #16]
 80007aa:	697b      	ldr	r3, [r7, #20]
 80007ac:	429a      	cmp	r2, r3
 80007ae:	f040 815a 	bne.w	8000a66 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007b2:	683b      	ldr	r3, [r7, #0]
 80007b4:	685b      	ldr	r3, [r3, #4]
 80007b6:	2b02      	cmp	r3, #2
 80007b8:	d003      	beq.n	80007c2 <HAL_GPIO_Init+0x4a>
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	685b      	ldr	r3, [r3, #4]
 80007be:	2b12      	cmp	r3, #18
 80007c0:	d123      	bne.n	800080a <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80007c2:	69fb      	ldr	r3, [r7, #28]
 80007c4:	08da      	lsrs	r2, r3, #3
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	3208      	adds	r2, #8
 80007ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80007d0:	69fb      	ldr	r3, [r7, #28]
 80007d2:	f003 0307 	and.w	r3, r3, #7
 80007d6:	009b      	lsls	r3, r3, #2
 80007d8:	220f      	movs	r2, #15
 80007da:	fa02 f303 	lsl.w	r3, r2, r3
 80007de:	43db      	mvns	r3, r3
 80007e0:	69ba      	ldr	r2, [r7, #24]
 80007e2:	4013      	ands	r3, r2
 80007e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	691a      	ldr	r2, [r3, #16]
 80007ea:	69fb      	ldr	r3, [r7, #28]
 80007ec:	f003 0307 	and.w	r3, r3, #7
 80007f0:	009b      	lsls	r3, r3, #2
 80007f2:	fa02 f303 	lsl.w	r3, r2, r3
 80007f6:	69ba      	ldr	r2, [r7, #24]
 80007f8:	4313      	orrs	r3, r2
 80007fa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80007fc:	69fb      	ldr	r3, [r7, #28]
 80007fe:	08da      	lsrs	r2, r3, #3
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	3208      	adds	r2, #8
 8000804:	69b9      	ldr	r1, [r7, #24]
 8000806:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000810:	69fb      	ldr	r3, [r7, #28]
 8000812:	005b      	lsls	r3, r3, #1
 8000814:	2203      	movs	r2, #3
 8000816:	fa02 f303 	lsl.w	r3, r2, r3
 800081a:	43db      	mvns	r3, r3
 800081c:	69ba      	ldr	r2, [r7, #24]
 800081e:	4013      	ands	r3, r2
 8000820:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	685b      	ldr	r3, [r3, #4]
 8000826:	f003 0203 	and.w	r2, r3, #3
 800082a:	69fb      	ldr	r3, [r7, #28]
 800082c:	005b      	lsls	r3, r3, #1
 800082e:	fa02 f303 	lsl.w	r3, r2, r3
 8000832:	69ba      	ldr	r2, [r7, #24]
 8000834:	4313      	orrs	r3, r2
 8000836:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	69ba      	ldr	r2, [r7, #24]
 800083c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	685b      	ldr	r3, [r3, #4]
 8000842:	2b01      	cmp	r3, #1
 8000844:	d00b      	beq.n	800085e <HAL_GPIO_Init+0xe6>
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	685b      	ldr	r3, [r3, #4]
 800084a:	2b02      	cmp	r3, #2
 800084c:	d007      	beq.n	800085e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000852:	2b11      	cmp	r3, #17
 8000854:	d003      	beq.n	800085e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	685b      	ldr	r3, [r3, #4]
 800085a:	2b12      	cmp	r3, #18
 800085c:	d130      	bne.n	80008c0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	689b      	ldr	r3, [r3, #8]
 8000862:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000864:	69fb      	ldr	r3, [r7, #28]
 8000866:	005b      	lsls	r3, r3, #1
 8000868:	2203      	movs	r2, #3
 800086a:	fa02 f303 	lsl.w	r3, r2, r3
 800086e:	43db      	mvns	r3, r3
 8000870:	69ba      	ldr	r2, [r7, #24]
 8000872:	4013      	ands	r3, r2
 8000874:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	68da      	ldr	r2, [r3, #12]
 800087a:	69fb      	ldr	r3, [r7, #28]
 800087c:	005b      	lsls	r3, r3, #1
 800087e:	fa02 f303 	lsl.w	r3, r2, r3
 8000882:	69ba      	ldr	r2, [r7, #24]
 8000884:	4313      	orrs	r3, r2
 8000886:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	69ba      	ldr	r2, [r7, #24]
 800088c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	685b      	ldr	r3, [r3, #4]
 8000892:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000894:	2201      	movs	r2, #1
 8000896:	69fb      	ldr	r3, [r7, #28]
 8000898:	fa02 f303 	lsl.w	r3, r2, r3
 800089c:	43db      	mvns	r3, r3
 800089e:	69ba      	ldr	r2, [r7, #24]
 80008a0:	4013      	ands	r3, r2
 80008a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	685b      	ldr	r3, [r3, #4]
 80008a8:	091b      	lsrs	r3, r3, #4
 80008aa:	f003 0201 	and.w	r2, r3, #1
 80008ae:	69fb      	ldr	r3, [r7, #28]
 80008b0:	fa02 f303 	lsl.w	r3, r2, r3
 80008b4:	69ba      	ldr	r2, [r7, #24]
 80008b6:	4313      	orrs	r3, r2
 80008b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	69ba      	ldr	r2, [r7, #24]
 80008be:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	68db      	ldr	r3, [r3, #12]
 80008c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80008c6:	69fb      	ldr	r3, [r7, #28]
 80008c8:	005b      	lsls	r3, r3, #1
 80008ca:	2203      	movs	r2, #3
 80008cc:	fa02 f303 	lsl.w	r3, r2, r3
 80008d0:	43db      	mvns	r3, r3
 80008d2:	69ba      	ldr	r2, [r7, #24]
 80008d4:	4013      	ands	r3, r2
 80008d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	689a      	ldr	r2, [r3, #8]
 80008dc:	69fb      	ldr	r3, [r7, #28]
 80008de:	005b      	lsls	r3, r3, #1
 80008e0:	fa02 f303 	lsl.w	r3, r2, r3
 80008e4:	69ba      	ldr	r2, [r7, #24]
 80008e6:	4313      	orrs	r3, r2
 80008e8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	69ba      	ldr	r2, [r7, #24]
 80008ee:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	685b      	ldr	r3, [r3, #4]
 80008f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	f000 80b4 	beq.w	8000a66 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	60fb      	str	r3, [r7, #12]
 8000902:	4b5f      	ldr	r3, [pc, #380]	; (8000a80 <HAL_GPIO_Init+0x308>)
 8000904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000906:	4a5e      	ldr	r2, [pc, #376]	; (8000a80 <HAL_GPIO_Init+0x308>)
 8000908:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800090c:	6453      	str	r3, [r2, #68]	; 0x44
 800090e:	4b5c      	ldr	r3, [pc, #368]	; (8000a80 <HAL_GPIO_Init+0x308>)
 8000910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000912:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800091a:	4a5a      	ldr	r2, [pc, #360]	; (8000a84 <HAL_GPIO_Init+0x30c>)
 800091c:	69fb      	ldr	r3, [r7, #28]
 800091e:	089b      	lsrs	r3, r3, #2
 8000920:	3302      	adds	r3, #2
 8000922:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000926:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000928:	69fb      	ldr	r3, [r7, #28]
 800092a:	f003 0303 	and.w	r3, r3, #3
 800092e:	009b      	lsls	r3, r3, #2
 8000930:	220f      	movs	r2, #15
 8000932:	fa02 f303 	lsl.w	r3, r2, r3
 8000936:	43db      	mvns	r3, r3
 8000938:	69ba      	ldr	r2, [r7, #24]
 800093a:	4013      	ands	r3, r2
 800093c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	4a51      	ldr	r2, [pc, #324]	; (8000a88 <HAL_GPIO_Init+0x310>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d02b      	beq.n	800099e <HAL_GPIO_Init+0x226>
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	4a50      	ldr	r2, [pc, #320]	; (8000a8c <HAL_GPIO_Init+0x314>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d025      	beq.n	800099a <HAL_GPIO_Init+0x222>
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	4a4f      	ldr	r2, [pc, #316]	; (8000a90 <HAL_GPIO_Init+0x318>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d01f      	beq.n	8000996 <HAL_GPIO_Init+0x21e>
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	4a4e      	ldr	r2, [pc, #312]	; (8000a94 <HAL_GPIO_Init+0x31c>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d019      	beq.n	8000992 <HAL_GPIO_Init+0x21a>
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	4a4d      	ldr	r2, [pc, #308]	; (8000a98 <HAL_GPIO_Init+0x320>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d013      	beq.n	800098e <HAL_GPIO_Init+0x216>
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	4a4c      	ldr	r2, [pc, #304]	; (8000a9c <HAL_GPIO_Init+0x324>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d00d      	beq.n	800098a <HAL_GPIO_Init+0x212>
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	4a4b      	ldr	r2, [pc, #300]	; (8000aa0 <HAL_GPIO_Init+0x328>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d007      	beq.n	8000986 <HAL_GPIO_Init+0x20e>
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	4a4a      	ldr	r2, [pc, #296]	; (8000aa4 <HAL_GPIO_Init+0x32c>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d101      	bne.n	8000982 <HAL_GPIO_Init+0x20a>
 800097e:	2307      	movs	r3, #7
 8000980:	e00e      	b.n	80009a0 <HAL_GPIO_Init+0x228>
 8000982:	2308      	movs	r3, #8
 8000984:	e00c      	b.n	80009a0 <HAL_GPIO_Init+0x228>
 8000986:	2306      	movs	r3, #6
 8000988:	e00a      	b.n	80009a0 <HAL_GPIO_Init+0x228>
 800098a:	2305      	movs	r3, #5
 800098c:	e008      	b.n	80009a0 <HAL_GPIO_Init+0x228>
 800098e:	2304      	movs	r3, #4
 8000990:	e006      	b.n	80009a0 <HAL_GPIO_Init+0x228>
 8000992:	2303      	movs	r3, #3
 8000994:	e004      	b.n	80009a0 <HAL_GPIO_Init+0x228>
 8000996:	2302      	movs	r3, #2
 8000998:	e002      	b.n	80009a0 <HAL_GPIO_Init+0x228>
 800099a:	2301      	movs	r3, #1
 800099c:	e000      	b.n	80009a0 <HAL_GPIO_Init+0x228>
 800099e:	2300      	movs	r3, #0
 80009a0:	69fa      	ldr	r2, [r7, #28]
 80009a2:	f002 0203 	and.w	r2, r2, #3
 80009a6:	0092      	lsls	r2, r2, #2
 80009a8:	4093      	lsls	r3, r2
 80009aa:	69ba      	ldr	r2, [r7, #24]
 80009ac:	4313      	orrs	r3, r2
 80009ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80009b0:	4934      	ldr	r1, [pc, #208]	; (8000a84 <HAL_GPIO_Init+0x30c>)
 80009b2:	69fb      	ldr	r3, [r7, #28]
 80009b4:	089b      	lsrs	r3, r3, #2
 80009b6:	3302      	adds	r3, #2
 80009b8:	69ba      	ldr	r2, [r7, #24]
 80009ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80009be:	4b3a      	ldr	r3, [pc, #232]	; (8000aa8 <HAL_GPIO_Init+0x330>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009c4:	693b      	ldr	r3, [r7, #16]
 80009c6:	43db      	mvns	r3, r3
 80009c8:	69ba      	ldr	r2, [r7, #24]
 80009ca:	4013      	ands	r3, r2
 80009cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	685b      	ldr	r3, [r3, #4]
 80009d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d003      	beq.n	80009e2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80009da:	69ba      	ldr	r2, [r7, #24]
 80009dc:	693b      	ldr	r3, [r7, #16]
 80009de:	4313      	orrs	r3, r2
 80009e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80009e2:	4a31      	ldr	r2, [pc, #196]	; (8000aa8 <HAL_GPIO_Init+0x330>)
 80009e4:	69bb      	ldr	r3, [r7, #24]
 80009e6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80009e8:	4b2f      	ldr	r3, [pc, #188]	; (8000aa8 <HAL_GPIO_Init+0x330>)
 80009ea:	685b      	ldr	r3, [r3, #4]
 80009ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009ee:	693b      	ldr	r3, [r7, #16]
 80009f0:	43db      	mvns	r3, r3
 80009f2:	69ba      	ldr	r2, [r7, #24]
 80009f4:	4013      	ands	r3, r2
 80009f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d003      	beq.n	8000a0c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000a04:	69ba      	ldr	r2, [r7, #24]
 8000a06:	693b      	ldr	r3, [r7, #16]
 8000a08:	4313      	orrs	r3, r2
 8000a0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a0c:	4a26      	ldr	r2, [pc, #152]	; (8000aa8 <HAL_GPIO_Init+0x330>)
 8000a0e:	69bb      	ldr	r3, [r7, #24]
 8000a10:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a12:	4b25      	ldr	r3, [pc, #148]	; (8000aa8 <HAL_GPIO_Init+0x330>)
 8000a14:	689b      	ldr	r3, [r3, #8]
 8000a16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a18:	693b      	ldr	r3, [r7, #16]
 8000a1a:	43db      	mvns	r3, r3
 8000a1c:	69ba      	ldr	r2, [r7, #24]
 8000a1e:	4013      	ands	r3, r2
 8000a20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	685b      	ldr	r3, [r3, #4]
 8000a26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d003      	beq.n	8000a36 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000a2e:	69ba      	ldr	r2, [r7, #24]
 8000a30:	693b      	ldr	r3, [r7, #16]
 8000a32:	4313      	orrs	r3, r2
 8000a34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000a36:	4a1c      	ldr	r2, [pc, #112]	; (8000aa8 <HAL_GPIO_Init+0x330>)
 8000a38:	69bb      	ldr	r3, [r7, #24]
 8000a3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a3c:	4b1a      	ldr	r3, [pc, #104]	; (8000aa8 <HAL_GPIO_Init+0x330>)
 8000a3e:	68db      	ldr	r3, [r3, #12]
 8000a40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a42:	693b      	ldr	r3, [r7, #16]
 8000a44:	43db      	mvns	r3, r3
 8000a46:	69ba      	ldr	r2, [r7, #24]
 8000a48:	4013      	ands	r3, r2
 8000a4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	685b      	ldr	r3, [r3, #4]
 8000a50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d003      	beq.n	8000a60 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000a58:	69ba      	ldr	r2, [r7, #24]
 8000a5a:	693b      	ldr	r3, [r7, #16]
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000a60:	4a11      	ldr	r2, [pc, #68]	; (8000aa8 <HAL_GPIO_Init+0x330>)
 8000a62:	69bb      	ldr	r3, [r7, #24]
 8000a64:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a66:	69fb      	ldr	r3, [r7, #28]
 8000a68:	3301      	adds	r3, #1
 8000a6a:	61fb      	str	r3, [r7, #28]
 8000a6c:	69fb      	ldr	r3, [r7, #28]
 8000a6e:	2b0f      	cmp	r3, #15
 8000a70:	f67f ae90 	bls.w	8000794 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000a74:	bf00      	nop
 8000a76:	3724      	adds	r7, #36	; 0x24
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr
 8000a80:	40023800 	.word	0x40023800
 8000a84:	40013800 	.word	0x40013800
 8000a88:	40020000 	.word	0x40020000
 8000a8c:	40020400 	.word	0x40020400
 8000a90:	40020800 	.word	0x40020800
 8000a94:	40020c00 	.word	0x40020c00
 8000a98:	40021000 	.word	0x40021000
 8000a9c:	40021400 	.word	0x40021400
 8000aa0:	40021800 	.word	0x40021800
 8000aa4:	40021c00 	.word	0x40021c00
 8000aa8:	40013c00 	.word	0x40013c00

08000aac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b086      	sub	sp, #24
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d101      	bne.n	8000abe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000aba:	2301      	movs	r3, #1
 8000abc:	e22d      	b.n	8000f1a <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	f003 0301 	and.w	r3, r3, #1
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d075      	beq.n	8000bb6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000aca:	4ba3      	ldr	r3, [pc, #652]	; (8000d58 <HAL_RCC_OscConfig+0x2ac>)
 8000acc:	689b      	ldr	r3, [r3, #8]
 8000ace:	f003 030c 	and.w	r3, r3, #12
 8000ad2:	2b04      	cmp	r3, #4
 8000ad4:	d00c      	beq.n	8000af0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ad6:	4ba0      	ldr	r3, [pc, #640]	; (8000d58 <HAL_RCC_OscConfig+0x2ac>)
 8000ad8:	689b      	ldr	r3, [r3, #8]
 8000ada:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000ade:	2b08      	cmp	r3, #8
 8000ae0:	d112      	bne.n	8000b08 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ae2:	4b9d      	ldr	r3, [pc, #628]	; (8000d58 <HAL_RCC_OscConfig+0x2ac>)
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000aea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000aee:	d10b      	bne.n	8000b08 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000af0:	4b99      	ldr	r3, [pc, #612]	; (8000d58 <HAL_RCC_OscConfig+0x2ac>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d05b      	beq.n	8000bb4 <HAL_RCC_OscConfig+0x108>
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d157      	bne.n	8000bb4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000b04:	2301      	movs	r3, #1
 8000b06:	e208      	b.n	8000f1a <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b10:	d106      	bne.n	8000b20 <HAL_RCC_OscConfig+0x74>
 8000b12:	4b91      	ldr	r3, [pc, #580]	; (8000d58 <HAL_RCC_OscConfig+0x2ac>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4a90      	ldr	r2, [pc, #576]	; (8000d58 <HAL_RCC_OscConfig+0x2ac>)
 8000b18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b1c:	6013      	str	r3, [r2, #0]
 8000b1e:	e01d      	b.n	8000b5c <HAL_RCC_OscConfig+0xb0>
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b28:	d10c      	bne.n	8000b44 <HAL_RCC_OscConfig+0x98>
 8000b2a:	4b8b      	ldr	r3, [pc, #556]	; (8000d58 <HAL_RCC_OscConfig+0x2ac>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4a8a      	ldr	r2, [pc, #552]	; (8000d58 <HAL_RCC_OscConfig+0x2ac>)
 8000b30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b34:	6013      	str	r3, [r2, #0]
 8000b36:	4b88      	ldr	r3, [pc, #544]	; (8000d58 <HAL_RCC_OscConfig+0x2ac>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4a87      	ldr	r2, [pc, #540]	; (8000d58 <HAL_RCC_OscConfig+0x2ac>)
 8000b3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b40:	6013      	str	r3, [r2, #0]
 8000b42:	e00b      	b.n	8000b5c <HAL_RCC_OscConfig+0xb0>
 8000b44:	4b84      	ldr	r3, [pc, #528]	; (8000d58 <HAL_RCC_OscConfig+0x2ac>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a83      	ldr	r2, [pc, #524]	; (8000d58 <HAL_RCC_OscConfig+0x2ac>)
 8000b4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b4e:	6013      	str	r3, [r2, #0]
 8000b50:	4b81      	ldr	r3, [pc, #516]	; (8000d58 <HAL_RCC_OscConfig+0x2ac>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a80      	ldr	r2, [pc, #512]	; (8000d58 <HAL_RCC_OscConfig+0x2ac>)
 8000b56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d013      	beq.n	8000b8c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b64:	f7ff fd16 	bl	8000594 <HAL_GetTick>
 8000b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b6a:	e008      	b.n	8000b7e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b6c:	f7ff fd12 	bl	8000594 <HAL_GetTick>
 8000b70:	4602      	mov	r2, r0
 8000b72:	693b      	ldr	r3, [r7, #16]
 8000b74:	1ad3      	subs	r3, r2, r3
 8000b76:	2b64      	cmp	r3, #100	; 0x64
 8000b78:	d901      	bls.n	8000b7e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000b7a:	2303      	movs	r3, #3
 8000b7c:	e1cd      	b.n	8000f1a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b7e:	4b76      	ldr	r3, [pc, #472]	; (8000d58 <HAL_RCC_OscConfig+0x2ac>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d0f0      	beq.n	8000b6c <HAL_RCC_OscConfig+0xc0>
 8000b8a:	e014      	b.n	8000bb6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b8c:	f7ff fd02 	bl	8000594 <HAL_GetTick>
 8000b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b92:	e008      	b.n	8000ba6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b94:	f7ff fcfe 	bl	8000594 <HAL_GetTick>
 8000b98:	4602      	mov	r2, r0
 8000b9a:	693b      	ldr	r3, [r7, #16]
 8000b9c:	1ad3      	subs	r3, r2, r3
 8000b9e:	2b64      	cmp	r3, #100	; 0x64
 8000ba0:	d901      	bls.n	8000ba6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000ba2:	2303      	movs	r3, #3
 8000ba4:	e1b9      	b.n	8000f1a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ba6:	4b6c      	ldr	r3, [pc, #432]	; (8000d58 <HAL_RCC_OscConfig+0x2ac>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d1f0      	bne.n	8000b94 <HAL_RCC_OscConfig+0xe8>
 8000bb2:	e000      	b.n	8000bb6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f003 0302 	and.w	r3, r3, #2
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d063      	beq.n	8000c8a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000bc2:	4b65      	ldr	r3, [pc, #404]	; (8000d58 <HAL_RCC_OscConfig+0x2ac>)
 8000bc4:	689b      	ldr	r3, [r3, #8]
 8000bc6:	f003 030c 	and.w	r3, r3, #12
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d00b      	beq.n	8000be6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000bce:	4b62      	ldr	r3, [pc, #392]	; (8000d58 <HAL_RCC_OscConfig+0x2ac>)
 8000bd0:	689b      	ldr	r3, [r3, #8]
 8000bd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000bd6:	2b08      	cmp	r3, #8
 8000bd8:	d11c      	bne.n	8000c14 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000bda:	4b5f      	ldr	r3, [pc, #380]	; (8000d58 <HAL_RCC_OscConfig+0x2ac>)
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d116      	bne.n	8000c14 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000be6:	4b5c      	ldr	r3, [pc, #368]	; (8000d58 <HAL_RCC_OscConfig+0x2ac>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f003 0302 	and.w	r3, r3, #2
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d005      	beq.n	8000bfe <HAL_RCC_OscConfig+0x152>
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	68db      	ldr	r3, [r3, #12]
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	d001      	beq.n	8000bfe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	e18d      	b.n	8000f1a <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000bfe:	4b56      	ldr	r3, [pc, #344]	; (8000d58 <HAL_RCC_OscConfig+0x2ac>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	691b      	ldr	r3, [r3, #16]
 8000c0a:	00db      	lsls	r3, r3, #3
 8000c0c:	4952      	ldr	r1, [pc, #328]	; (8000d58 <HAL_RCC_OscConfig+0x2ac>)
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c12:	e03a      	b.n	8000c8a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	68db      	ldr	r3, [r3, #12]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d020      	beq.n	8000c5e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c1c:	4b4f      	ldr	r3, [pc, #316]	; (8000d5c <HAL_RCC_OscConfig+0x2b0>)
 8000c1e:	2201      	movs	r2, #1
 8000c20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c22:	f7ff fcb7 	bl	8000594 <HAL_GetTick>
 8000c26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c28:	e008      	b.n	8000c3c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c2a:	f7ff fcb3 	bl	8000594 <HAL_GetTick>
 8000c2e:	4602      	mov	r2, r0
 8000c30:	693b      	ldr	r3, [r7, #16]
 8000c32:	1ad3      	subs	r3, r2, r3
 8000c34:	2b02      	cmp	r3, #2
 8000c36:	d901      	bls.n	8000c3c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000c38:	2303      	movs	r3, #3
 8000c3a:	e16e      	b.n	8000f1a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c3c:	4b46      	ldr	r3, [pc, #280]	; (8000d58 <HAL_RCC_OscConfig+0x2ac>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	f003 0302 	and.w	r3, r3, #2
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d0f0      	beq.n	8000c2a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c48:	4b43      	ldr	r3, [pc, #268]	; (8000d58 <HAL_RCC_OscConfig+0x2ac>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	691b      	ldr	r3, [r3, #16]
 8000c54:	00db      	lsls	r3, r3, #3
 8000c56:	4940      	ldr	r1, [pc, #256]	; (8000d58 <HAL_RCC_OscConfig+0x2ac>)
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	600b      	str	r3, [r1, #0]
 8000c5c:	e015      	b.n	8000c8a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000c5e:	4b3f      	ldr	r3, [pc, #252]	; (8000d5c <HAL_RCC_OscConfig+0x2b0>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c64:	f7ff fc96 	bl	8000594 <HAL_GetTick>
 8000c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c6a:	e008      	b.n	8000c7e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c6c:	f7ff fc92 	bl	8000594 <HAL_GetTick>
 8000c70:	4602      	mov	r2, r0
 8000c72:	693b      	ldr	r3, [r7, #16]
 8000c74:	1ad3      	subs	r3, r2, r3
 8000c76:	2b02      	cmp	r3, #2
 8000c78:	d901      	bls.n	8000c7e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000c7a:	2303      	movs	r3, #3
 8000c7c:	e14d      	b.n	8000f1a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c7e:	4b36      	ldr	r3, [pc, #216]	; (8000d58 <HAL_RCC_OscConfig+0x2ac>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f003 0302 	and.w	r3, r3, #2
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d1f0      	bne.n	8000c6c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f003 0308 	and.w	r3, r3, #8
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d030      	beq.n	8000cf8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	695b      	ldr	r3, [r3, #20]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d016      	beq.n	8000ccc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000c9e:	4b30      	ldr	r3, [pc, #192]	; (8000d60 <HAL_RCC_OscConfig+0x2b4>)
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ca4:	f7ff fc76 	bl	8000594 <HAL_GetTick>
 8000ca8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000caa:	e008      	b.n	8000cbe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000cac:	f7ff fc72 	bl	8000594 <HAL_GetTick>
 8000cb0:	4602      	mov	r2, r0
 8000cb2:	693b      	ldr	r3, [r7, #16]
 8000cb4:	1ad3      	subs	r3, r2, r3
 8000cb6:	2b02      	cmp	r3, #2
 8000cb8:	d901      	bls.n	8000cbe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000cba:	2303      	movs	r3, #3
 8000cbc:	e12d      	b.n	8000f1a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cbe:	4b26      	ldr	r3, [pc, #152]	; (8000d58 <HAL_RCC_OscConfig+0x2ac>)
 8000cc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000cc2:	f003 0302 	and.w	r3, r3, #2
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d0f0      	beq.n	8000cac <HAL_RCC_OscConfig+0x200>
 8000cca:	e015      	b.n	8000cf8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ccc:	4b24      	ldr	r3, [pc, #144]	; (8000d60 <HAL_RCC_OscConfig+0x2b4>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000cd2:	f7ff fc5f 	bl	8000594 <HAL_GetTick>
 8000cd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000cd8:	e008      	b.n	8000cec <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000cda:	f7ff fc5b 	bl	8000594 <HAL_GetTick>
 8000cde:	4602      	mov	r2, r0
 8000ce0:	693b      	ldr	r3, [r7, #16]
 8000ce2:	1ad3      	subs	r3, r2, r3
 8000ce4:	2b02      	cmp	r3, #2
 8000ce6:	d901      	bls.n	8000cec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000ce8:	2303      	movs	r3, #3
 8000cea:	e116      	b.n	8000f1a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000cec:	4b1a      	ldr	r3, [pc, #104]	; (8000d58 <HAL_RCC_OscConfig+0x2ac>)
 8000cee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000cf0:	f003 0302 	and.w	r3, r3, #2
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d1f0      	bne.n	8000cda <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f003 0304 	and.w	r3, r3, #4
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	f000 80a0 	beq.w	8000e46 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000d06:	2300      	movs	r3, #0
 8000d08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d0a:	4b13      	ldr	r3, [pc, #76]	; (8000d58 <HAL_RCC_OscConfig+0x2ac>)
 8000d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d10f      	bne.n	8000d36 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	60fb      	str	r3, [r7, #12]
 8000d1a:	4b0f      	ldr	r3, [pc, #60]	; (8000d58 <HAL_RCC_OscConfig+0x2ac>)
 8000d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1e:	4a0e      	ldr	r2, [pc, #56]	; (8000d58 <HAL_RCC_OscConfig+0x2ac>)
 8000d20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d24:	6413      	str	r3, [r2, #64]	; 0x40
 8000d26:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <HAL_RCC_OscConfig+0x2ac>)
 8000d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000d32:	2301      	movs	r3, #1
 8000d34:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d36:	4b0b      	ldr	r3, [pc, #44]	; (8000d64 <HAL_RCC_OscConfig+0x2b8>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d121      	bne.n	8000d86 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d42:	4b08      	ldr	r3, [pc, #32]	; (8000d64 <HAL_RCC_OscConfig+0x2b8>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a07      	ldr	r2, [pc, #28]	; (8000d64 <HAL_RCC_OscConfig+0x2b8>)
 8000d48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000d4e:	f7ff fc21 	bl	8000594 <HAL_GetTick>
 8000d52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d54:	e011      	b.n	8000d7a <HAL_RCC_OscConfig+0x2ce>
 8000d56:	bf00      	nop
 8000d58:	40023800 	.word	0x40023800
 8000d5c:	42470000 	.word	0x42470000
 8000d60:	42470e80 	.word	0x42470e80
 8000d64:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d68:	f7ff fc14 	bl	8000594 <HAL_GetTick>
 8000d6c:	4602      	mov	r2, r0
 8000d6e:	693b      	ldr	r3, [r7, #16]
 8000d70:	1ad3      	subs	r3, r2, r3
 8000d72:	2b02      	cmp	r3, #2
 8000d74:	d901      	bls.n	8000d7a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8000d76:	2303      	movs	r3, #3
 8000d78:	e0cf      	b.n	8000f1a <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d7a:	4b6a      	ldr	r3, [pc, #424]	; (8000f24 <HAL_RCC_OscConfig+0x478>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d0f0      	beq.n	8000d68 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	689b      	ldr	r3, [r3, #8]
 8000d8a:	2b01      	cmp	r3, #1
 8000d8c:	d106      	bne.n	8000d9c <HAL_RCC_OscConfig+0x2f0>
 8000d8e:	4b66      	ldr	r3, [pc, #408]	; (8000f28 <HAL_RCC_OscConfig+0x47c>)
 8000d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000d92:	4a65      	ldr	r2, [pc, #404]	; (8000f28 <HAL_RCC_OscConfig+0x47c>)
 8000d94:	f043 0301 	orr.w	r3, r3, #1
 8000d98:	6713      	str	r3, [r2, #112]	; 0x70
 8000d9a:	e01c      	b.n	8000dd6 <HAL_RCC_OscConfig+0x32a>
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	689b      	ldr	r3, [r3, #8]
 8000da0:	2b05      	cmp	r3, #5
 8000da2:	d10c      	bne.n	8000dbe <HAL_RCC_OscConfig+0x312>
 8000da4:	4b60      	ldr	r3, [pc, #384]	; (8000f28 <HAL_RCC_OscConfig+0x47c>)
 8000da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000da8:	4a5f      	ldr	r2, [pc, #380]	; (8000f28 <HAL_RCC_OscConfig+0x47c>)
 8000daa:	f043 0304 	orr.w	r3, r3, #4
 8000dae:	6713      	str	r3, [r2, #112]	; 0x70
 8000db0:	4b5d      	ldr	r3, [pc, #372]	; (8000f28 <HAL_RCC_OscConfig+0x47c>)
 8000db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000db4:	4a5c      	ldr	r2, [pc, #368]	; (8000f28 <HAL_RCC_OscConfig+0x47c>)
 8000db6:	f043 0301 	orr.w	r3, r3, #1
 8000dba:	6713      	str	r3, [r2, #112]	; 0x70
 8000dbc:	e00b      	b.n	8000dd6 <HAL_RCC_OscConfig+0x32a>
 8000dbe:	4b5a      	ldr	r3, [pc, #360]	; (8000f28 <HAL_RCC_OscConfig+0x47c>)
 8000dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000dc2:	4a59      	ldr	r2, [pc, #356]	; (8000f28 <HAL_RCC_OscConfig+0x47c>)
 8000dc4:	f023 0301 	bic.w	r3, r3, #1
 8000dc8:	6713      	str	r3, [r2, #112]	; 0x70
 8000dca:	4b57      	ldr	r3, [pc, #348]	; (8000f28 <HAL_RCC_OscConfig+0x47c>)
 8000dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000dce:	4a56      	ldr	r2, [pc, #344]	; (8000f28 <HAL_RCC_OscConfig+0x47c>)
 8000dd0:	f023 0304 	bic.w	r3, r3, #4
 8000dd4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	689b      	ldr	r3, [r3, #8]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d015      	beq.n	8000e0a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000dde:	f7ff fbd9 	bl	8000594 <HAL_GetTick>
 8000de2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000de4:	e00a      	b.n	8000dfc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000de6:	f7ff fbd5 	bl	8000594 <HAL_GetTick>
 8000dea:	4602      	mov	r2, r0
 8000dec:	693b      	ldr	r3, [r7, #16]
 8000dee:	1ad3      	subs	r3, r2, r3
 8000df0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d901      	bls.n	8000dfc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8000df8:	2303      	movs	r3, #3
 8000dfa:	e08e      	b.n	8000f1a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000dfc:	4b4a      	ldr	r3, [pc, #296]	; (8000f28 <HAL_RCC_OscConfig+0x47c>)
 8000dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e00:	f003 0302 	and.w	r3, r3, #2
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d0ee      	beq.n	8000de6 <HAL_RCC_OscConfig+0x33a>
 8000e08:	e014      	b.n	8000e34 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e0a:	f7ff fbc3 	bl	8000594 <HAL_GetTick>
 8000e0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e10:	e00a      	b.n	8000e28 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e12:	f7ff fbbf 	bl	8000594 <HAL_GetTick>
 8000e16:	4602      	mov	r2, r0
 8000e18:	693b      	ldr	r3, [r7, #16]
 8000e1a:	1ad3      	subs	r3, r2, r3
 8000e1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d901      	bls.n	8000e28 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8000e24:	2303      	movs	r3, #3
 8000e26:	e078      	b.n	8000f1a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e28:	4b3f      	ldr	r3, [pc, #252]	; (8000f28 <HAL_RCC_OscConfig+0x47c>)
 8000e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e2c:	f003 0302 	and.w	r3, r3, #2
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d1ee      	bne.n	8000e12 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000e34:	7dfb      	ldrb	r3, [r7, #23]
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	d105      	bne.n	8000e46 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e3a:	4b3b      	ldr	r3, [pc, #236]	; (8000f28 <HAL_RCC_OscConfig+0x47c>)
 8000e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3e:	4a3a      	ldr	r2, [pc, #232]	; (8000f28 <HAL_RCC_OscConfig+0x47c>)
 8000e40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e44:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	699b      	ldr	r3, [r3, #24]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d064      	beq.n	8000f18 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000e4e:	4b36      	ldr	r3, [pc, #216]	; (8000f28 <HAL_RCC_OscConfig+0x47c>)
 8000e50:	689b      	ldr	r3, [r3, #8]
 8000e52:	f003 030c 	and.w	r3, r3, #12
 8000e56:	2b08      	cmp	r3, #8
 8000e58:	d05c      	beq.n	8000f14 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	699b      	ldr	r3, [r3, #24]
 8000e5e:	2b02      	cmp	r3, #2
 8000e60:	d141      	bne.n	8000ee6 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e62:	4b32      	ldr	r3, [pc, #200]	; (8000f2c <HAL_RCC_OscConfig+0x480>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e68:	f7ff fb94 	bl	8000594 <HAL_GetTick>
 8000e6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e6e:	e008      	b.n	8000e82 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e70:	f7ff fb90 	bl	8000594 <HAL_GetTick>
 8000e74:	4602      	mov	r2, r0
 8000e76:	693b      	ldr	r3, [r7, #16]
 8000e78:	1ad3      	subs	r3, r2, r3
 8000e7a:	2b02      	cmp	r3, #2
 8000e7c:	d901      	bls.n	8000e82 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8000e7e:	2303      	movs	r3, #3
 8000e80:	e04b      	b.n	8000f1a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e82:	4b29      	ldr	r3, [pc, #164]	; (8000f28 <HAL_RCC_OscConfig+0x47c>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d1f0      	bne.n	8000e70 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	69da      	ldr	r2, [r3, #28]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6a1b      	ldr	r3, [r3, #32]
 8000e96:	431a      	orrs	r2, r3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e9c:	019b      	lsls	r3, r3, #6
 8000e9e:	431a      	orrs	r2, r3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ea4:	085b      	lsrs	r3, r3, #1
 8000ea6:	3b01      	subs	r3, #1
 8000ea8:	041b      	lsls	r3, r3, #16
 8000eaa:	431a      	orrs	r2, r3
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eb0:	061b      	lsls	r3, r3, #24
 8000eb2:	491d      	ldr	r1, [pc, #116]	; (8000f28 <HAL_RCC_OscConfig+0x47c>)
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000eb8:	4b1c      	ldr	r3, [pc, #112]	; (8000f2c <HAL_RCC_OscConfig+0x480>)
 8000eba:	2201      	movs	r2, #1
 8000ebc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ebe:	f7ff fb69 	bl	8000594 <HAL_GetTick>
 8000ec2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ec4:	e008      	b.n	8000ed8 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ec6:	f7ff fb65 	bl	8000594 <HAL_GetTick>
 8000eca:	4602      	mov	r2, r0
 8000ecc:	693b      	ldr	r3, [r7, #16]
 8000ece:	1ad3      	subs	r3, r2, r3
 8000ed0:	2b02      	cmp	r3, #2
 8000ed2:	d901      	bls.n	8000ed8 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	e020      	b.n	8000f1a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ed8:	4b13      	ldr	r3, [pc, #76]	; (8000f28 <HAL_RCC_OscConfig+0x47c>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d0f0      	beq.n	8000ec6 <HAL_RCC_OscConfig+0x41a>
 8000ee4:	e018      	b.n	8000f18 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ee6:	4b11      	ldr	r3, [pc, #68]	; (8000f2c <HAL_RCC_OscConfig+0x480>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eec:	f7ff fb52 	bl	8000594 <HAL_GetTick>
 8000ef0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ef2:	e008      	b.n	8000f06 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ef4:	f7ff fb4e 	bl	8000594 <HAL_GetTick>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	2b02      	cmp	r3, #2
 8000f00:	d901      	bls.n	8000f06 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8000f02:	2303      	movs	r3, #3
 8000f04:	e009      	b.n	8000f1a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f06:	4b08      	ldr	r3, [pc, #32]	; (8000f28 <HAL_RCC_OscConfig+0x47c>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d1f0      	bne.n	8000ef4 <HAL_RCC_OscConfig+0x448>
 8000f12:	e001      	b.n	8000f18 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8000f14:	2301      	movs	r3, #1
 8000f16:	e000      	b.n	8000f1a <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8000f18:	2300      	movs	r3, #0
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3718      	adds	r7, #24
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	40007000 	.word	0x40007000
 8000f28:	40023800 	.word	0x40023800
 8000f2c:	42470060 	.word	0x42470060

08000f30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d101      	bne.n	8000f44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000f40:	2301      	movs	r3, #1
 8000f42:	e0ca      	b.n	80010da <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000f44:	4b67      	ldr	r3, [pc, #412]	; (80010e4 <HAL_RCC_ClockConfig+0x1b4>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f003 030f 	and.w	r3, r3, #15
 8000f4c:	683a      	ldr	r2, [r7, #0]
 8000f4e:	429a      	cmp	r2, r3
 8000f50:	d90c      	bls.n	8000f6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f52:	4b64      	ldr	r3, [pc, #400]	; (80010e4 <HAL_RCC_ClockConfig+0x1b4>)
 8000f54:	683a      	ldr	r2, [r7, #0]
 8000f56:	b2d2      	uxtb	r2, r2
 8000f58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f5a:	4b62      	ldr	r3, [pc, #392]	; (80010e4 <HAL_RCC_ClockConfig+0x1b4>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f003 030f 	and.w	r3, r3, #15
 8000f62:	683a      	ldr	r2, [r7, #0]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	d001      	beq.n	8000f6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	e0b6      	b.n	80010da <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f003 0302 	and.w	r3, r3, #2
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d020      	beq.n	8000fba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f003 0304 	and.w	r3, r3, #4
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d005      	beq.n	8000f90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000f84:	4b58      	ldr	r3, [pc, #352]	; (80010e8 <HAL_RCC_ClockConfig+0x1b8>)
 8000f86:	689b      	ldr	r3, [r3, #8]
 8000f88:	4a57      	ldr	r2, [pc, #348]	; (80010e8 <HAL_RCC_ClockConfig+0x1b8>)
 8000f8a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000f8e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f003 0308 	and.w	r3, r3, #8
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d005      	beq.n	8000fa8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000f9c:	4b52      	ldr	r3, [pc, #328]	; (80010e8 <HAL_RCC_ClockConfig+0x1b8>)
 8000f9e:	689b      	ldr	r3, [r3, #8]
 8000fa0:	4a51      	ldr	r2, [pc, #324]	; (80010e8 <HAL_RCC_ClockConfig+0x1b8>)
 8000fa2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000fa6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000fa8:	4b4f      	ldr	r3, [pc, #316]	; (80010e8 <HAL_RCC_ClockConfig+0x1b8>)
 8000faa:	689b      	ldr	r3, [r3, #8]
 8000fac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	689b      	ldr	r3, [r3, #8]
 8000fb4:	494c      	ldr	r1, [pc, #304]	; (80010e8 <HAL_RCC_ClockConfig+0x1b8>)
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f003 0301 	and.w	r3, r3, #1
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d044      	beq.n	8001050 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d107      	bne.n	8000fde <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fce:	4b46      	ldr	r3, [pc, #280]	; (80010e8 <HAL_RCC_ClockConfig+0x1b8>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d119      	bne.n	800100e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e07d      	b.n	80010da <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	2b02      	cmp	r3, #2
 8000fe4:	d003      	beq.n	8000fee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000fea:	2b03      	cmp	r3, #3
 8000fec:	d107      	bne.n	8000ffe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fee:	4b3e      	ldr	r3, [pc, #248]	; (80010e8 <HAL_RCC_ClockConfig+0x1b8>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d109      	bne.n	800100e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e06d      	b.n	80010da <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ffe:	4b3a      	ldr	r3, [pc, #232]	; (80010e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f003 0302 	and.w	r3, r3, #2
 8001006:	2b00      	cmp	r3, #0
 8001008:	d101      	bne.n	800100e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e065      	b.n	80010da <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800100e:	4b36      	ldr	r3, [pc, #216]	; (80010e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001010:	689b      	ldr	r3, [r3, #8]
 8001012:	f023 0203 	bic.w	r2, r3, #3
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	4933      	ldr	r1, [pc, #204]	; (80010e8 <HAL_RCC_ClockConfig+0x1b8>)
 800101c:	4313      	orrs	r3, r2
 800101e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001020:	f7ff fab8 	bl	8000594 <HAL_GetTick>
 8001024:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001026:	e00a      	b.n	800103e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001028:	f7ff fab4 	bl	8000594 <HAL_GetTick>
 800102c:	4602      	mov	r2, r0
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	f241 3288 	movw	r2, #5000	; 0x1388
 8001036:	4293      	cmp	r3, r2
 8001038:	d901      	bls.n	800103e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800103a:	2303      	movs	r3, #3
 800103c:	e04d      	b.n	80010da <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800103e:	4b2a      	ldr	r3, [pc, #168]	; (80010e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	f003 020c 	and.w	r2, r3, #12
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	429a      	cmp	r2, r3
 800104e:	d1eb      	bne.n	8001028 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001050:	4b24      	ldr	r3, [pc, #144]	; (80010e4 <HAL_RCC_ClockConfig+0x1b4>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f003 030f 	and.w	r3, r3, #15
 8001058:	683a      	ldr	r2, [r7, #0]
 800105a:	429a      	cmp	r2, r3
 800105c:	d20c      	bcs.n	8001078 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800105e:	4b21      	ldr	r3, [pc, #132]	; (80010e4 <HAL_RCC_ClockConfig+0x1b4>)
 8001060:	683a      	ldr	r2, [r7, #0]
 8001062:	b2d2      	uxtb	r2, r2
 8001064:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001066:	4b1f      	ldr	r3, [pc, #124]	; (80010e4 <HAL_RCC_ClockConfig+0x1b4>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f003 030f 	and.w	r3, r3, #15
 800106e:	683a      	ldr	r2, [r7, #0]
 8001070:	429a      	cmp	r2, r3
 8001072:	d001      	beq.n	8001078 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001074:	2301      	movs	r3, #1
 8001076:	e030      	b.n	80010da <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f003 0304 	and.w	r3, r3, #4
 8001080:	2b00      	cmp	r3, #0
 8001082:	d008      	beq.n	8001096 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001084:	4b18      	ldr	r3, [pc, #96]	; (80010e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001086:	689b      	ldr	r3, [r3, #8]
 8001088:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	4915      	ldr	r1, [pc, #84]	; (80010e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001092:	4313      	orrs	r3, r2
 8001094:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f003 0308 	and.w	r3, r3, #8
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d009      	beq.n	80010b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80010a2:	4b11      	ldr	r3, [pc, #68]	; (80010e8 <HAL_RCC_ClockConfig+0x1b8>)
 80010a4:	689b      	ldr	r3, [r3, #8]
 80010a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	691b      	ldr	r3, [r3, #16]
 80010ae:	00db      	lsls	r3, r3, #3
 80010b0:	490d      	ldr	r1, [pc, #52]	; (80010e8 <HAL_RCC_ClockConfig+0x1b8>)
 80010b2:	4313      	orrs	r3, r2
 80010b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80010b6:	f000 f81d 	bl	80010f4 <HAL_RCC_GetSysClockFreq>
 80010ba:	4601      	mov	r1, r0
 80010bc:	4b0a      	ldr	r3, [pc, #40]	; (80010e8 <HAL_RCC_ClockConfig+0x1b8>)
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	091b      	lsrs	r3, r3, #4
 80010c2:	f003 030f 	and.w	r3, r3, #15
 80010c6:	4a09      	ldr	r2, [pc, #36]	; (80010ec <HAL_RCC_ClockConfig+0x1bc>)
 80010c8:	5cd3      	ldrb	r3, [r2, r3]
 80010ca:	fa21 f303 	lsr.w	r3, r1, r3
 80010ce:	4a08      	ldr	r2, [pc, #32]	; (80010f0 <HAL_RCC_ClockConfig+0x1c0>)
 80010d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80010d2:	2000      	movs	r0, #0
 80010d4:	f7ff fa1a 	bl	800050c <HAL_InitTick>

  return HAL_OK;
 80010d8:	2300      	movs	r3, #0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3710      	adds	r7, #16
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40023c00 	.word	0x40023c00
 80010e8:	40023800 	.word	0x40023800
 80010ec:	08002ec8 	.word	0x08002ec8
 80010f0:	20000008 	.word	0x20000008

080010f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80010f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010f6:	b085      	sub	sp, #20
 80010f8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80010fa:	2300      	movs	r3, #0
 80010fc:	607b      	str	r3, [r7, #4]
 80010fe:	2300      	movs	r3, #0
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	2300      	movs	r3, #0
 8001104:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001106:	2300      	movs	r3, #0
 8001108:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800110a:	4b50      	ldr	r3, [pc, #320]	; (800124c <HAL_RCC_GetSysClockFreq+0x158>)
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	f003 030c 	and.w	r3, r3, #12
 8001112:	2b04      	cmp	r3, #4
 8001114:	d007      	beq.n	8001126 <HAL_RCC_GetSysClockFreq+0x32>
 8001116:	2b08      	cmp	r3, #8
 8001118:	d008      	beq.n	800112c <HAL_RCC_GetSysClockFreq+0x38>
 800111a:	2b00      	cmp	r3, #0
 800111c:	f040 808d 	bne.w	800123a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001120:	4b4b      	ldr	r3, [pc, #300]	; (8001250 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001122:	60bb      	str	r3, [r7, #8]
       break;
 8001124:	e08c      	b.n	8001240 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001126:	4b4b      	ldr	r3, [pc, #300]	; (8001254 <HAL_RCC_GetSysClockFreq+0x160>)
 8001128:	60bb      	str	r3, [r7, #8]
      break;
 800112a:	e089      	b.n	8001240 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800112c:	4b47      	ldr	r3, [pc, #284]	; (800124c <HAL_RCC_GetSysClockFreq+0x158>)
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001134:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001136:	4b45      	ldr	r3, [pc, #276]	; (800124c <HAL_RCC_GetSysClockFreq+0x158>)
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800113e:	2b00      	cmp	r3, #0
 8001140:	d023      	beq.n	800118a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001142:	4b42      	ldr	r3, [pc, #264]	; (800124c <HAL_RCC_GetSysClockFreq+0x158>)
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	099b      	lsrs	r3, r3, #6
 8001148:	f04f 0400 	mov.w	r4, #0
 800114c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001150:	f04f 0200 	mov.w	r2, #0
 8001154:	ea03 0501 	and.w	r5, r3, r1
 8001158:	ea04 0602 	and.w	r6, r4, r2
 800115c:	4a3d      	ldr	r2, [pc, #244]	; (8001254 <HAL_RCC_GetSysClockFreq+0x160>)
 800115e:	fb02 f106 	mul.w	r1, r2, r6
 8001162:	2200      	movs	r2, #0
 8001164:	fb02 f205 	mul.w	r2, r2, r5
 8001168:	440a      	add	r2, r1
 800116a:	493a      	ldr	r1, [pc, #232]	; (8001254 <HAL_RCC_GetSysClockFreq+0x160>)
 800116c:	fba5 0101 	umull	r0, r1, r5, r1
 8001170:	1853      	adds	r3, r2, r1
 8001172:	4619      	mov	r1, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f04f 0400 	mov.w	r4, #0
 800117a:	461a      	mov	r2, r3
 800117c:	4623      	mov	r3, r4
 800117e:	f7ff f823 	bl	80001c8 <__aeabi_uldivmod>
 8001182:	4603      	mov	r3, r0
 8001184:	460c      	mov	r4, r1
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	e049      	b.n	800121e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800118a:	4b30      	ldr	r3, [pc, #192]	; (800124c <HAL_RCC_GetSysClockFreq+0x158>)
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	099b      	lsrs	r3, r3, #6
 8001190:	f04f 0400 	mov.w	r4, #0
 8001194:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001198:	f04f 0200 	mov.w	r2, #0
 800119c:	ea03 0501 	and.w	r5, r3, r1
 80011a0:	ea04 0602 	and.w	r6, r4, r2
 80011a4:	4629      	mov	r1, r5
 80011a6:	4632      	mov	r2, r6
 80011a8:	f04f 0300 	mov.w	r3, #0
 80011ac:	f04f 0400 	mov.w	r4, #0
 80011b0:	0154      	lsls	r4, r2, #5
 80011b2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80011b6:	014b      	lsls	r3, r1, #5
 80011b8:	4619      	mov	r1, r3
 80011ba:	4622      	mov	r2, r4
 80011bc:	1b49      	subs	r1, r1, r5
 80011be:	eb62 0206 	sbc.w	r2, r2, r6
 80011c2:	f04f 0300 	mov.w	r3, #0
 80011c6:	f04f 0400 	mov.w	r4, #0
 80011ca:	0194      	lsls	r4, r2, #6
 80011cc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80011d0:	018b      	lsls	r3, r1, #6
 80011d2:	1a5b      	subs	r3, r3, r1
 80011d4:	eb64 0402 	sbc.w	r4, r4, r2
 80011d8:	f04f 0100 	mov.w	r1, #0
 80011dc:	f04f 0200 	mov.w	r2, #0
 80011e0:	00e2      	lsls	r2, r4, #3
 80011e2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80011e6:	00d9      	lsls	r1, r3, #3
 80011e8:	460b      	mov	r3, r1
 80011ea:	4614      	mov	r4, r2
 80011ec:	195b      	adds	r3, r3, r5
 80011ee:	eb44 0406 	adc.w	r4, r4, r6
 80011f2:	f04f 0100 	mov.w	r1, #0
 80011f6:	f04f 0200 	mov.w	r2, #0
 80011fa:	02a2      	lsls	r2, r4, #10
 80011fc:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001200:	0299      	lsls	r1, r3, #10
 8001202:	460b      	mov	r3, r1
 8001204:	4614      	mov	r4, r2
 8001206:	4618      	mov	r0, r3
 8001208:	4621      	mov	r1, r4
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	f04f 0400 	mov.w	r4, #0
 8001210:	461a      	mov	r2, r3
 8001212:	4623      	mov	r3, r4
 8001214:	f7fe ffd8 	bl	80001c8 <__aeabi_uldivmod>
 8001218:	4603      	mov	r3, r0
 800121a:	460c      	mov	r4, r1
 800121c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800121e:	4b0b      	ldr	r3, [pc, #44]	; (800124c <HAL_RCC_GetSysClockFreq+0x158>)
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	0c1b      	lsrs	r3, r3, #16
 8001224:	f003 0303 	and.w	r3, r3, #3
 8001228:	3301      	adds	r3, #1
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800122e:	68fa      	ldr	r2, [r7, #12]
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	fbb2 f3f3 	udiv	r3, r2, r3
 8001236:	60bb      	str	r3, [r7, #8]
      break;
 8001238:	e002      	b.n	8001240 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800123a:	4b05      	ldr	r3, [pc, #20]	; (8001250 <HAL_RCC_GetSysClockFreq+0x15c>)
 800123c:	60bb      	str	r3, [r7, #8]
      break;
 800123e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001240:	68bb      	ldr	r3, [r7, #8]
}
 8001242:	4618      	mov	r0, r3
 8001244:	3714      	adds	r7, #20
 8001246:	46bd      	mov	sp, r7
 8001248:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800124a:	bf00      	nop
 800124c:	40023800 	.word	0x40023800
 8001250:	00f42400 	.word	0x00f42400
 8001254:	017d7840 	.word	0x017d7840

08001258 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800125c:	4b03      	ldr	r3, [pc, #12]	; (800126c <HAL_RCC_GetHCLKFreq+0x14>)
 800125e:	681b      	ldr	r3, [r3, #0]
}
 8001260:	4618      	mov	r0, r3
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	20000008 	.word	0x20000008

08001270 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001274:	f7ff fff0 	bl	8001258 <HAL_RCC_GetHCLKFreq>
 8001278:	4601      	mov	r1, r0
 800127a:	4b05      	ldr	r3, [pc, #20]	; (8001290 <HAL_RCC_GetPCLK1Freq+0x20>)
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	0a9b      	lsrs	r3, r3, #10
 8001280:	f003 0307 	and.w	r3, r3, #7
 8001284:	4a03      	ldr	r2, [pc, #12]	; (8001294 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001286:	5cd3      	ldrb	r3, [r2, r3]
 8001288:	fa21 f303 	lsr.w	r3, r1, r3
}
 800128c:	4618      	mov	r0, r3
 800128e:	bd80      	pop	{r7, pc}
 8001290:	40023800 	.word	0x40023800
 8001294:	08002ed8 	.word	0x08002ed8

08001298 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800129c:	f7ff ffdc 	bl	8001258 <HAL_RCC_GetHCLKFreq>
 80012a0:	4601      	mov	r1, r0
 80012a2:	4b05      	ldr	r3, [pc, #20]	; (80012b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	0b5b      	lsrs	r3, r3, #13
 80012a8:	f003 0307 	and.w	r3, r3, #7
 80012ac:	4a03      	ldr	r2, [pc, #12]	; (80012bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80012ae:	5cd3      	ldrb	r3, [r2, r3]
 80012b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40023800 	.word	0x40023800
 80012bc:	08002ed8 	.word	0x08002ed8

080012c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d101      	bne.n	80012d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	e01d      	b.n	800130e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d106      	bne.n	80012ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2200      	movs	r2, #0
 80012e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f001 fc82 	bl	8002bf0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2202      	movs	r2, #2
 80012f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	3304      	adds	r3, #4
 80012fc:	4619      	mov	r1, r3
 80012fe:	4610      	mov	r0, r2
 8001300:	f000 fae0 	bl	80018c4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2201      	movs	r2, #1
 8001308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800130c:	2300      	movs	r3, #0
}
 800130e:	4618      	mov	r0, r3
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001316:	b480      	push	{r7}
 8001318:	b085      	sub	sp, #20
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2202      	movs	r2, #2
 8001322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	f003 0307 	and.w	r3, r3, #7
 8001330:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	2b06      	cmp	r3, #6
 8001336:	d007      	beq.n	8001348 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f042 0201 	orr.w	r2, r2, #1
 8001346:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2201      	movs	r2, #1
 800134c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8001350:	2300      	movs	r3, #0
}
 8001352:	4618      	mov	r0, r3
 8001354:	3714      	adds	r7, #20
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr

0800135e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800135e:	b580      	push	{r7, lr}
 8001360:	b082      	sub	sp, #8
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d101      	bne.n	8001370 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800136c:	2301      	movs	r3, #1
 800136e:	e01d      	b.n	80013ac <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001376:	b2db      	uxtb	r3, r3
 8001378:	2b00      	cmp	r3, #0
 800137a:	d106      	bne.n	800138a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2200      	movs	r2, #0
 8001380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f000 f815 	bl	80013b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2202      	movs	r2, #2
 800138e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	3304      	adds	r3, #4
 800139a:	4619      	mov	r1, r3
 800139c:	4610      	mov	r0, r2
 800139e:	f000 fa91 	bl	80018c4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2201      	movs	r2, #1
 80013a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80013aa:	2300      	movs	r3, #0
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3708      	adds	r7, #8
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80013bc:	bf00      	nop
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	2201      	movs	r2, #1
 80013d8:	6839      	ldr	r1, [r7, #0]
 80013da:	4618      	mov	r0, r3
 80013dc:	f000 fef1 	bl	80021c2 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a15      	ldr	r2, [pc, #84]	; (800143c <HAL_TIM_PWM_Start+0x74>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d004      	beq.n	80013f4 <HAL_TIM_PWM_Start+0x2c>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a14      	ldr	r2, [pc, #80]	; (8001440 <HAL_TIM_PWM_Start+0x78>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d101      	bne.n	80013f8 <HAL_TIM_PWM_Start+0x30>
 80013f4:	2301      	movs	r3, #1
 80013f6:	e000      	b.n	80013fa <HAL_TIM_PWM_Start+0x32>
 80013f8:	2300      	movs	r3, #0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d007      	beq.n	800140e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800140c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	f003 0307 	and.w	r3, r3, #7
 8001418:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	2b06      	cmp	r3, #6
 800141e:	d007      	beq.n	8001430 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f042 0201 	orr.w	r2, r2, #1
 800142e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	3710      	adds	r7, #16
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	40010000 	.word	0x40010000
 8001440:	40010400 	.word	0x40010400

08001444 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d101      	bne.n	8001456 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e01d      	b.n	8001492 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800145c:	b2db      	uxtb	r3, r3
 800145e:	2b00      	cmp	r3, #0
 8001460:	d106      	bne.n	8001470 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2200      	movs	r2, #0
 8001466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f000 f815 	bl	800149a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2202      	movs	r2, #2
 8001474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	3304      	adds	r3, #4
 8001480:	4619      	mov	r1, r3
 8001482:	4610      	mov	r0, r2
 8001484:	f000 fa1e 	bl	80018c4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2201      	movs	r2, #1
 800148c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001490:	2300      	movs	r3, #0
}
 8001492:	4618      	mov	r0, r3
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}

0800149a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800149a:	b480      	push	{r7}
 800149c:	b083      	sub	sp, #12
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80014a2:	bf00      	nop
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr

080014ae <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b084      	sub	sp, #16
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
 80014b6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	2201      	movs	r2, #1
 80014be:	6839      	ldr	r1, [r7, #0]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f000 fe7e 	bl	80021c2 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	f003 0307 	and.w	r3, r3, #7
 80014d0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	2b06      	cmp	r3, #6
 80014d6:	d007      	beq.n	80014e8 <HAL_TIM_IC_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f042 0201 	orr.w	r2, r2, #1
 80014e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3710      	adds	r7, #16
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b084      	sub	sp, #16
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	60f8      	str	r0, [r7, #12]
 80014fa:	60b9      	str	r1, [r7, #8]
 80014fc:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001504:	2b01      	cmp	r3, #1
 8001506:	d101      	bne.n	800150c <HAL_TIM_IC_ConfigChannel+0x1a>
 8001508:	2302      	movs	r3, #2
 800150a:	e08a      	b.n	8001622 <HAL_TIM_IC_ConfigChannel+0x130>
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	2201      	movs	r2, #1
 8001510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	2202      	movs	r2, #2
 8001518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d11b      	bne.n	800155a <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	6818      	ldr	r0, [r3, #0]
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	6819      	ldr	r1, [r3, #0]
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	685a      	ldr	r2, [r3, #4]
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	68db      	ldr	r3, [r3, #12]
 8001532:	f000 fc9d 	bl	8001e70 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	699a      	ldr	r2, [r3, #24]
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f022 020c 	bic.w	r2, r2, #12
 8001544:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	6999      	ldr	r1, [r3, #24]
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	689a      	ldr	r2, [r3, #8]
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	430a      	orrs	r2, r1
 8001556:	619a      	str	r2, [r3, #24]
 8001558:	e05a      	b.n	8001610 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2b04      	cmp	r3, #4
 800155e:	d11c      	bne.n	800159a <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	6818      	ldr	r0, [r3, #0]
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	6819      	ldr	r1, [r3, #0]
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	685a      	ldr	r2, [r3, #4]
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	f000 fd21 	bl	8001fb6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	699a      	ldr	r2, [r3, #24]
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001582:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	6999      	ldr	r1, [r3, #24]
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	021a      	lsls	r2, r3, #8
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	430a      	orrs	r2, r1
 8001596:	619a      	str	r2, [r3, #24]
 8001598:	e03a      	b.n	8001610 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2b08      	cmp	r3, #8
 800159e:	d11b      	bne.n	80015d8 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	6818      	ldr	r0, [r3, #0]
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	6819      	ldr	r1, [r3, #0]
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	685a      	ldr	r2, [r3, #4]
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	f000 fd6e 	bl	8002090 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	69da      	ldr	r2, [r3, #28]
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f022 020c 	bic.w	r2, r2, #12
 80015c2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	69d9      	ldr	r1, [r3, #28]
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	689a      	ldr	r2, [r3, #8]
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	430a      	orrs	r2, r1
 80015d4:	61da      	str	r2, [r3, #28]
 80015d6:	e01b      	b.n	8001610 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	6818      	ldr	r0, [r3, #0]
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	6819      	ldr	r1, [r3, #0]
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	685a      	ldr	r2, [r3, #4]
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	f000 fd8e 	bl	8002108 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	69da      	ldr	r2, [r3, #28]
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80015fa:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	69d9      	ldr	r1, [r3, #28]
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	021a      	lsls	r2, r3, #8
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	430a      	orrs	r2, r1
 800160e:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	2201      	movs	r2, #1
 8001614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	2200      	movs	r2, #0
 800161c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001620:	2300      	movs	r3, #0
}
 8001622:	4618      	mov	r0, r3
 8001624:	3710      	adds	r7, #16
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
	...

0800162c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800163e:	2b01      	cmp	r3, #1
 8001640:	d101      	bne.n	8001646 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001642:	2302      	movs	r3, #2
 8001644:	e0b4      	b.n	80017b0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	2201      	movs	r2, #1
 800164a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	2202      	movs	r2, #2
 8001652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2b0c      	cmp	r3, #12
 800165a:	f200 809f 	bhi.w	800179c <HAL_TIM_PWM_ConfigChannel+0x170>
 800165e:	a201      	add	r2, pc, #4	; (adr r2, 8001664 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8001660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001664:	08001699 	.word	0x08001699
 8001668:	0800179d 	.word	0x0800179d
 800166c:	0800179d 	.word	0x0800179d
 8001670:	0800179d 	.word	0x0800179d
 8001674:	080016d9 	.word	0x080016d9
 8001678:	0800179d 	.word	0x0800179d
 800167c:	0800179d 	.word	0x0800179d
 8001680:	0800179d 	.word	0x0800179d
 8001684:	0800171b 	.word	0x0800171b
 8001688:	0800179d 	.word	0x0800179d
 800168c:	0800179d 	.word	0x0800179d
 8001690:	0800179d 	.word	0x0800179d
 8001694:	0800175b 	.word	0x0800175b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	68b9      	ldr	r1, [r7, #8]
 800169e:	4618      	mov	r0, r3
 80016a0:	f000 f9b0 	bl	8001a04 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	699a      	ldr	r2, [r3, #24]
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f042 0208 	orr.w	r2, r2, #8
 80016b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	699a      	ldr	r2, [r3, #24]
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f022 0204 	bic.w	r2, r2, #4
 80016c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	6999      	ldr	r1, [r3, #24]
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	691a      	ldr	r2, [r3, #16]
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	430a      	orrs	r2, r1
 80016d4:	619a      	str	r2, [r3, #24]
      break;
 80016d6:	e062      	b.n	800179e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	68b9      	ldr	r1, [r7, #8]
 80016de:	4618      	mov	r0, r3
 80016e0:	f000 fa00 	bl	8001ae4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	699a      	ldr	r2, [r3, #24]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80016f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	699a      	ldr	r2, [r3, #24]
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001702:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	6999      	ldr	r1, [r3, #24]
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	691b      	ldr	r3, [r3, #16]
 800170e:	021a      	lsls	r2, r3, #8
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	430a      	orrs	r2, r1
 8001716:	619a      	str	r2, [r3, #24]
      break;
 8001718:	e041      	b.n	800179e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	68b9      	ldr	r1, [r7, #8]
 8001720:	4618      	mov	r0, r3
 8001722:	f000 fa55 	bl	8001bd0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	69da      	ldr	r2, [r3, #28]
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f042 0208 	orr.w	r2, r2, #8
 8001734:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	69da      	ldr	r2, [r3, #28]
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f022 0204 	bic.w	r2, r2, #4
 8001744:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	69d9      	ldr	r1, [r3, #28]
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	691a      	ldr	r2, [r3, #16]
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	430a      	orrs	r2, r1
 8001756:	61da      	str	r2, [r3, #28]
      break;
 8001758:	e021      	b.n	800179e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	68b9      	ldr	r1, [r7, #8]
 8001760:	4618      	mov	r0, r3
 8001762:	f000 faa9 	bl	8001cb8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	69da      	ldr	r2, [r3, #28]
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001774:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	69da      	ldr	r2, [r3, #28]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001784:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	69d9      	ldr	r1, [r3, #28]
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	691b      	ldr	r3, [r3, #16]
 8001790:	021a      	lsls	r2, r3, #8
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	430a      	orrs	r2, r1
 8001798:	61da      	str	r2, [r3, #28]
      break;
 800179a:	e000      	b.n	800179e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800179c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	2201      	movs	r2, #1
 80017a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	2200      	movs	r2, #0
 80017aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80017ae:	2300      	movs	r3, #0
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3710      	adds	r7, #16
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d101      	bne.n	80017d0 <HAL_TIM_SlaveConfigSynchro+0x18>
 80017cc:	2302      	movs	r3, #2
 80017ce:	e031      	b.n	8001834 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2201      	movs	r2, #1
 80017d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2202      	movs	r2, #2
 80017dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if(TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80017e0:	6839      	ldr	r1, [r7, #0]
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f000 fabe 	bl	8001d64 <TIM_SlaveTimer_SetConfig>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d009      	beq.n	8001802 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
      htim->State = HAL_TIM_STATE_READY;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2201      	movs	r2, #1
 80017f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2200      	movs	r2, #0
 80017fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e018      	b.n	8001834 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	68da      	ldr	r2, [r3, #12]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001810:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	68da      	ldr	r2, [r3, #12]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001820:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2201      	movs	r2, #1
 8001826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2200      	movs	r2, #0
 800182e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001832:	2300      	movs	r3, #0
}
 8001834:	4618      	mov	r0, r3
 8001836:	3708      	adds	r7, #8
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}

0800183c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800183c:	b480      	push	{r7}
 800183e:	b085      	sub	sp, #20
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8001846:	2300      	movs	r3, #0
 8001848:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	2b0c      	cmp	r3, #12
 800184e:	d831      	bhi.n	80018b4 <HAL_TIM_ReadCapturedValue+0x78>
 8001850:	a201      	add	r2, pc, #4	; (adr r2, 8001858 <HAL_TIM_ReadCapturedValue+0x1c>)
 8001852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001856:	bf00      	nop
 8001858:	0800188d 	.word	0x0800188d
 800185c:	080018b5 	.word	0x080018b5
 8001860:	080018b5 	.word	0x080018b5
 8001864:	080018b5 	.word	0x080018b5
 8001868:	08001897 	.word	0x08001897
 800186c:	080018b5 	.word	0x080018b5
 8001870:	080018b5 	.word	0x080018b5
 8001874:	080018b5 	.word	0x080018b5
 8001878:	080018a1 	.word	0x080018a1
 800187c:	080018b5 	.word	0x080018b5
 8001880:	080018b5 	.word	0x080018b5
 8001884:	080018b5 	.word	0x080018b5
 8001888:	080018ab 	.word	0x080018ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001892:	60fb      	str	r3, [r7, #12]

      break;
 8001894:	e00f      	b.n	80018b6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800189c:	60fb      	str	r3, [r7, #12]

      break;
 800189e:	e00a      	b.n	80018b6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018a6:	60fb      	str	r3, [r7, #12]

      break;
 80018a8:	e005      	b.n	80018b6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b0:	60fb      	str	r3, [r7, #12]

      break;
 80018b2:	e000      	b.n	80018b6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80018b4:	bf00      	nop
  }

  return tmpreg;
 80018b6:	68fb      	ldr	r3, [r7, #12]
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3714      	adds	r7, #20
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b085      	sub	sp, #20
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	4a40      	ldr	r2, [pc, #256]	; (80019d8 <TIM_Base_SetConfig+0x114>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d013      	beq.n	8001904 <TIM_Base_SetConfig+0x40>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018e2:	d00f      	beq.n	8001904 <TIM_Base_SetConfig+0x40>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	4a3d      	ldr	r2, [pc, #244]	; (80019dc <TIM_Base_SetConfig+0x118>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d00b      	beq.n	8001904 <TIM_Base_SetConfig+0x40>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	4a3c      	ldr	r2, [pc, #240]	; (80019e0 <TIM_Base_SetConfig+0x11c>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d007      	beq.n	8001904 <TIM_Base_SetConfig+0x40>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	4a3b      	ldr	r2, [pc, #236]	; (80019e4 <TIM_Base_SetConfig+0x120>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d003      	beq.n	8001904 <TIM_Base_SetConfig+0x40>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	4a3a      	ldr	r2, [pc, #232]	; (80019e8 <TIM_Base_SetConfig+0x124>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d108      	bne.n	8001916 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800190a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	68fa      	ldr	r2, [r7, #12]
 8001912:	4313      	orrs	r3, r2
 8001914:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a2f      	ldr	r2, [pc, #188]	; (80019d8 <TIM_Base_SetConfig+0x114>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d02b      	beq.n	8001976 <TIM_Base_SetConfig+0xb2>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001924:	d027      	beq.n	8001976 <TIM_Base_SetConfig+0xb2>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a2c      	ldr	r2, [pc, #176]	; (80019dc <TIM_Base_SetConfig+0x118>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d023      	beq.n	8001976 <TIM_Base_SetConfig+0xb2>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a2b      	ldr	r2, [pc, #172]	; (80019e0 <TIM_Base_SetConfig+0x11c>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d01f      	beq.n	8001976 <TIM_Base_SetConfig+0xb2>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a2a      	ldr	r2, [pc, #168]	; (80019e4 <TIM_Base_SetConfig+0x120>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d01b      	beq.n	8001976 <TIM_Base_SetConfig+0xb2>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a29      	ldr	r2, [pc, #164]	; (80019e8 <TIM_Base_SetConfig+0x124>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d017      	beq.n	8001976 <TIM_Base_SetConfig+0xb2>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a28      	ldr	r2, [pc, #160]	; (80019ec <TIM_Base_SetConfig+0x128>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d013      	beq.n	8001976 <TIM_Base_SetConfig+0xb2>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a27      	ldr	r2, [pc, #156]	; (80019f0 <TIM_Base_SetConfig+0x12c>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d00f      	beq.n	8001976 <TIM_Base_SetConfig+0xb2>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a26      	ldr	r2, [pc, #152]	; (80019f4 <TIM_Base_SetConfig+0x130>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d00b      	beq.n	8001976 <TIM_Base_SetConfig+0xb2>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a25      	ldr	r2, [pc, #148]	; (80019f8 <TIM_Base_SetConfig+0x134>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d007      	beq.n	8001976 <TIM_Base_SetConfig+0xb2>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a24      	ldr	r2, [pc, #144]	; (80019fc <TIM_Base_SetConfig+0x138>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d003      	beq.n	8001976 <TIM_Base_SetConfig+0xb2>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a23      	ldr	r2, [pc, #140]	; (8001a00 <TIM_Base_SetConfig+0x13c>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d108      	bne.n	8001988 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800197c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	68db      	ldr	r3, [r3, #12]
 8001982:	68fa      	ldr	r2, [r7, #12]
 8001984:	4313      	orrs	r3, r2
 8001986:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	695b      	ldr	r3, [r3, #20]
 8001992:	4313      	orrs	r3, r2
 8001994:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	68fa      	ldr	r2, [r7, #12]
 800199a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	689a      	ldr	r2, [r3, #8]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	4a0a      	ldr	r2, [pc, #40]	; (80019d8 <TIM_Base_SetConfig+0x114>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d003      	beq.n	80019bc <TIM_Base_SetConfig+0xf8>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	4a0c      	ldr	r2, [pc, #48]	; (80019e8 <TIM_Base_SetConfig+0x124>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d103      	bne.n	80019c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	691a      	ldr	r2, [r3, #16]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2201      	movs	r2, #1
 80019c8:	615a      	str	r2, [r3, #20]
}
 80019ca:	bf00      	nop
 80019cc:	3714      	adds	r7, #20
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	40010000 	.word	0x40010000
 80019dc:	40000400 	.word	0x40000400
 80019e0:	40000800 	.word	0x40000800
 80019e4:	40000c00 	.word	0x40000c00
 80019e8:	40010400 	.word	0x40010400
 80019ec:	40014000 	.word	0x40014000
 80019f0:	40014400 	.word	0x40014400
 80019f4:	40014800 	.word	0x40014800
 80019f8:	40001800 	.word	0x40001800
 80019fc:	40001c00 	.word	0x40001c00
 8001a00:	40002000 	.word	0x40002000

08001a04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b087      	sub	sp, #28
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6a1b      	ldr	r3, [r3, #32]
 8001a12:	f023 0201 	bic.w	r2, r3, #1
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6a1b      	ldr	r3, [r3, #32]
 8001a1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	699b      	ldr	r3, [r3, #24]
 8001a2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	f023 0303 	bic.w	r3, r3, #3
 8001a3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	68fa      	ldr	r2, [r7, #12]
 8001a42:	4313      	orrs	r3, r2
 8001a44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	f023 0302 	bic.w	r3, r3, #2
 8001a4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	697a      	ldr	r2, [r7, #20]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	4a20      	ldr	r2, [pc, #128]	; (8001adc <TIM_OC1_SetConfig+0xd8>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d003      	beq.n	8001a68 <TIM_OC1_SetConfig+0x64>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	4a1f      	ldr	r2, [pc, #124]	; (8001ae0 <TIM_OC1_SetConfig+0xdc>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d10c      	bne.n	8001a82 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	f023 0308 	bic.w	r3, r3, #8
 8001a6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	697a      	ldr	r2, [r7, #20]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	f023 0304 	bic.w	r3, r3, #4
 8001a80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4a15      	ldr	r2, [pc, #84]	; (8001adc <TIM_OC1_SetConfig+0xd8>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d003      	beq.n	8001a92 <TIM_OC1_SetConfig+0x8e>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a14      	ldr	r2, [pc, #80]	; (8001ae0 <TIM_OC1_SetConfig+0xdc>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d111      	bne.n	8001ab6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001aa0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	695b      	ldr	r3, [r3, #20]
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	699b      	ldr	r3, [r3, #24]
 8001ab0:	693a      	ldr	r2, [r7, #16]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	693a      	ldr	r2, [r7, #16]
 8001aba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	68fa      	ldr	r2, [r7, #12]
 8001ac0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685a      	ldr	r2, [r3, #4]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	697a      	ldr	r2, [r7, #20]
 8001ace:	621a      	str	r2, [r3, #32]
}
 8001ad0:	bf00      	nop
 8001ad2:	371c      	adds	r7, #28
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr
 8001adc:	40010000 	.word	0x40010000
 8001ae0:	40010400 	.word	0x40010400

08001ae4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b087      	sub	sp, #28
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6a1b      	ldr	r3, [r3, #32]
 8001af2:	f023 0210 	bic.w	r2, r3, #16
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6a1b      	ldr	r3, [r3, #32]
 8001afe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	699b      	ldr	r3, [r3, #24]
 8001b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	021b      	lsls	r3, r3, #8
 8001b22:	68fa      	ldr	r2, [r7, #12]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	f023 0320 	bic.w	r3, r3, #32
 8001b2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	011b      	lsls	r3, r3, #4
 8001b36:	697a      	ldr	r2, [r7, #20]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	4a22      	ldr	r2, [pc, #136]	; (8001bc8 <TIM_OC2_SetConfig+0xe4>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d003      	beq.n	8001b4c <TIM_OC2_SetConfig+0x68>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	4a21      	ldr	r2, [pc, #132]	; (8001bcc <TIM_OC2_SetConfig+0xe8>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d10d      	bne.n	8001b68 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	011b      	lsls	r3, r3, #4
 8001b5a:	697a      	ldr	r2, [r7, #20]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001b66:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	4a17      	ldr	r2, [pc, #92]	; (8001bc8 <TIM_OC2_SetConfig+0xe4>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d003      	beq.n	8001b78 <TIM_OC2_SetConfig+0x94>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	4a16      	ldr	r2, [pc, #88]	; (8001bcc <TIM_OC2_SetConfig+0xe8>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d113      	bne.n	8001ba0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001b7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001b86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	695b      	ldr	r3, [r3, #20]
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	693a      	ldr	r2, [r7, #16]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	699b      	ldr	r3, [r3, #24]
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	693a      	ldr	r2, [r7, #16]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	693a      	ldr	r2, [r7, #16]
 8001ba4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	68fa      	ldr	r2, [r7, #12]
 8001baa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685a      	ldr	r2, [r3, #4]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	697a      	ldr	r2, [r7, #20]
 8001bb8:	621a      	str	r2, [r3, #32]
}
 8001bba:	bf00      	nop
 8001bbc:	371c      	adds	r7, #28
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	40010000 	.word	0x40010000
 8001bcc:	40010400 	.word	0x40010400

08001bd0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b087      	sub	sp, #28
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6a1b      	ldr	r3, [r3, #32]
 8001bde:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6a1b      	ldr	r3, [r3, #32]
 8001bea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	69db      	ldr	r3, [r3, #28]
 8001bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	f023 0303 	bic.w	r3, r3, #3
 8001c06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	68fa      	ldr	r2, [r7, #12]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001c18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	021b      	lsls	r3, r3, #8
 8001c20:	697a      	ldr	r2, [r7, #20]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a21      	ldr	r2, [pc, #132]	; (8001cb0 <TIM_OC3_SetConfig+0xe0>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d003      	beq.n	8001c36 <TIM_OC3_SetConfig+0x66>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a20      	ldr	r2, [pc, #128]	; (8001cb4 <TIM_OC3_SetConfig+0xe4>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d10d      	bne.n	8001c52 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001c3c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	021b      	lsls	r3, r3, #8
 8001c44:	697a      	ldr	r2, [r7, #20]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001c50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a16      	ldr	r2, [pc, #88]	; (8001cb0 <TIM_OC3_SetConfig+0xe0>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d003      	beq.n	8001c62 <TIM_OC3_SetConfig+0x92>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a15      	ldr	r2, [pc, #84]	; (8001cb4 <TIM_OC3_SetConfig+0xe4>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d113      	bne.n	8001c8a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001c68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001c70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	695b      	ldr	r3, [r3, #20]
 8001c76:	011b      	lsls	r3, r3, #4
 8001c78:	693a      	ldr	r2, [r7, #16]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	699b      	ldr	r3, [r3, #24]
 8001c82:	011b      	lsls	r3, r3, #4
 8001c84:	693a      	ldr	r2, [r7, #16]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	693a      	ldr	r2, [r7, #16]
 8001c8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	68fa      	ldr	r2, [r7, #12]
 8001c94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685a      	ldr	r2, [r3, #4]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	697a      	ldr	r2, [r7, #20]
 8001ca2:	621a      	str	r2, [r3, #32]
}
 8001ca4:	bf00      	nop
 8001ca6:	371c      	adds	r7, #28
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr
 8001cb0:	40010000 	.word	0x40010000
 8001cb4:	40010400 	.word	0x40010400

08001cb8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b087      	sub	sp, #28
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6a1b      	ldr	r3, [r3, #32]
 8001cc6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6a1b      	ldr	r3, [r3, #32]
 8001cd2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	69db      	ldr	r3, [r3, #28]
 8001cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001ce6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001cee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	021b      	lsls	r3, r3, #8
 8001cf6:	68fa      	ldr	r2, [r7, #12]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001d02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	031b      	lsls	r3, r3, #12
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	4a12      	ldr	r2, [pc, #72]	; (8001d5c <TIM_OC4_SetConfig+0xa4>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d003      	beq.n	8001d20 <TIM_OC4_SetConfig+0x68>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	4a11      	ldr	r2, [pc, #68]	; (8001d60 <TIM_OC4_SetConfig+0xa8>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d109      	bne.n	8001d34 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d26:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	695b      	ldr	r3, [r3, #20]
 8001d2c:	019b      	lsls	r3, r3, #6
 8001d2e:	697a      	ldr	r2, [r7, #20]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	697a      	ldr	r2, [r7, #20]
 8001d38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	68fa      	ldr	r2, [r7, #12]
 8001d3e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685a      	ldr	r2, [r3, #4]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	693a      	ldr	r2, [r7, #16]
 8001d4c:	621a      	str	r2, [r3, #32]
}
 8001d4e:	bf00      	nop
 8001d50:	371c      	adds	r7, #28
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	40010000 	.word	0x40010000
 8001d60:	40010400 	.word	0x40010400

08001d64 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                     TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b086      	sub	sp, #24
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d7c:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	697a      	ldr	r2, [r7, #20]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	f023 0307 	bic.w	r3, r3, #7
 8001d8e:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	697a      	ldr	r2, [r7, #20]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	697a      	ldr	r2, [r7, #20]
 8001da0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	2b30      	cmp	r3, #48	; 0x30
 8001da8:	d05c      	beq.n	8001e64 <TIM_SlaveTimer_SetConfig+0x100>
 8001daa:	2b30      	cmp	r3, #48	; 0x30
 8001dac:	d806      	bhi.n	8001dbc <TIM_SlaveTimer_SetConfig+0x58>
 8001dae:	2b10      	cmp	r3, #16
 8001db0:	d058      	beq.n	8001e64 <TIM_SlaveTimer_SetConfig+0x100>
 8001db2:	2b20      	cmp	r3, #32
 8001db4:	d056      	beq.n	8001e64 <TIM_SlaveTimer_SetConfig+0x100>
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d054      	beq.n	8001e64 <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8001dba:	e054      	b.n	8001e66 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8001dbc:	2b50      	cmp	r3, #80	; 0x50
 8001dbe:	d03d      	beq.n	8001e3c <TIM_SlaveTimer_SetConfig+0xd8>
 8001dc0:	2b50      	cmp	r3, #80	; 0x50
 8001dc2:	d802      	bhi.n	8001dca <TIM_SlaveTimer_SetConfig+0x66>
 8001dc4:	2b40      	cmp	r3, #64	; 0x40
 8001dc6:	d010      	beq.n	8001dea <TIM_SlaveTimer_SetConfig+0x86>
      break;
 8001dc8:	e04d      	b.n	8001e66 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8001dca:	2b60      	cmp	r3, #96	; 0x60
 8001dcc:	d040      	beq.n	8001e50 <TIM_SlaveTimer_SetConfig+0xec>
 8001dce:	2b70      	cmp	r3, #112	; 0x70
 8001dd0:	d000      	beq.n	8001dd4 <TIM_SlaveTimer_SetConfig+0x70>
      break;
 8001dd2:	e048      	b.n	8001e66 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6818      	ldr	r0, [r3, #0]
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	68d9      	ldr	r1, [r3, #12]
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	689a      	ldr	r2, [r3, #8]
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	691b      	ldr	r3, [r3, #16]
 8001de4:	f000 f9cd 	bl	8002182 <TIM_ETR_SetConfig>
      break;
 8001de8:	e03d      	b.n	8001e66 <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2b05      	cmp	r3, #5
 8001df0:	d101      	bne.n	8001df6 <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e038      	b.n	8001e68 <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	6a1b      	ldr	r3, [r3, #32]
 8001dfc:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	6a1a      	ldr	r2, [r3, #32]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f022 0201 	bic.w	r2, r2, #1
 8001e0c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e1c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	691b      	ldr	r3, [r3, #16]
 8001e22:	011b      	lsls	r3, r3, #4
 8001e24:	68fa      	ldr	r2, [r7, #12]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	68fa      	ldr	r2, [r7, #12]
 8001e30:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	693a      	ldr	r2, [r7, #16]
 8001e38:	621a      	str	r2, [r3, #32]
      break;
 8001e3a:	e014      	b.n	8001e66 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6818      	ldr	r0, [r3, #0]
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	6899      	ldr	r1, [r3, #8]
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	691b      	ldr	r3, [r3, #16]
 8001e48:	461a      	mov	r2, r3
 8001e4a:	f000 f885 	bl	8001f58 <TIM_TI1_ConfigInputStage>
      break;
 8001e4e:	e00a      	b.n	8001e66 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6818      	ldr	r0, [r3, #0]
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	6899      	ldr	r1, [r3, #8]
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	691b      	ldr	r3, [r3, #16]
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	f000 f8e7 	bl	8002030 <TIM_TI2_ConfigInputStage>
      break;
 8001e62:	e000      	b.n	8001e66 <TIM_SlaveTimer_SetConfig+0x102>
      break;
 8001e64:	bf00      	nop
  }
  return HAL_OK;
 8001e66:	2300      	movs	r3, #0
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3718      	adds	r7, #24
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b087      	sub	sp, #28
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	60b9      	str	r1, [r7, #8]
 8001e7a:	607a      	str	r2, [r7, #4]
 8001e7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	6a1b      	ldr	r3, [r3, #32]
 8001e82:	f023 0201 	bic.w	r2, r3, #1
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	699b      	ldr	r3, [r3, #24]
 8001e8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	6a1b      	ldr	r3, [r3, #32]
 8001e94:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	4a28      	ldr	r2, [pc, #160]	; (8001f3c <TIM_TI1_SetConfig+0xcc>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d01b      	beq.n	8001ed6 <TIM_TI1_SetConfig+0x66>
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ea4:	d017      	beq.n	8001ed6 <TIM_TI1_SetConfig+0x66>
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	4a25      	ldr	r2, [pc, #148]	; (8001f40 <TIM_TI1_SetConfig+0xd0>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d013      	beq.n	8001ed6 <TIM_TI1_SetConfig+0x66>
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	4a24      	ldr	r2, [pc, #144]	; (8001f44 <TIM_TI1_SetConfig+0xd4>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d00f      	beq.n	8001ed6 <TIM_TI1_SetConfig+0x66>
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	4a23      	ldr	r2, [pc, #140]	; (8001f48 <TIM_TI1_SetConfig+0xd8>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d00b      	beq.n	8001ed6 <TIM_TI1_SetConfig+0x66>
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	4a22      	ldr	r2, [pc, #136]	; (8001f4c <TIM_TI1_SetConfig+0xdc>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d007      	beq.n	8001ed6 <TIM_TI1_SetConfig+0x66>
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	4a21      	ldr	r2, [pc, #132]	; (8001f50 <TIM_TI1_SetConfig+0xe0>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d003      	beq.n	8001ed6 <TIM_TI1_SetConfig+0x66>
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	4a20      	ldr	r2, [pc, #128]	; (8001f54 <TIM_TI1_SetConfig+0xe4>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d101      	bne.n	8001eda <TIM_TI1_SetConfig+0x6a>
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e000      	b.n	8001edc <TIM_TI1_SetConfig+0x6c>
 8001eda:	2300      	movs	r3, #0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d008      	beq.n	8001ef2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	f023 0303 	bic.w	r3, r3, #3
 8001ee6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8001ee8:	697a      	ldr	r2, [r7, #20]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	617b      	str	r3, [r7, #20]
 8001ef0:	e003      	b.n	8001efa <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	f043 0301 	orr.w	r3, r3, #1
 8001ef8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f00:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	011b      	lsls	r3, r3, #4
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	697a      	ldr	r2, [r7, #20]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	f023 030a 	bic.w	r3, r3, #10
 8001f14:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	f003 030a 	and.w	r3, r3, #10
 8001f1c:	693a      	ldr	r2, [r7, #16]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	697a      	ldr	r2, [r7, #20]
 8001f26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	621a      	str	r2, [r3, #32]
}
 8001f2e:	bf00      	nop
 8001f30:	371c      	adds	r7, #28
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	40010000 	.word	0x40010000
 8001f40:	40000400 	.word	0x40000400
 8001f44:	40000800 	.word	0x40000800
 8001f48:	40000c00 	.word	0x40000c00
 8001f4c:	40010400 	.word	0x40010400
 8001f50:	40014000 	.word	0x40014000
 8001f54:	40001800 	.word	0x40001800

08001f58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b087      	sub	sp, #28
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	60f8      	str	r0, [r7, #12]
 8001f60:	60b9      	str	r1, [r7, #8]
 8001f62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	6a1b      	ldr	r3, [r3, #32]
 8001f68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	6a1b      	ldr	r3, [r3, #32]
 8001f6e:	f023 0201 	bic.w	r2, r3, #1
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	699b      	ldr	r3, [r3, #24]
 8001f7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	011b      	lsls	r3, r3, #4
 8001f88:	693a      	ldr	r2, [r7, #16]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	f023 030a 	bic.w	r3, r3, #10
 8001f94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001f96:	697a      	ldr	r2, [r7, #20]
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	693a      	ldr	r2, [r7, #16]
 8001fa2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	697a      	ldr	r2, [r7, #20]
 8001fa8:	621a      	str	r2, [r3, #32]
}
 8001faa:	bf00      	nop
 8001fac:	371c      	adds	r7, #28
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr

08001fb6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	b087      	sub	sp, #28
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	60f8      	str	r0, [r7, #12]
 8001fbe:	60b9      	str	r1, [r7, #8]
 8001fc0:	607a      	str	r2, [r7, #4]
 8001fc2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	6a1b      	ldr	r3, [r3, #32]
 8001fc8:	f023 0210 	bic.w	r2, r3, #16
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	699b      	ldr	r3, [r3, #24]
 8001fd4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	6a1b      	ldr	r3, [r3, #32]
 8001fda:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fe2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	021b      	lsls	r3, r3, #8
 8001fe8:	697a      	ldr	r2, [r7, #20]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001ff4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	031b      	lsls	r3, r3, #12
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	697a      	ldr	r2, [r7, #20]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002008:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	011b      	lsls	r3, r3, #4
 800200e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8002012:	693a      	ldr	r2, [r7, #16]
 8002014:	4313      	orrs	r3, r2
 8002016:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	697a      	ldr	r2, [r7, #20]
 800201c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	693a      	ldr	r2, [r7, #16]
 8002022:	621a      	str	r2, [r3, #32]
}
 8002024:	bf00      	nop
 8002026:	371c      	adds	r7, #28
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002030:	b480      	push	{r7}
 8002032:	b087      	sub	sp, #28
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	6a1b      	ldr	r3, [r3, #32]
 8002040:	f023 0210 	bic.w	r2, r3, #16
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	699b      	ldr	r3, [r3, #24]
 800204c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	6a1b      	ldr	r3, [r3, #32]
 8002052:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800205a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	031b      	lsls	r3, r3, #12
 8002060:	697a      	ldr	r2, [r7, #20]
 8002062:	4313      	orrs	r3, r2
 8002064:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800206c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	011b      	lsls	r3, r3, #4
 8002072:	693a      	ldr	r2, [r7, #16]
 8002074:	4313      	orrs	r3, r2
 8002076:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	697a      	ldr	r2, [r7, #20]
 800207c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	693a      	ldr	r2, [r7, #16]
 8002082:	621a      	str	r2, [r3, #32]
}
 8002084:	bf00      	nop
 8002086:	371c      	adds	r7, #28
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002090:	b480      	push	{r7}
 8002092:	b087      	sub	sp, #28
 8002094:	af00      	add	r7, sp, #0
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	60b9      	str	r1, [r7, #8]
 800209a:	607a      	str	r2, [r7, #4]
 800209c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	6a1b      	ldr	r3, [r3, #32]
 80020a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	69db      	ldr	r3, [r3, #28]
 80020ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	6a1b      	ldr	r3, [r3, #32]
 80020b4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	f023 0303 	bic.w	r3, r3, #3
 80020bc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80020be:	697a      	ldr	r2, [r7, #20]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020cc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	011b      	lsls	r3, r3, #4
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	697a      	ldr	r2, [r7, #20]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80020e0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	021b      	lsls	r3, r3, #8
 80020e6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80020ea:	693a      	ldr	r2, [r7, #16]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	697a      	ldr	r2, [r7, #20]
 80020f4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	693a      	ldr	r2, [r7, #16]
 80020fa:	621a      	str	r2, [r3, #32]
}
 80020fc:	bf00      	nop
 80020fe:	371c      	adds	r7, #28
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002108:	b480      	push	{r7}
 800210a:	b087      	sub	sp, #28
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	607a      	str	r2, [r7, #4]
 8002114:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	6a1b      	ldr	r3, [r3, #32]
 800211a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	69db      	ldr	r3, [r3, #28]
 8002126:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6a1b      	ldr	r3, [r3, #32]
 800212c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002134:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	021b      	lsls	r3, r3, #8
 800213a:	697a      	ldr	r2, [r7, #20]
 800213c:	4313      	orrs	r3, r2
 800213e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002146:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	031b      	lsls	r3, r3, #12
 800214c:	b29b      	uxth	r3, r3
 800214e:	697a      	ldr	r2, [r7, #20]
 8002150:	4313      	orrs	r3, r2
 8002152:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800215a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	031b      	lsls	r3, r3, #12
 8002160:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8002164:	693a      	ldr	r2, [r7, #16]
 8002166:	4313      	orrs	r3, r2
 8002168:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	697a      	ldr	r2, [r7, #20]
 800216e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	693a      	ldr	r2, [r7, #16]
 8002174:	621a      	str	r2, [r3, #32]
}
 8002176:	bf00      	nop
 8002178:	371c      	adds	r7, #28
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr

08002182 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002182:	b480      	push	{r7}
 8002184:	b087      	sub	sp, #28
 8002186:	af00      	add	r7, sp, #0
 8002188:	60f8      	str	r0, [r7, #12]
 800218a:	60b9      	str	r1, [r7, #8]
 800218c:	607a      	str	r2, [r7, #4]
 800218e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800219c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	021a      	lsls	r2, r3, #8
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	431a      	orrs	r2, r3
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	697a      	ldr	r2, [r7, #20]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	697a      	ldr	r2, [r7, #20]
 80021b4:	609a      	str	r2, [r3, #8]
}
 80021b6:	bf00      	nop
 80021b8:	371c      	adds	r7, #28
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr

080021c2 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80021c2:	b480      	push	{r7}
 80021c4:	b087      	sub	sp, #28
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	60f8      	str	r0, [r7, #12]
 80021ca:	60b9      	str	r1, [r7, #8]
 80021cc:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	f003 031f 	and.w	r3, r3, #31
 80021d4:	2201      	movs	r2, #1
 80021d6:	fa02 f303 	lsl.w	r3, r2, r3
 80021da:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	6a1a      	ldr	r2, [r3, #32]
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	43db      	mvns	r3, r3
 80021e4:	401a      	ands	r2, r3
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	6a1a      	ldr	r2, [r3, #32]
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	f003 031f 	and.w	r3, r3, #31
 80021f4:	6879      	ldr	r1, [r7, #4]
 80021f6:	fa01 f303 	lsl.w	r3, r1, r3
 80021fa:	431a      	orrs	r2, r3
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	621a      	str	r2, [r3, #32]
}
 8002200:	bf00      	nop
 8002202:	371c      	adds	r7, #28
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800220c:	b480      	push	{r7}
 800220e:	b085      	sub	sp, #20
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800221c:	2b01      	cmp	r3, #1
 800221e:	d101      	bne.n	8002224 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002220:	2302      	movs	r3, #2
 8002222:	e032      	b.n	800228a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2201      	movs	r2, #1
 8002228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2202      	movs	r2, #2
 8002230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800224a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	68fa      	ldr	r2, [r7, #12]
 8002252:	4313      	orrs	r3, r2
 8002254:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800225c:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	68ba      	ldr	r2, [r7, #8]
 8002264:	4313      	orrs	r3, r2
 8002266:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	68fa      	ldr	r2, [r7, #12]
 800226e:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	68ba      	ldr	r2, [r7, #8]
 8002276:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2201      	movs	r2, #1
 800227c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002288:	2300      	movs	r3, #0
}
 800228a:	4618      	mov	r0, r3
 800228c:	3714      	adds	r7, #20
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr

08002296 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002296:	b580      	push	{r7, lr}
 8002298:	b082      	sub	sp, #8
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d101      	bne.n	80022a8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e03f      	b.n	8002328 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d106      	bne.n	80022c2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f000 fd59 	bl	8002d74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2224      	movs	r2, #36	; 0x24
 80022c6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	68da      	ldr	r2, [r3, #12]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022d8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f000 f828 	bl	8002330 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	691a      	ldr	r2, [r3, #16]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022ee:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	695a      	ldr	r2, [r3, #20]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80022fe:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	68da      	ldr	r2, [r3, #12]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800230e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2220      	movs	r2, #32
 800231a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2220      	movs	r2, #32
 8002322:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002326:	2300      	movs	r3, #0
}
 8002328:	4618      	mov	r0, r3
 800232a:	3708      	adds	r7, #8
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002330:	b5b0      	push	{r4, r5, r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	68da      	ldr	r2, [r3, #12]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	430a      	orrs	r2, r1
 800234c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	689a      	ldr	r2, [r3, #8]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	431a      	orrs	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	695b      	ldr	r3, [r3, #20]
 800235c:	431a      	orrs	r2, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	69db      	ldr	r3, [r3, #28]
 8002362:	4313      	orrs	r3, r2
 8002364:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002370:	f023 030c 	bic.w	r3, r3, #12
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	6812      	ldr	r2, [r2, #0]
 8002378:	68f9      	ldr	r1, [r7, #12]
 800237a:	430b      	orrs	r3, r1
 800237c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	695b      	ldr	r3, [r3, #20]
 8002384:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	699a      	ldr	r2, [r3, #24]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	430a      	orrs	r2, r1
 8002392:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	69db      	ldr	r3, [r3, #28]
 8002398:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800239c:	f040 80e4 	bne.w	8002568 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4aab      	ldr	r2, [pc, #684]	; (8002654 <UART_SetConfig+0x324>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d004      	beq.n	80023b4 <UART_SetConfig+0x84>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4aaa      	ldr	r2, [pc, #680]	; (8002658 <UART_SetConfig+0x328>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d16c      	bne.n	800248e <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80023b4:	f7fe ff70 	bl	8001298 <HAL_RCC_GetPCLK2Freq>
 80023b8:	4602      	mov	r2, r0
 80023ba:	4613      	mov	r3, r2
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	4413      	add	r3, r2
 80023c0:	009a      	lsls	r2, r3, #2
 80023c2:	441a      	add	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	005b      	lsls	r3, r3, #1
 80023ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ce:	4aa3      	ldr	r2, [pc, #652]	; (800265c <UART_SetConfig+0x32c>)
 80023d0:	fba2 2303 	umull	r2, r3, r2, r3
 80023d4:	095b      	lsrs	r3, r3, #5
 80023d6:	011c      	lsls	r4, r3, #4
 80023d8:	f7fe ff5e 	bl	8001298 <HAL_RCC_GetPCLK2Freq>
 80023dc:	4602      	mov	r2, r0
 80023de:	4613      	mov	r3, r2
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	4413      	add	r3, r2
 80023e4:	009a      	lsls	r2, r3, #2
 80023e6:	441a      	add	r2, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	fbb2 f5f3 	udiv	r5, r2, r3
 80023f2:	f7fe ff51 	bl	8001298 <HAL_RCC_GetPCLK2Freq>
 80023f6:	4602      	mov	r2, r0
 80023f8:	4613      	mov	r3, r2
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	4413      	add	r3, r2
 80023fe:	009a      	lsls	r2, r3, #2
 8002400:	441a      	add	r2, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	005b      	lsls	r3, r3, #1
 8002408:	fbb2 f3f3 	udiv	r3, r2, r3
 800240c:	4a93      	ldr	r2, [pc, #588]	; (800265c <UART_SetConfig+0x32c>)
 800240e:	fba2 2303 	umull	r2, r3, r2, r3
 8002412:	095b      	lsrs	r3, r3, #5
 8002414:	2264      	movs	r2, #100	; 0x64
 8002416:	fb02 f303 	mul.w	r3, r2, r3
 800241a:	1aeb      	subs	r3, r5, r3
 800241c:	00db      	lsls	r3, r3, #3
 800241e:	3332      	adds	r3, #50	; 0x32
 8002420:	4a8e      	ldr	r2, [pc, #568]	; (800265c <UART_SetConfig+0x32c>)
 8002422:	fba2 2303 	umull	r2, r3, r2, r3
 8002426:	095b      	lsrs	r3, r3, #5
 8002428:	005b      	lsls	r3, r3, #1
 800242a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800242e:	441c      	add	r4, r3
 8002430:	f7fe ff32 	bl	8001298 <HAL_RCC_GetPCLK2Freq>
 8002434:	4602      	mov	r2, r0
 8002436:	4613      	mov	r3, r2
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	4413      	add	r3, r2
 800243c:	009a      	lsls	r2, r3, #2
 800243e:	441a      	add	r2, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	fbb2 f5f3 	udiv	r5, r2, r3
 800244a:	f7fe ff25 	bl	8001298 <HAL_RCC_GetPCLK2Freq>
 800244e:	4602      	mov	r2, r0
 8002450:	4613      	mov	r3, r2
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	4413      	add	r3, r2
 8002456:	009a      	lsls	r2, r3, #2
 8002458:	441a      	add	r2, r3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	fbb2 f3f3 	udiv	r3, r2, r3
 8002464:	4a7d      	ldr	r2, [pc, #500]	; (800265c <UART_SetConfig+0x32c>)
 8002466:	fba2 2303 	umull	r2, r3, r2, r3
 800246a:	095b      	lsrs	r3, r3, #5
 800246c:	2264      	movs	r2, #100	; 0x64
 800246e:	fb02 f303 	mul.w	r3, r2, r3
 8002472:	1aeb      	subs	r3, r5, r3
 8002474:	00db      	lsls	r3, r3, #3
 8002476:	3332      	adds	r3, #50	; 0x32
 8002478:	4a78      	ldr	r2, [pc, #480]	; (800265c <UART_SetConfig+0x32c>)
 800247a:	fba2 2303 	umull	r2, r3, r2, r3
 800247e:	095b      	lsrs	r3, r3, #5
 8002480:	f003 0207 	and.w	r2, r3, #7
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4422      	add	r2, r4
 800248a:	609a      	str	r2, [r3, #8]
 800248c:	e154      	b.n	8002738 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800248e:	f7fe feef 	bl	8001270 <HAL_RCC_GetPCLK1Freq>
 8002492:	4602      	mov	r2, r0
 8002494:	4613      	mov	r3, r2
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	4413      	add	r3, r2
 800249a:	009a      	lsls	r2, r3, #2
 800249c:	441a      	add	r2, r3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	005b      	lsls	r3, r3, #1
 80024a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024a8:	4a6c      	ldr	r2, [pc, #432]	; (800265c <UART_SetConfig+0x32c>)
 80024aa:	fba2 2303 	umull	r2, r3, r2, r3
 80024ae:	095b      	lsrs	r3, r3, #5
 80024b0:	011c      	lsls	r4, r3, #4
 80024b2:	f7fe fedd 	bl	8001270 <HAL_RCC_GetPCLK1Freq>
 80024b6:	4602      	mov	r2, r0
 80024b8:	4613      	mov	r3, r2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	4413      	add	r3, r2
 80024be:	009a      	lsls	r2, r3, #2
 80024c0:	441a      	add	r2, r3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	005b      	lsls	r3, r3, #1
 80024c8:	fbb2 f5f3 	udiv	r5, r2, r3
 80024cc:	f7fe fed0 	bl	8001270 <HAL_RCC_GetPCLK1Freq>
 80024d0:	4602      	mov	r2, r0
 80024d2:	4613      	mov	r3, r2
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	4413      	add	r3, r2
 80024d8:	009a      	lsls	r2, r3, #2
 80024da:	441a      	add	r2, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	005b      	lsls	r3, r3, #1
 80024e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80024e6:	4a5d      	ldr	r2, [pc, #372]	; (800265c <UART_SetConfig+0x32c>)
 80024e8:	fba2 2303 	umull	r2, r3, r2, r3
 80024ec:	095b      	lsrs	r3, r3, #5
 80024ee:	2264      	movs	r2, #100	; 0x64
 80024f0:	fb02 f303 	mul.w	r3, r2, r3
 80024f4:	1aeb      	subs	r3, r5, r3
 80024f6:	00db      	lsls	r3, r3, #3
 80024f8:	3332      	adds	r3, #50	; 0x32
 80024fa:	4a58      	ldr	r2, [pc, #352]	; (800265c <UART_SetConfig+0x32c>)
 80024fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002500:	095b      	lsrs	r3, r3, #5
 8002502:	005b      	lsls	r3, r3, #1
 8002504:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002508:	441c      	add	r4, r3
 800250a:	f7fe feb1 	bl	8001270 <HAL_RCC_GetPCLK1Freq>
 800250e:	4602      	mov	r2, r0
 8002510:	4613      	mov	r3, r2
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	4413      	add	r3, r2
 8002516:	009a      	lsls	r2, r3, #2
 8002518:	441a      	add	r2, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	fbb2 f5f3 	udiv	r5, r2, r3
 8002524:	f7fe fea4 	bl	8001270 <HAL_RCC_GetPCLK1Freq>
 8002528:	4602      	mov	r2, r0
 800252a:	4613      	mov	r3, r2
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	4413      	add	r3, r2
 8002530:	009a      	lsls	r2, r3, #2
 8002532:	441a      	add	r2, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	005b      	lsls	r3, r3, #1
 800253a:	fbb2 f3f3 	udiv	r3, r2, r3
 800253e:	4a47      	ldr	r2, [pc, #284]	; (800265c <UART_SetConfig+0x32c>)
 8002540:	fba2 2303 	umull	r2, r3, r2, r3
 8002544:	095b      	lsrs	r3, r3, #5
 8002546:	2264      	movs	r2, #100	; 0x64
 8002548:	fb02 f303 	mul.w	r3, r2, r3
 800254c:	1aeb      	subs	r3, r5, r3
 800254e:	00db      	lsls	r3, r3, #3
 8002550:	3332      	adds	r3, #50	; 0x32
 8002552:	4a42      	ldr	r2, [pc, #264]	; (800265c <UART_SetConfig+0x32c>)
 8002554:	fba2 2303 	umull	r2, r3, r2, r3
 8002558:	095b      	lsrs	r3, r3, #5
 800255a:	f003 0207 	and.w	r2, r3, #7
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4422      	add	r2, r4
 8002564:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8002566:	e0e7      	b.n	8002738 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a39      	ldr	r2, [pc, #228]	; (8002654 <UART_SetConfig+0x324>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d004      	beq.n	800257c <UART_SetConfig+0x24c>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a38      	ldr	r2, [pc, #224]	; (8002658 <UART_SetConfig+0x328>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d171      	bne.n	8002660 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800257c:	f7fe fe8c 	bl	8001298 <HAL_RCC_GetPCLK2Freq>
 8002580:	4602      	mov	r2, r0
 8002582:	4613      	mov	r3, r2
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	4413      	add	r3, r2
 8002588:	009a      	lsls	r2, r3, #2
 800258a:	441a      	add	r2, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	fbb2 f3f3 	udiv	r3, r2, r3
 8002596:	4a31      	ldr	r2, [pc, #196]	; (800265c <UART_SetConfig+0x32c>)
 8002598:	fba2 2303 	umull	r2, r3, r2, r3
 800259c:	095b      	lsrs	r3, r3, #5
 800259e:	011c      	lsls	r4, r3, #4
 80025a0:	f7fe fe7a 	bl	8001298 <HAL_RCC_GetPCLK2Freq>
 80025a4:	4602      	mov	r2, r0
 80025a6:	4613      	mov	r3, r2
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	4413      	add	r3, r2
 80025ac:	009a      	lsls	r2, r3, #2
 80025ae:	441a      	add	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	fbb2 f5f3 	udiv	r5, r2, r3
 80025ba:	f7fe fe6d 	bl	8001298 <HAL_RCC_GetPCLK2Freq>
 80025be:	4602      	mov	r2, r0
 80025c0:	4613      	mov	r3, r2
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	4413      	add	r3, r2
 80025c6:	009a      	lsls	r2, r3, #2
 80025c8:	441a      	add	r2, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025d4:	4a21      	ldr	r2, [pc, #132]	; (800265c <UART_SetConfig+0x32c>)
 80025d6:	fba2 2303 	umull	r2, r3, r2, r3
 80025da:	095b      	lsrs	r3, r3, #5
 80025dc:	2264      	movs	r2, #100	; 0x64
 80025de:	fb02 f303 	mul.w	r3, r2, r3
 80025e2:	1aeb      	subs	r3, r5, r3
 80025e4:	011b      	lsls	r3, r3, #4
 80025e6:	3332      	adds	r3, #50	; 0x32
 80025e8:	4a1c      	ldr	r2, [pc, #112]	; (800265c <UART_SetConfig+0x32c>)
 80025ea:	fba2 2303 	umull	r2, r3, r2, r3
 80025ee:	095b      	lsrs	r3, r3, #5
 80025f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025f4:	441c      	add	r4, r3
 80025f6:	f7fe fe4f 	bl	8001298 <HAL_RCC_GetPCLK2Freq>
 80025fa:	4602      	mov	r2, r0
 80025fc:	4613      	mov	r3, r2
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	4413      	add	r3, r2
 8002602:	009a      	lsls	r2, r3, #2
 8002604:	441a      	add	r2, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	fbb2 f5f3 	udiv	r5, r2, r3
 8002610:	f7fe fe42 	bl	8001298 <HAL_RCC_GetPCLK2Freq>
 8002614:	4602      	mov	r2, r0
 8002616:	4613      	mov	r3, r2
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	4413      	add	r3, r2
 800261c:	009a      	lsls	r2, r3, #2
 800261e:	441a      	add	r2, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	fbb2 f3f3 	udiv	r3, r2, r3
 800262a:	4a0c      	ldr	r2, [pc, #48]	; (800265c <UART_SetConfig+0x32c>)
 800262c:	fba2 2303 	umull	r2, r3, r2, r3
 8002630:	095b      	lsrs	r3, r3, #5
 8002632:	2264      	movs	r2, #100	; 0x64
 8002634:	fb02 f303 	mul.w	r3, r2, r3
 8002638:	1aeb      	subs	r3, r5, r3
 800263a:	011b      	lsls	r3, r3, #4
 800263c:	3332      	adds	r3, #50	; 0x32
 800263e:	4a07      	ldr	r2, [pc, #28]	; (800265c <UART_SetConfig+0x32c>)
 8002640:	fba2 2303 	umull	r2, r3, r2, r3
 8002644:	095b      	lsrs	r3, r3, #5
 8002646:	f003 020f 	and.w	r2, r3, #15
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4422      	add	r2, r4
 8002650:	609a      	str	r2, [r3, #8]
 8002652:	e071      	b.n	8002738 <UART_SetConfig+0x408>
 8002654:	40011000 	.word	0x40011000
 8002658:	40011400 	.word	0x40011400
 800265c:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002660:	f7fe fe06 	bl	8001270 <HAL_RCC_GetPCLK1Freq>
 8002664:	4602      	mov	r2, r0
 8002666:	4613      	mov	r3, r2
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	4413      	add	r3, r2
 800266c:	009a      	lsls	r2, r3, #2
 800266e:	441a      	add	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	fbb2 f3f3 	udiv	r3, r2, r3
 800267a:	4a31      	ldr	r2, [pc, #196]	; (8002740 <UART_SetConfig+0x410>)
 800267c:	fba2 2303 	umull	r2, r3, r2, r3
 8002680:	095b      	lsrs	r3, r3, #5
 8002682:	011c      	lsls	r4, r3, #4
 8002684:	f7fe fdf4 	bl	8001270 <HAL_RCC_GetPCLK1Freq>
 8002688:	4602      	mov	r2, r0
 800268a:	4613      	mov	r3, r2
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	4413      	add	r3, r2
 8002690:	009a      	lsls	r2, r3, #2
 8002692:	441a      	add	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	fbb2 f5f3 	udiv	r5, r2, r3
 800269e:	f7fe fde7 	bl	8001270 <HAL_RCC_GetPCLK1Freq>
 80026a2:	4602      	mov	r2, r0
 80026a4:	4613      	mov	r3, r2
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	4413      	add	r3, r2
 80026aa:	009a      	lsls	r2, r3, #2
 80026ac:	441a      	add	r2, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026b8:	4a21      	ldr	r2, [pc, #132]	; (8002740 <UART_SetConfig+0x410>)
 80026ba:	fba2 2303 	umull	r2, r3, r2, r3
 80026be:	095b      	lsrs	r3, r3, #5
 80026c0:	2264      	movs	r2, #100	; 0x64
 80026c2:	fb02 f303 	mul.w	r3, r2, r3
 80026c6:	1aeb      	subs	r3, r5, r3
 80026c8:	011b      	lsls	r3, r3, #4
 80026ca:	3332      	adds	r3, #50	; 0x32
 80026cc:	4a1c      	ldr	r2, [pc, #112]	; (8002740 <UART_SetConfig+0x410>)
 80026ce:	fba2 2303 	umull	r2, r3, r2, r3
 80026d2:	095b      	lsrs	r3, r3, #5
 80026d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026d8:	441c      	add	r4, r3
 80026da:	f7fe fdc9 	bl	8001270 <HAL_RCC_GetPCLK1Freq>
 80026de:	4602      	mov	r2, r0
 80026e0:	4613      	mov	r3, r2
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	4413      	add	r3, r2
 80026e6:	009a      	lsls	r2, r3, #2
 80026e8:	441a      	add	r2, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	fbb2 f5f3 	udiv	r5, r2, r3
 80026f4:	f7fe fdbc 	bl	8001270 <HAL_RCC_GetPCLK1Freq>
 80026f8:	4602      	mov	r2, r0
 80026fa:	4613      	mov	r3, r2
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	4413      	add	r3, r2
 8002700:	009a      	lsls	r2, r3, #2
 8002702:	441a      	add	r2, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	fbb2 f3f3 	udiv	r3, r2, r3
 800270e:	4a0c      	ldr	r2, [pc, #48]	; (8002740 <UART_SetConfig+0x410>)
 8002710:	fba2 2303 	umull	r2, r3, r2, r3
 8002714:	095b      	lsrs	r3, r3, #5
 8002716:	2264      	movs	r2, #100	; 0x64
 8002718:	fb02 f303 	mul.w	r3, r2, r3
 800271c:	1aeb      	subs	r3, r5, r3
 800271e:	011b      	lsls	r3, r3, #4
 8002720:	3332      	adds	r3, #50	; 0x32
 8002722:	4a07      	ldr	r2, [pc, #28]	; (8002740 <UART_SetConfig+0x410>)
 8002724:	fba2 2303 	umull	r2, r3, r2, r3
 8002728:	095b      	lsrs	r3, r3, #5
 800272a:	f003 020f 	and.w	r2, r3, #15
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4422      	add	r2, r4
 8002734:	609a      	str	r2, [r3, #8]
}
 8002736:	e7ff      	b.n	8002738 <UART_SetConfig+0x408>
 8002738:	bf00      	nop
 800273a:	3710      	adds	r7, #16
 800273c:	46bd      	mov	sp, r7
 800273e:	bdb0      	pop	{r4, r5, r7, pc}
 8002740:	51eb851f 	.word	0x51eb851f

08002744 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002744:	b480      	push	{r7}
 8002746:	b085      	sub	sp, #20
 8002748:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800274a:	2300      	movs	r3, #0
 800274c:	60fb      	str	r3, [r7, #12]
 800274e:	4b1e      	ldr	r3, [pc, #120]	; (80027c8 <MX_GPIO_Init+0x84>)
 8002750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002752:	4a1d      	ldr	r2, [pc, #116]	; (80027c8 <MX_GPIO_Init+0x84>)
 8002754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002758:	6313      	str	r3, [r2, #48]	; 0x30
 800275a:	4b1b      	ldr	r3, [pc, #108]	; (80027c8 <MX_GPIO_Init+0x84>)
 800275c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002762:	60fb      	str	r3, [r7, #12]
 8002764:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002766:	2300      	movs	r3, #0
 8002768:	60bb      	str	r3, [r7, #8]
 800276a:	4b17      	ldr	r3, [pc, #92]	; (80027c8 <MX_GPIO_Init+0x84>)
 800276c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276e:	4a16      	ldr	r2, [pc, #88]	; (80027c8 <MX_GPIO_Init+0x84>)
 8002770:	f043 0301 	orr.w	r3, r3, #1
 8002774:	6313      	str	r3, [r2, #48]	; 0x30
 8002776:	4b14      	ldr	r3, [pc, #80]	; (80027c8 <MX_GPIO_Init+0x84>)
 8002778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	60bb      	str	r3, [r7, #8]
 8002780:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002782:	2300      	movs	r3, #0
 8002784:	607b      	str	r3, [r7, #4]
 8002786:	4b10      	ldr	r3, [pc, #64]	; (80027c8 <MX_GPIO_Init+0x84>)
 8002788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278a:	4a0f      	ldr	r2, [pc, #60]	; (80027c8 <MX_GPIO_Init+0x84>)
 800278c:	f043 0304 	orr.w	r3, r3, #4
 8002790:	6313      	str	r3, [r2, #48]	; 0x30
 8002792:	4b0d      	ldr	r3, [pc, #52]	; (80027c8 <MX_GPIO_Init+0x84>)
 8002794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002796:	f003 0304 	and.w	r3, r3, #4
 800279a:	607b      	str	r3, [r7, #4]
 800279c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800279e:	2300      	movs	r3, #0
 80027a0:	603b      	str	r3, [r7, #0]
 80027a2:	4b09      	ldr	r3, [pc, #36]	; (80027c8 <MX_GPIO_Init+0x84>)
 80027a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a6:	4a08      	ldr	r2, [pc, #32]	; (80027c8 <MX_GPIO_Init+0x84>)
 80027a8:	f043 0302 	orr.w	r3, r3, #2
 80027ac:	6313      	str	r3, [r2, #48]	; 0x30
 80027ae:	4b06      	ldr	r3, [pc, #24]	; (80027c8 <MX_GPIO_Init+0x84>)
 80027b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b2:	f003 0302 	and.w	r3, r3, #2
 80027b6:	603b      	str	r3, [r7, #0]
 80027b8:	683b      	ldr	r3, [r7, #0]

}
 80027ba:	bf00      	nop
 80027bc:	3714      	adds	r7, #20
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	40023800 	.word	0x40023800

080027cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80027d0:	f7fd fe7a 	bl	80004c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80027d4:	f000 f846 	bl	8002864 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80027d8:	f7ff ffb4 	bl	8002744 <MX_GPIO_Init>
  MX_TIM8_Init();
 80027dc:	f000 f940 	bl	8002a60 <MX_TIM8_Init>
  MX_TIM11_Init();
 80027e0:	f000 f9b8 	bl	8002b54 <MX_TIM11_Init>
  MX_USART2_UART_Init();
 80027e4:	f000 fa9c 	bl	8002d20 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim11);
 80027e8:	4817      	ldr	r0, [pc, #92]	; (8002848 <main+0x7c>)
 80027ea:	f7fe fd94 	bl	8001316 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 80027ee:	2100      	movs	r1, #0
 80027f0:	4815      	ldr	r0, [pc, #84]	; (8002848 <main+0x7c>)
 80027f2:	f7fe fde9 	bl	80013c8 <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start(&htim8, TIM_CHANNEL_2);
 80027f6:	2104      	movs	r1, #4
 80027f8:	4814      	ldr	r0, [pc, #80]	; (800284c <main+0x80>)
 80027fa:	f7fe fe58 	bl	80014ae <HAL_TIM_IC_Start>
  TIM11->CCR1 = 3;
 80027fe:	4b14      	ldr	r3, [pc, #80]	; (8002850 <main+0x84>)
 8002800:	2203      	movs	r2, #3
 8002802:	635a      	str	r2, [r3, #52]	; 0x34

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 if(HAL_GetTick() - delay >= 50)
 8002804:	f7fd fec6 	bl	8000594 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	4b12      	ldr	r3, [pc, #72]	; (8002854 <main+0x88>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	2b31      	cmp	r3, #49	; 0x31
 8002812:	d9f7      	bls.n	8002804 <main+0x38>
	  	{
	  		delay = HAL_GetTick();
 8002814:	f7fd febe 	bl	8000594 <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	4b0e      	ldr	r3, [pc, #56]	; (8002854 <main+0x88>)
 800281c:	601a      	str	r2, [r3, #0]
	  		echo = HAL_TIM_ReadCapturedValue(&htim8, TIM_CHANNEL_2);
 800281e:	2104      	movs	r1, #4
 8002820:	480a      	ldr	r0, [pc, #40]	; (800284c <main+0x80>)
 8002822:	f7ff f80b 	bl	800183c <HAL_TIM_ReadCapturedValue>
 8002826:	4602      	mov	r2, r0
 8002828:	4b0b      	ldr	r3, [pc, #44]	; (8002858 <main+0x8c>)
 800282a:	601a      	str	r2, [r3, #0]
	  		distance = echo / 58.0f;
 800282c:	4b0a      	ldr	r3, [pc, #40]	; (8002858 <main+0x8c>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	ee07 3a90 	vmov	s15, r3
 8002834:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002838:	eddf 6a08 	vldr	s13, [pc, #32]	; 800285c <main+0x90>
 800283c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002840:	4b07      	ldr	r3, [pc, #28]	; (8002860 <main+0x94>)
 8002842:	edc3 7a00 	vstr	s15, [r3]
	 if(HAL_GetTick() - delay >= 50)
 8002846:	e7dd      	b.n	8002804 <main+0x38>
 8002848:	20000078 	.word	0x20000078
 800284c:	20000038 	.word	0x20000038
 8002850:	40014800 	.word	0x40014800
 8002854:	20000034 	.word	0x20000034
 8002858:	20000030 	.word	0x20000030
 800285c:	42680000 	.word	0x42680000
 8002860:	2000002c 	.word	0x2000002c

08002864 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b094      	sub	sp, #80	; 0x50
 8002868:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800286a:	f107 0320 	add.w	r3, r7, #32
 800286e:	2230      	movs	r2, #48	; 0x30
 8002870:	2100      	movs	r1, #0
 8002872:	4618      	mov	r0, r3
 8002874:	f000 fb14 	bl	8002ea0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002878:	f107 030c 	add.w	r3, r7, #12
 800287c:	2200      	movs	r2, #0
 800287e:	601a      	str	r2, [r3, #0]
 8002880:	605a      	str	r2, [r3, #4]
 8002882:	609a      	str	r2, [r3, #8]
 8002884:	60da      	str	r2, [r3, #12]
 8002886:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002888:	2300      	movs	r3, #0
 800288a:	60bb      	str	r3, [r7, #8]
 800288c:	4b28      	ldr	r3, [pc, #160]	; (8002930 <SystemClock_Config+0xcc>)
 800288e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002890:	4a27      	ldr	r2, [pc, #156]	; (8002930 <SystemClock_Config+0xcc>)
 8002892:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002896:	6413      	str	r3, [r2, #64]	; 0x40
 8002898:	4b25      	ldr	r3, [pc, #148]	; (8002930 <SystemClock_Config+0xcc>)
 800289a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028a0:	60bb      	str	r3, [r7, #8]
 80028a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80028a4:	2300      	movs	r3, #0
 80028a6:	607b      	str	r3, [r7, #4]
 80028a8:	4b22      	ldr	r3, [pc, #136]	; (8002934 <SystemClock_Config+0xd0>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a21      	ldr	r2, [pc, #132]	; (8002934 <SystemClock_Config+0xd0>)
 80028ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028b2:	6013      	str	r3, [r2, #0]
 80028b4:	4b1f      	ldr	r3, [pc, #124]	; (8002934 <SystemClock_Config+0xd0>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028bc:	607b      	str	r3, [r7, #4]
 80028be:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80028c0:	2302      	movs	r3, #2
 80028c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80028c4:	2301      	movs	r3, #1
 80028c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80028c8:	2310      	movs	r3, #16
 80028ca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80028cc:	2302      	movs	r3, #2
 80028ce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80028d0:	2300      	movs	r3, #0
 80028d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80028d4:	2308      	movs	r3, #8
 80028d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 80028d8:	23a0      	movs	r3, #160	; 0xa0
 80028da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80028dc:	2302      	movs	r3, #2
 80028de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80028e0:	2304      	movs	r3, #4
 80028e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028e4:	f107 0320 	add.w	r3, r7, #32
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7fe f8df 	bl	8000aac <HAL_RCC_OscConfig>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d001      	beq.n	80028f8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80028f4:	f000 f820 	bl	8002938 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028f8:	230f      	movs	r3, #15
 80028fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028fc:	2302      	movs	r3, #2
 80028fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002900:	2300      	movs	r3, #0
 8002902:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002904:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002908:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800290a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800290e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002910:	f107 030c 	add.w	r3, r7, #12
 8002914:	2105      	movs	r1, #5
 8002916:	4618      	mov	r0, r3
 8002918:	f7fe fb0a 	bl	8000f30 <HAL_RCC_ClockConfig>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002922:	f000 f809 	bl	8002938 <Error_Handler>
  }
}
 8002926:	bf00      	nop
 8002928:	3750      	adds	r7, #80	; 0x50
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	40023800 	.word	0x40023800
 8002934:	40007000 	.word	0x40007000

08002938 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800293c:	bf00      	nop
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
	...

08002948 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800294e:	2300      	movs	r3, #0
 8002950:	607b      	str	r3, [r7, #4]
 8002952:	4b10      	ldr	r3, [pc, #64]	; (8002994 <HAL_MspInit+0x4c>)
 8002954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002956:	4a0f      	ldr	r2, [pc, #60]	; (8002994 <HAL_MspInit+0x4c>)
 8002958:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800295c:	6453      	str	r3, [r2, #68]	; 0x44
 800295e:	4b0d      	ldr	r3, [pc, #52]	; (8002994 <HAL_MspInit+0x4c>)
 8002960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002962:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002966:	607b      	str	r3, [r7, #4]
 8002968:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800296a:	2300      	movs	r3, #0
 800296c:	603b      	str	r3, [r7, #0]
 800296e:	4b09      	ldr	r3, [pc, #36]	; (8002994 <HAL_MspInit+0x4c>)
 8002970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002972:	4a08      	ldr	r2, [pc, #32]	; (8002994 <HAL_MspInit+0x4c>)
 8002974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002978:	6413      	str	r3, [r2, #64]	; 0x40
 800297a:	4b06      	ldr	r3, [pc, #24]	; (8002994 <HAL_MspInit+0x4c>)
 800297c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002982:	603b      	str	r3, [r7, #0]
 8002984:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002986:	bf00      	nop
 8002988:	370c      	adds	r7, #12
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	40023800 	.word	0x40023800

08002998 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800299c:	bf00      	nop
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr

080029a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029a6:	b480      	push	{r7}
 80029a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029aa:	e7fe      	b.n	80029aa <HardFault_Handler+0x4>

080029ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029b0:	e7fe      	b.n	80029b0 <MemManage_Handler+0x4>

080029b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029b2:	b480      	push	{r7}
 80029b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029b6:	e7fe      	b.n	80029b6 <BusFault_Handler+0x4>

080029b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029bc:	e7fe      	b.n	80029bc <UsageFault_Handler+0x4>

080029be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029be:	b480      	push	{r7}
 80029c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029c2:	bf00      	nop
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr

080029cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029cc:	b480      	push	{r7}
 80029ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029d0:	bf00      	nop
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr

080029da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029da:	b480      	push	{r7}
 80029dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029de:	bf00      	nop
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029ec:	f7fd fdbe 	bl	800056c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029f0:	bf00      	nop
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029f4:	b480      	push	{r7}
 80029f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029f8:	4b16      	ldr	r3, [pc, #88]	; (8002a54 <SystemInit+0x60>)
 80029fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029fe:	4a15      	ldr	r2, [pc, #84]	; (8002a54 <SystemInit+0x60>)
 8002a00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002a08:	4b13      	ldr	r3, [pc, #76]	; (8002a58 <SystemInit+0x64>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a12      	ldr	r2, [pc, #72]	; (8002a58 <SystemInit+0x64>)
 8002a0e:	f043 0301 	orr.w	r3, r3, #1
 8002a12:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002a14:	4b10      	ldr	r3, [pc, #64]	; (8002a58 <SystemInit+0x64>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002a1a:	4b0f      	ldr	r3, [pc, #60]	; (8002a58 <SystemInit+0x64>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a0e      	ldr	r2, [pc, #56]	; (8002a58 <SystemInit+0x64>)
 8002a20:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002a24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a28:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002a2a:	4b0b      	ldr	r3, [pc, #44]	; (8002a58 <SystemInit+0x64>)
 8002a2c:	4a0b      	ldr	r2, [pc, #44]	; (8002a5c <SystemInit+0x68>)
 8002a2e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002a30:	4b09      	ldr	r3, [pc, #36]	; (8002a58 <SystemInit+0x64>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a08      	ldr	r2, [pc, #32]	; (8002a58 <SystemInit+0x64>)
 8002a36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a3a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002a3c:	4b06      	ldr	r3, [pc, #24]	; (8002a58 <SystemInit+0x64>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002a42:	4b04      	ldr	r3, [pc, #16]	; (8002a54 <SystemInit+0x60>)
 8002a44:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002a48:	609a      	str	r2, [r3, #8]
#endif
}
 8002a4a:	bf00      	nop
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr
 8002a54:	e000ed00 	.word	0xe000ed00
 8002a58:	40023800 	.word	0x40023800
 8002a5c:	24003010 	.word	0x24003010

08002a60 <MX_TIM8_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim11;

/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b08c      	sub	sp, #48	; 0x30
 8002a64:	af00      	add	r7, sp, #0
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002a66:	f107 031c 	add.w	r3, r7, #28
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	601a      	str	r2, [r3, #0]
 8002a6e:	605a      	str	r2, [r3, #4]
 8002a70:	609a      	str	r2, [r3, #8]
 8002a72:	60da      	str	r2, [r3, #12]
 8002a74:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a76:	f107 0314 	add.w	r3, r7, #20
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	601a      	str	r2, [r3, #0]
 8002a7e:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002a80:	1d3b      	adds	r3, r7, #4
 8002a82:	2200      	movs	r2, #0
 8002a84:	601a      	str	r2, [r3, #0]
 8002a86:	605a      	str	r2, [r3, #4]
 8002a88:	609a      	str	r2, [r3, #8]
 8002a8a:	60da      	str	r2, [r3, #12]

  htim8.Instance = TIM8;
 8002a8c:	4b2f      	ldr	r3, [pc, #188]	; (8002b4c <MX_TIM8_Init+0xec>)
 8002a8e:	4a30      	ldr	r2, [pc, #192]	; (8002b50 <MX_TIM8_Init+0xf0>)
 8002a90:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 79;
 8002a92:	4b2e      	ldr	r3, [pc, #184]	; (8002b4c <MX_TIM8_Init+0xec>)
 8002a94:	224f      	movs	r2, #79	; 0x4f
 8002a96:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a98:	4b2c      	ldr	r3, [pc, #176]	; (8002b4c <MX_TIM8_Init+0xec>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002a9e:	4b2b      	ldr	r3, [pc, #172]	; (8002b4c <MX_TIM8_Init+0xec>)
 8002aa0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002aa4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002aa6:	4b29      	ldr	r3, [pc, #164]	; (8002b4c <MX_TIM8_Init+0xec>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002aac:	4b27      	ldr	r3, [pc, #156]	; (8002b4c <MX_TIM8_Init+0xec>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ab2:	4b26      	ldr	r3, [pc, #152]	; (8002b4c <MX_TIM8_Init+0xec>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002ab8:	4824      	ldr	r0, [pc, #144]	; (8002b4c <MX_TIM8_Init+0xec>)
 8002aba:	f7fe fc01 	bl	80012c0 <HAL_TIM_Base_Init>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d001      	beq.n	8002ac8 <MX_TIM8_Init+0x68>
  {
    Error_Handler();
 8002ac4:	f7ff ff38 	bl	8002938 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 8002ac8:	4820      	ldr	r0, [pc, #128]	; (8002b4c <MX_TIM8_Init+0xec>)
 8002aca:	f7fe fcbb 	bl	8001444 <HAL_TIM_IC_Init>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d001      	beq.n	8002ad8 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8002ad4:	f7ff ff30 	bl	8002938 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8002ad8:	2304      	movs	r3, #4
 8002ada:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8002adc:	2360      	movs	r3, #96	; 0x60
 8002ade:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8002ae0:	230a      	movs	r3, #10
 8002ae2:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 8002ae8:	f107 031c 	add.w	r3, r7, #28
 8002aec:	4619      	mov	r1, r3
 8002aee:	4817      	ldr	r0, [pc, #92]	; (8002b4c <MX_TIM8_Init+0xec>)
 8002af0:	f7fe fe62 	bl	80017b8 <HAL_TIM_SlaveConfigSynchro>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d001      	beq.n	8002afe <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8002afa:	f7ff ff1d 	bl	8002938 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002afe:	2300      	movs	r3, #0
 8002b00:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b02:	2300      	movs	r3, #0
 8002b04:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002b06:	f107 0314 	add.w	r3, r7, #20
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	480f      	ldr	r0, [pc, #60]	; (8002b4c <MX_TIM8_Init+0xec>)
 8002b0e:	f7ff fb7d 	bl	800220c <HAL_TIMEx_MasterConfigSynchronization>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d001      	beq.n	8002b1c <MX_TIM8_Init+0xbc>
  {
    Error_Handler();
 8002b18:	f7ff ff0e 	bl	8002938 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8002b1c:	230a      	movs	r3, #10
 8002b1e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002b20:	2301      	movs	r3, #1
 8002b22:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002b24:	2300      	movs	r3, #0
 8002b26:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002b2c:	1d3b      	adds	r3, r7, #4
 8002b2e:	2204      	movs	r2, #4
 8002b30:	4619      	mov	r1, r3
 8002b32:	4806      	ldr	r0, [pc, #24]	; (8002b4c <MX_TIM8_Init+0xec>)
 8002b34:	f7fe fcdd 	bl	80014f2 <HAL_TIM_IC_ConfigChannel>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d001      	beq.n	8002b42 <MX_TIM8_Init+0xe2>
  {
    Error_Handler();
 8002b3e:	f7ff fefb 	bl	8002938 <Error_Handler>
  }

}
 8002b42:	bf00      	nop
 8002b44:	3730      	adds	r7, #48	; 0x30
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	20000038 	.word	0x20000038
 8002b50:	40010400 	.word	0x40010400

08002b54 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b088      	sub	sp, #32
 8002b58:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b5a:	1d3b      	adds	r3, r7, #4
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	601a      	str	r2, [r3, #0]
 8002b60:	605a      	str	r2, [r3, #4]
 8002b62:	609a      	str	r2, [r3, #8]
 8002b64:	60da      	str	r2, [r3, #12]
 8002b66:	611a      	str	r2, [r3, #16]
 8002b68:	615a      	str	r2, [r3, #20]
 8002b6a:	619a      	str	r2, [r3, #24]

  htim11.Instance = TIM11;
 8002b6c:	4b1e      	ldr	r3, [pc, #120]	; (8002be8 <MX_TIM11_Init+0x94>)
 8002b6e:	4a1f      	ldr	r2, [pc, #124]	; (8002bec <MX_TIM11_Init+0x98>)
 8002b70:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 199;
 8002b72:	4b1d      	ldr	r3, [pc, #116]	; (8002be8 <MX_TIM11_Init+0x94>)
 8002b74:	22c7      	movs	r2, #199	; 0xc7
 8002b76:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b78:	4b1b      	ldr	r3, [pc, #108]	; (8002be8 <MX_TIM11_Init+0x94>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 39999;
 8002b7e:	4b1a      	ldr	r3, [pc, #104]	; (8002be8 <MX_TIM11_Init+0x94>)
 8002b80:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8002b84:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b86:	4b18      	ldr	r3, [pc, #96]	; (8002be8 <MX_TIM11_Init+0x94>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b8c:	4b16      	ldr	r3, [pc, #88]	; (8002be8 <MX_TIM11_Init+0x94>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002b92:	4815      	ldr	r0, [pc, #84]	; (8002be8 <MX_TIM11_Init+0x94>)
 8002b94:	f7fe fb94 	bl	80012c0 <HAL_TIM_Base_Init>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d001      	beq.n	8002ba2 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8002b9e:	f7ff fecb 	bl	8002938 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8002ba2:	4811      	ldr	r0, [pc, #68]	; (8002be8 <MX_TIM11_Init+0x94>)
 8002ba4:	f7fe fbdb 	bl	800135e <HAL_TIM_PWM_Init>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8002bae:	f7ff fec3 	bl	8002938 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002bb2:	2360      	movs	r3, #96	; 0x60
 8002bb4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002bc2:	1d3b      	adds	r3, r7, #4
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	4807      	ldr	r0, [pc, #28]	; (8002be8 <MX_TIM11_Init+0x94>)
 8002bca:	f7fe fd2f 	bl	800162c <HAL_TIM_PWM_ConfigChannel>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d001      	beq.n	8002bd8 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8002bd4:	f7ff feb0 	bl	8002938 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim11);
 8002bd8:	4803      	ldr	r0, [pc, #12]	; (8002be8 <MX_TIM11_Init+0x94>)
 8002bda:	f000 f867 	bl	8002cac <HAL_TIM_MspPostInit>

}
 8002bde:	bf00      	nop
 8002be0:	3720      	adds	r7, #32
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	20000078 	.word	0x20000078
 8002bec:	40014800 	.word	0x40014800

08002bf0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b08a      	sub	sp, #40	; 0x28
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bf8:	f107 0314 	add.w	r3, r7, #20
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	601a      	str	r2, [r3, #0]
 8002c00:	605a      	str	r2, [r3, #4]
 8002c02:	609a      	str	r2, [r3, #8]
 8002c04:	60da      	str	r2, [r3, #12]
 8002c06:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM8)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a23      	ldr	r2, [pc, #140]	; (8002c9c <HAL_TIM_Base_MspInit+0xac>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d12c      	bne.n	8002c6c <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002c12:	2300      	movs	r3, #0
 8002c14:	613b      	str	r3, [r7, #16]
 8002c16:	4b22      	ldr	r3, [pc, #136]	; (8002ca0 <HAL_TIM_Base_MspInit+0xb0>)
 8002c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c1a:	4a21      	ldr	r2, [pc, #132]	; (8002ca0 <HAL_TIM_Base_MspInit+0xb0>)
 8002c1c:	f043 0302 	orr.w	r3, r3, #2
 8002c20:	6453      	str	r3, [r2, #68]	; 0x44
 8002c22:	4b1f      	ldr	r3, [pc, #124]	; (8002ca0 <HAL_TIM_Base_MspInit+0xb0>)
 8002c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	613b      	str	r3, [r7, #16]
 8002c2c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c2e:	2300      	movs	r3, #0
 8002c30:	60fb      	str	r3, [r7, #12]
 8002c32:	4b1b      	ldr	r3, [pc, #108]	; (8002ca0 <HAL_TIM_Base_MspInit+0xb0>)
 8002c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c36:	4a1a      	ldr	r2, [pc, #104]	; (8002ca0 <HAL_TIM_Base_MspInit+0xb0>)
 8002c38:	f043 0304 	orr.w	r3, r3, #4
 8002c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c3e:	4b18      	ldr	r3, [pc, #96]	; (8002ca0 <HAL_TIM_Base_MspInit+0xb0>)
 8002c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c42:	f003 0304 	and.w	r3, r3, #4
 8002c46:	60fb      	str	r3, [r7, #12]
 8002c48:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration    
    PC7     ------> TIM8_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002c4a:	2380      	movs	r3, #128	; 0x80
 8002c4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c4e:	2302      	movs	r3, #2
 8002c50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c52:	2300      	movs	r3, #0
 8002c54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c56:	2300      	movs	r3, #0
 8002c58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c5e:	f107 0314 	add.w	r3, r7, #20
 8002c62:	4619      	mov	r1, r3
 8002c64:	480f      	ldr	r0, [pc, #60]	; (8002ca4 <HAL_TIM_Base_MspInit+0xb4>)
 8002c66:	f7fd fd87 	bl	8000778 <HAL_GPIO_Init>
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8002c6a:	e012      	b.n	8002c92 <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM11)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a0d      	ldr	r2, [pc, #52]	; (8002ca8 <HAL_TIM_Base_MspInit+0xb8>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d10d      	bne.n	8002c92 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002c76:	2300      	movs	r3, #0
 8002c78:	60bb      	str	r3, [r7, #8]
 8002c7a:	4b09      	ldr	r3, [pc, #36]	; (8002ca0 <HAL_TIM_Base_MspInit+0xb0>)
 8002c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c7e:	4a08      	ldr	r2, [pc, #32]	; (8002ca0 <HAL_TIM_Base_MspInit+0xb0>)
 8002c80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c84:	6453      	str	r3, [r2, #68]	; 0x44
 8002c86:	4b06      	ldr	r3, [pc, #24]	; (8002ca0 <HAL_TIM_Base_MspInit+0xb0>)
 8002c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c8e:	60bb      	str	r3, [r7, #8]
 8002c90:	68bb      	ldr	r3, [r7, #8]
}
 8002c92:	bf00      	nop
 8002c94:	3728      	adds	r7, #40	; 0x28
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	40010400 	.word	0x40010400
 8002ca0:	40023800 	.word	0x40023800
 8002ca4:	40020800 	.word	0x40020800
 8002ca8:	40014800 	.word	0x40014800

08002cac <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b088      	sub	sp, #32
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cb4:	f107 030c 	add.w	r3, r7, #12
 8002cb8:	2200      	movs	r2, #0
 8002cba:	601a      	str	r2, [r3, #0]
 8002cbc:	605a      	str	r2, [r3, #4]
 8002cbe:	609a      	str	r2, [r3, #8]
 8002cc0:	60da      	str	r2, [r3, #12]
 8002cc2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM11)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a12      	ldr	r2, [pc, #72]	; (8002d14 <HAL_TIM_MspPostInit+0x68>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d11e      	bne.n	8002d0c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM11_MspPostInit 0 */

  /* USER CODE END TIM11_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cce:	2300      	movs	r3, #0
 8002cd0:	60bb      	str	r3, [r7, #8]
 8002cd2:	4b11      	ldr	r3, [pc, #68]	; (8002d18 <HAL_TIM_MspPostInit+0x6c>)
 8002cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd6:	4a10      	ldr	r2, [pc, #64]	; (8002d18 <HAL_TIM_MspPostInit+0x6c>)
 8002cd8:	f043 0302 	orr.w	r3, r3, #2
 8002cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8002cde:	4b0e      	ldr	r3, [pc, #56]	; (8002d18 <HAL_TIM_MspPostInit+0x6c>)
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce2:	f003 0302 	and.w	r3, r3, #2
 8002ce6:	60bb      	str	r3, [r7, #8]
 8002ce8:	68bb      	ldr	r3, [r7, #8]
    /**TIM11 GPIO Configuration    
    PB9     ------> TIM11_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002cea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002cee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cf0:	2302      	movs	r3, #2
 8002cf2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d00:	f107 030c 	add.w	r3, r7, #12
 8002d04:	4619      	mov	r1, r3
 8002d06:	4805      	ldr	r0, [pc, #20]	; (8002d1c <HAL_TIM_MspPostInit+0x70>)
 8002d08:	f7fd fd36 	bl	8000778 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8002d0c:	bf00      	nop
 8002d0e:	3720      	adds	r7, #32
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	40014800 	.word	0x40014800
 8002d18:	40023800 	.word	0x40023800
 8002d1c:	40020400 	.word	0x40020400

08002d20 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8002d24:	4b11      	ldr	r3, [pc, #68]	; (8002d6c <MX_USART2_UART_Init+0x4c>)
 8002d26:	4a12      	ldr	r2, [pc, #72]	; (8002d70 <MX_USART2_UART_Init+0x50>)
 8002d28:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002d2a:	4b10      	ldr	r3, [pc, #64]	; (8002d6c <MX_USART2_UART_Init+0x4c>)
 8002d2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002d30:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002d32:	4b0e      	ldr	r3, [pc, #56]	; (8002d6c <MX_USART2_UART_Init+0x4c>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002d38:	4b0c      	ldr	r3, [pc, #48]	; (8002d6c <MX_USART2_UART_Init+0x4c>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002d3e:	4b0b      	ldr	r3, [pc, #44]	; (8002d6c <MX_USART2_UART_Init+0x4c>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002d44:	4b09      	ldr	r3, [pc, #36]	; (8002d6c <MX_USART2_UART_Init+0x4c>)
 8002d46:	220c      	movs	r2, #12
 8002d48:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d4a:	4b08      	ldr	r3, [pc, #32]	; (8002d6c <MX_USART2_UART_Init+0x4c>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d50:	4b06      	ldr	r3, [pc, #24]	; (8002d6c <MX_USART2_UART_Init+0x4c>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002d56:	4805      	ldr	r0, [pc, #20]	; (8002d6c <MX_USART2_UART_Init+0x4c>)
 8002d58:	f7ff fa9d 	bl	8002296 <HAL_UART_Init>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d001      	beq.n	8002d66 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002d62:	f7ff fde9 	bl	8002938 <Error_Handler>
  }

}
 8002d66:	bf00      	nop
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	200000b8 	.word	0x200000b8
 8002d70:	40004400 	.word	0x40004400

08002d74 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b08a      	sub	sp, #40	; 0x28
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d7c:	f107 0314 	add.w	r3, r7, #20
 8002d80:	2200      	movs	r2, #0
 8002d82:	601a      	str	r2, [r3, #0]
 8002d84:	605a      	str	r2, [r3, #4]
 8002d86:	609a      	str	r2, [r3, #8]
 8002d88:	60da      	str	r2, [r3, #12]
 8002d8a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a19      	ldr	r2, [pc, #100]	; (8002df8 <HAL_UART_MspInit+0x84>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d12b      	bne.n	8002dee <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d96:	2300      	movs	r3, #0
 8002d98:	613b      	str	r3, [r7, #16]
 8002d9a:	4b18      	ldr	r3, [pc, #96]	; (8002dfc <HAL_UART_MspInit+0x88>)
 8002d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9e:	4a17      	ldr	r2, [pc, #92]	; (8002dfc <HAL_UART_MspInit+0x88>)
 8002da0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002da4:	6413      	str	r3, [r2, #64]	; 0x40
 8002da6:	4b15      	ldr	r3, [pc, #84]	; (8002dfc <HAL_UART_MspInit+0x88>)
 8002da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dae:	613b      	str	r3, [r7, #16]
 8002db0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002db2:	2300      	movs	r3, #0
 8002db4:	60fb      	str	r3, [r7, #12]
 8002db6:	4b11      	ldr	r3, [pc, #68]	; (8002dfc <HAL_UART_MspInit+0x88>)
 8002db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dba:	4a10      	ldr	r2, [pc, #64]	; (8002dfc <HAL_UART_MspInit+0x88>)
 8002dbc:	f043 0301 	orr.w	r3, r3, #1
 8002dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8002dc2:	4b0e      	ldr	r3, [pc, #56]	; (8002dfc <HAL_UART_MspInit+0x88>)
 8002dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc6:	f003 0301 	and.w	r3, r3, #1
 8002dca:	60fb      	str	r3, [r7, #12]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002dce:	230c      	movs	r3, #12
 8002dd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dd2:	2302      	movs	r3, #2
 8002dd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002dde:	2307      	movs	r3, #7
 8002de0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002de2:	f107 0314 	add.w	r3, r7, #20
 8002de6:	4619      	mov	r1, r3
 8002de8:	4805      	ldr	r0, [pc, #20]	; (8002e00 <HAL_UART_MspInit+0x8c>)
 8002dea:	f7fd fcc5 	bl	8000778 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002dee:	bf00      	nop
 8002df0:	3728      	adds	r7, #40	; 0x28
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	40004400 	.word	0x40004400
 8002dfc:	40023800 	.word	0x40023800
 8002e00:	40020000 	.word	0x40020000

08002e04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002e04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e3c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002e08:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002e0a:	e003      	b.n	8002e14 <LoopCopyDataInit>

08002e0c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002e0c:	4b0c      	ldr	r3, [pc, #48]	; (8002e40 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002e0e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002e10:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002e12:	3104      	adds	r1, #4

08002e14 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002e14:	480b      	ldr	r0, [pc, #44]	; (8002e44 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002e16:	4b0c      	ldr	r3, [pc, #48]	; (8002e48 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002e18:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002e1a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002e1c:	d3f6      	bcc.n	8002e0c <CopyDataInit>
  ldr  r2, =_sbss
 8002e1e:	4a0b      	ldr	r2, [pc, #44]	; (8002e4c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002e20:	e002      	b.n	8002e28 <LoopFillZerobss>

08002e22 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002e22:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002e24:	f842 3b04 	str.w	r3, [r2], #4

08002e28 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002e28:	4b09      	ldr	r3, [pc, #36]	; (8002e50 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002e2a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002e2c:	d3f9      	bcc.n	8002e22 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002e2e:	f7ff fde1 	bl	80029f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e32:	f000 f811 	bl	8002e58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e36:	f7ff fcc9 	bl	80027cc <main>
  bx  lr    
 8002e3a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002e3c:	2001ffff 	.word	0x2001ffff
  ldr  r3, =_sidata
 8002e40:	08002ef0 	.word	0x08002ef0
  ldr  r0, =_sdata
 8002e44:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002e48:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8002e4c:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8002e50:	200000f8 	.word	0x200000f8

08002e54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e54:	e7fe      	b.n	8002e54 <ADC_IRQHandler>
	...

08002e58 <__libc_init_array>:
 8002e58:	b570      	push	{r4, r5, r6, lr}
 8002e5a:	4e0d      	ldr	r6, [pc, #52]	; (8002e90 <__libc_init_array+0x38>)
 8002e5c:	4c0d      	ldr	r4, [pc, #52]	; (8002e94 <__libc_init_array+0x3c>)
 8002e5e:	1ba4      	subs	r4, r4, r6
 8002e60:	10a4      	asrs	r4, r4, #2
 8002e62:	2500      	movs	r5, #0
 8002e64:	42a5      	cmp	r5, r4
 8002e66:	d109      	bne.n	8002e7c <__libc_init_array+0x24>
 8002e68:	4e0b      	ldr	r6, [pc, #44]	; (8002e98 <__libc_init_array+0x40>)
 8002e6a:	4c0c      	ldr	r4, [pc, #48]	; (8002e9c <__libc_init_array+0x44>)
 8002e6c:	f000 f820 	bl	8002eb0 <_init>
 8002e70:	1ba4      	subs	r4, r4, r6
 8002e72:	10a4      	asrs	r4, r4, #2
 8002e74:	2500      	movs	r5, #0
 8002e76:	42a5      	cmp	r5, r4
 8002e78:	d105      	bne.n	8002e86 <__libc_init_array+0x2e>
 8002e7a:	bd70      	pop	{r4, r5, r6, pc}
 8002e7c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002e80:	4798      	blx	r3
 8002e82:	3501      	adds	r5, #1
 8002e84:	e7ee      	b.n	8002e64 <__libc_init_array+0xc>
 8002e86:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002e8a:	4798      	blx	r3
 8002e8c:	3501      	adds	r5, #1
 8002e8e:	e7f2      	b.n	8002e76 <__libc_init_array+0x1e>
 8002e90:	08002ee8 	.word	0x08002ee8
 8002e94:	08002ee8 	.word	0x08002ee8
 8002e98:	08002ee8 	.word	0x08002ee8
 8002e9c:	08002eec 	.word	0x08002eec

08002ea0 <memset>:
 8002ea0:	4402      	add	r2, r0
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d100      	bne.n	8002eaa <memset+0xa>
 8002ea8:	4770      	bx	lr
 8002eaa:	f803 1b01 	strb.w	r1, [r3], #1
 8002eae:	e7f9      	b.n	8002ea4 <memset+0x4>

08002eb0 <_init>:
 8002eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eb2:	bf00      	nop
 8002eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eb6:	bc08      	pop	{r3}
 8002eb8:	469e      	mov	lr, r3
 8002eba:	4770      	bx	lr

08002ebc <_fini>:
 8002ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ebe:	bf00      	nop
 8002ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ec2:	bc08      	pop	{r3}
 8002ec4:	469e      	mov	lr, r3
 8002ec6:	4770      	bx	lr
