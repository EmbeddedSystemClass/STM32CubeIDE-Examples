
LED__Label.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b1c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08001ca4  08001ca4  00011ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001d64  08001d64  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08001d64  08001d64  00011d64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001d6c  08001d6c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001d6c  08001d6c  00011d6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001d70  08001d70  00011d70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001d74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08001d80  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08001d80  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003789  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000d43  00000000  00000000  000237c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000003f8  00000000  00000000  00024508  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000370  00000000  00000000  00024900  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001ea69  00000000  00000000  00024c70  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000042d0  00000000  00000000  000436d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000baad1  00000000  00000000  000479a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010247a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000e3c  00000000  00000000  001024f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001c8c 	.word	0x08001c8c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08001c8c 	.word	0x08001c8c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004cc:	4b0e      	ldr	r3, [pc, #56]	; (8000508 <HAL_Init+0x40>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a0d      	ldr	r2, [pc, #52]	; (8000508 <HAL_Init+0x40>)
 80004d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004d8:	4b0b      	ldr	r3, [pc, #44]	; (8000508 <HAL_Init+0x40>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a0a      	ldr	r2, [pc, #40]	; (8000508 <HAL_Init+0x40>)
 80004de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004e4:	4b08      	ldr	r3, [pc, #32]	; (8000508 <HAL_Init+0x40>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a07      	ldr	r2, [pc, #28]	; (8000508 <HAL_Init+0x40>)
 80004ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004f0:	2003      	movs	r0, #3
 80004f2:	f000 f92f 	bl	8000754 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004f6:	2000      	movs	r0, #0
 80004f8:	f000 f808 	bl	800050c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004fc:	f001 fae4 	bl	8001ac8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000500:	2300      	movs	r3, #0
}
 8000502:	4618      	mov	r0, r3
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40023c00 	.word	0x40023c00

0800050c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000514:	4b12      	ldr	r3, [pc, #72]	; (8000560 <HAL_InitTick+0x54>)
 8000516:	681a      	ldr	r2, [r3, #0]
 8000518:	4b12      	ldr	r3, [pc, #72]	; (8000564 <HAL_InitTick+0x58>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	4619      	mov	r1, r3
 800051e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000522:	fbb3 f3f1 	udiv	r3, r3, r1
 8000526:	fbb2 f3f3 	udiv	r3, r2, r3
 800052a:	4618      	mov	r0, r3
 800052c:	f000 f95e 	bl	80007ec <HAL_SYSTICK_Config>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000536:	2301      	movs	r3, #1
 8000538:	e00e      	b.n	8000558 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	2b0f      	cmp	r3, #15
 800053e:	d80a      	bhi.n	8000556 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000540:	2200      	movs	r2, #0
 8000542:	6879      	ldr	r1, [r7, #4]
 8000544:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000548:	f000 f924 	bl	8000794 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800054c:	4a06      	ldr	r2, [pc, #24]	; (8000568 <HAL_InitTick+0x5c>)
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000552:	2300      	movs	r3, #0
 8000554:	e000      	b.n	8000558 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000556:	2301      	movs	r3, #1
}
 8000558:	4618      	mov	r0, r3
 800055a:	3708      	adds	r7, #8
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	20000008 	.word	0x20000008
 8000564:	20000004 	.word	0x20000004
 8000568:	20000000 	.word	0x20000000

0800056c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000570:	4b06      	ldr	r3, [pc, #24]	; (800058c <HAL_IncTick+0x20>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	461a      	mov	r2, r3
 8000576:	4b06      	ldr	r3, [pc, #24]	; (8000590 <HAL_IncTick+0x24>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4413      	add	r3, r2
 800057c:	4a04      	ldr	r2, [pc, #16]	; (8000590 <HAL_IncTick+0x24>)
 800057e:	6013      	str	r3, [r2, #0]
}
 8000580:	bf00      	nop
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	20000004 	.word	0x20000004
 8000590:	20000028 	.word	0x20000028

08000594 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  return uwTick;
 8000598:	4b03      	ldr	r3, [pc, #12]	; (80005a8 <HAL_GetTick+0x14>)
 800059a:	681b      	ldr	r3, [r3, #0]
}
 800059c:	4618      	mov	r0, r3
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	20000028 	.word	0x20000028

080005ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005b4:	f7ff ffee 	bl	8000594 <HAL_GetTick>
 80005b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80005c4:	d005      	beq.n	80005d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005c6:	4b09      	ldr	r3, [pc, #36]	; (80005ec <HAL_Delay+0x40>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	461a      	mov	r2, r3
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	4413      	add	r3, r2
 80005d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005d2:	bf00      	nop
 80005d4:	f7ff ffde 	bl	8000594 <HAL_GetTick>
 80005d8:	4602      	mov	r2, r0
 80005da:	68bb      	ldr	r3, [r7, #8]
 80005dc:	1ad3      	subs	r3, r2, r3
 80005de:	68fa      	ldr	r2, [r7, #12]
 80005e0:	429a      	cmp	r2, r3
 80005e2:	d8f7      	bhi.n	80005d4 <HAL_Delay+0x28>
  {
  }
}
 80005e4:	bf00      	nop
 80005e6:	3710      	adds	r7, #16
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	20000004 	.word	0x20000004

080005f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	f003 0307 	and.w	r3, r3, #7
 80005fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000600:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <__NVIC_SetPriorityGrouping+0x44>)
 8000602:	68db      	ldr	r3, [r3, #12]
 8000604:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000606:	68ba      	ldr	r2, [r7, #8]
 8000608:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800060c:	4013      	ands	r3, r2
 800060e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000614:	68bb      	ldr	r3, [r7, #8]
 8000616:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000618:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800061c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000620:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000622:	4a04      	ldr	r2, [pc, #16]	; (8000634 <__NVIC_SetPriorityGrouping+0x44>)
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	60d3      	str	r3, [r2, #12]
}
 8000628:	bf00      	nop
 800062a:	3714      	adds	r7, #20
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr
 8000634:	e000ed00 	.word	0xe000ed00

08000638 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800063c:	4b04      	ldr	r3, [pc, #16]	; (8000650 <__NVIC_GetPriorityGrouping+0x18>)
 800063e:	68db      	ldr	r3, [r3, #12]
 8000640:	0a1b      	lsrs	r3, r3, #8
 8000642:	f003 0307 	and.w	r3, r3, #7
}
 8000646:	4618      	mov	r0, r3
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr
 8000650:	e000ed00 	.word	0xe000ed00

08000654 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	6039      	str	r1, [r7, #0]
 800065e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000660:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000664:	2b00      	cmp	r3, #0
 8000666:	db0a      	blt.n	800067e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	b2da      	uxtb	r2, r3
 800066c:	490c      	ldr	r1, [pc, #48]	; (80006a0 <__NVIC_SetPriority+0x4c>)
 800066e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000672:	0112      	lsls	r2, r2, #4
 8000674:	b2d2      	uxtb	r2, r2
 8000676:	440b      	add	r3, r1
 8000678:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800067c:	e00a      	b.n	8000694 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	b2da      	uxtb	r2, r3
 8000682:	4908      	ldr	r1, [pc, #32]	; (80006a4 <__NVIC_SetPriority+0x50>)
 8000684:	79fb      	ldrb	r3, [r7, #7]
 8000686:	f003 030f 	and.w	r3, r3, #15
 800068a:	3b04      	subs	r3, #4
 800068c:	0112      	lsls	r2, r2, #4
 800068e:	b2d2      	uxtb	r2, r2
 8000690:	440b      	add	r3, r1
 8000692:	761a      	strb	r2, [r3, #24]
}
 8000694:	bf00      	nop
 8000696:	370c      	adds	r7, #12
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr
 80006a0:	e000e100 	.word	0xe000e100
 80006a4:	e000ed00 	.word	0xe000ed00

080006a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b089      	sub	sp, #36	; 0x24
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	60f8      	str	r0, [r7, #12]
 80006b0:	60b9      	str	r1, [r7, #8]
 80006b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	f003 0307 	and.w	r3, r3, #7
 80006ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006bc:	69fb      	ldr	r3, [r7, #28]
 80006be:	f1c3 0307 	rsb	r3, r3, #7
 80006c2:	2b04      	cmp	r3, #4
 80006c4:	bf28      	it	cs
 80006c6:	2304      	movcs	r3, #4
 80006c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ca:	69fb      	ldr	r3, [r7, #28]
 80006cc:	3304      	adds	r3, #4
 80006ce:	2b06      	cmp	r3, #6
 80006d0:	d902      	bls.n	80006d8 <NVIC_EncodePriority+0x30>
 80006d2:	69fb      	ldr	r3, [r7, #28]
 80006d4:	3b03      	subs	r3, #3
 80006d6:	e000      	b.n	80006da <NVIC_EncodePriority+0x32>
 80006d8:	2300      	movs	r3, #0
 80006da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80006e0:	69bb      	ldr	r3, [r7, #24]
 80006e2:	fa02 f303 	lsl.w	r3, r2, r3
 80006e6:	43da      	mvns	r2, r3
 80006e8:	68bb      	ldr	r3, [r7, #8]
 80006ea:	401a      	ands	r2, r3
 80006ec:	697b      	ldr	r3, [r7, #20]
 80006ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80006f4:	697b      	ldr	r3, [r7, #20]
 80006f6:	fa01 f303 	lsl.w	r3, r1, r3
 80006fa:	43d9      	mvns	r1, r3
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000700:	4313      	orrs	r3, r2
         );
}
 8000702:	4618      	mov	r0, r3
 8000704:	3724      	adds	r7, #36	; 0x24
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr
	...

08000710 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	3b01      	subs	r3, #1
 800071c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000720:	d301      	bcc.n	8000726 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000722:	2301      	movs	r3, #1
 8000724:	e00f      	b.n	8000746 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000726:	4a0a      	ldr	r2, [pc, #40]	; (8000750 <SysTick_Config+0x40>)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	3b01      	subs	r3, #1
 800072c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800072e:	210f      	movs	r1, #15
 8000730:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000734:	f7ff ff8e 	bl	8000654 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000738:	4b05      	ldr	r3, [pc, #20]	; (8000750 <SysTick_Config+0x40>)
 800073a:	2200      	movs	r2, #0
 800073c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800073e:	4b04      	ldr	r3, [pc, #16]	; (8000750 <SysTick_Config+0x40>)
 8000740:	2207      	movs	r2, #7
 8000742:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000744:	2300      	movs	r3, #0
}
 8000746:	4618      	mov	r0, r3
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	e000e010 	.word	0xe000e010

08000754 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	2b07      	cmp	r3, #7
 8000760:	d00f      	beq.n	8000782 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	2b06      	cmp	r3, #6
 8000766:	d00c      	beq.n	8000782 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	2b05      	cmp	r3, #5
 800076c:	d009      	beq.n	8000782 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	2b04      	cmp	r3, #4
 8000772:	d006      	beq.n	8000782 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	2b03      	cmp	r3, #3
 8000778:	d003      	beq.n	8000782 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800077a:	2192      	movs	r1, #146	; 0x92
 800077c:	4804      	ldr	r0, [pc, #16]	; (8000790 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 800077e:	f001 f998 	bl	8001ab2 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000782:	6878      	ldr	r0, [r7, #4]
 8000784:	f7ff ff34 	bl	80005f0 <__NVIC_SetPriorityGrouping>
}
 8000788:	bf00      	nop
 800078a:	3708      	adds	r7, #8
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	08001ca4 	.word	0x08001ca4

08000794 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000794:	b580      	push	{r7, lr}
 8000796:	b086      	sub	sp, #24
 8000798:	af00      	add	r7, sp, #0
 800079a:	4603      	mov	r3, r0
 800079c:	60b9      	str	r1, [r7, #8]
 800079e:	607a      	str	r2, [r7, #4]
 80007a0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007a2:	2300      	movs	r3, #0
 80007a4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	2b0f      	cmp	r3, #15
 80007aa:	d903      	bls.n	80007b4 <HAL_NVIC_SetPriority+0x20>
 80007ac:	21aa      	movs	r1, #170	; 0xaa
 80007ae:	480e      	ldr	r0, [pc, #56]	; (80007e8 <HAL_NVIC_SetPriority+0x54>)
 80007b0:	f001 f97f 	bl	8001ab2 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	2b0f      	cmp	r3, #15
 80007b8:	d903      	bls.n	80007c2 <HAL_NVIC_SetPriority+0x2e>
 80007ba:	21ab      	movs	r1, #171	; 0xab
 80007bc:	480a      	ldr	r0, [pc, #40]	; (80007e8 <HAL_NVIC_SetPriority+0x54>)
 80007be:	f001 f978 	bl	8001ab2 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007c2:	f7ff ff39 	bl	8000638 <__NVIC_GetPriorityGrouping>
 80007c6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007c8:	687a      	ldr	r2, [r7, #4]
 80007ca:	68b9      	ldr	r1, [r7, #8]
 80007cc:	6978      	ldr	r0, [r7, #20]
 80007ce:	f7ff ff6b 	bl	80006a8 <NVIC_EncodePriority>
 80007d2:	4602      	mov	r2, r0
 80007d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007d8:	4611      	mov	r1, r2
 80007da:	4618      	mov	r0, r3
 80007dc:	f7ff ff3a 	bl	8000654 <__NVIC_SetPriority>
}
 80007e0:	bf00      	nop
 80007e2:	3718      	adds	r7, #24
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	08001ca4 	.word	0x08001ca4

080007ec <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007f4:	6878      	ldr	r0, [r7, #4]
 80007f6:	f7ff ff8b 	bl	8000710 <SysTick_Config>
 80007fa:	4603      	mov	r3, r0
}
 80007fc:	4618      	mov	r0, r3
 80007fe:	3708      	adds	r7, #8
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}

08000804 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b088      	sub	sp, #32
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
 800080c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800080e:	2300      	movs	r3, #0
 8000810:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000812:	2300      	movs	r3, #0
 8000814:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000816:	2300      	movs	r3, #0
 8000818:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	4a41      	ldr	r2, [pc, #260]	; (8000924 <HAL_GPIO_Init+0x120>)
 800081e:	4293      	cmp	r3, r2
 8000820:	d023      	beq.n	800086a <HAL_GPIO_Init+0x66>
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	4a40      	ldr	r2, [pc, #256]	; (8000928 <HAL_GPIO_Init+0x124>)
 8000826:	4293      	cmp	r3, r2
 8000828:	d01f      	beq.n	800086a <HAL_GPIO_Init+0x66>
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	4a3f      	ldr	r2, [pc, #252]	; (800092c <HAL_GPIO_Init+0x128>)
 800082e:	4293      	cmp	r3, r2
 8000830:	d01b      	beq.n	800086a <HAL_GPIO_Init+0x66>
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	4a3e      	ldr	r2, [pc, #248]	; (8000930 <HAL_GPIO_Init+0x12c>)
 8000836:	4293      	cmp	r3, r2
 8000838:	d017      	beq.n	800086a <HAL_GPIO_Init+0x66>
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	4a3d      	ldr	r2, [pc, #244]	; (8000934 <HAL_GPIO_Init+0x130>)
 800083e:	4293      	cmp	r3, r2
 8000840:	d013      	beq.n	800086a <HAL_GPIO_Init+0x66>
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	4a3c      	ldr	r2, [pc, #240]	; (8000938 <HAL_GPIO_Init+0x134>)
 8000846:	4293      	cmp	r3, r2
 8000848:	d00f      	beq.n	800086a <HAL_GPIO_Init+0x66>
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	4a3b      	ldr	r2, [pc, #236]	; (800093c <HAL_GPIO_Init+0x138>)
 800084e:	4293      	cmp	r3, r2
 8000850:	d00b      	beq.n	800086a <HAL_GPIO_Init+0x66>
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	4a3a      	ldr	r2, [pc, #232]	; (8000940 <HAL_GPIO_Init+0x13c>)
 8000856:	4293      	cmp	r3, r2
 8000858:	d007      	beq.n	800086a <HAL_GPIO_Init+0x66>
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	4a39      	ldr	r2, [pc, #228]	; (8000944 <HAL_GPIO_Init+0x140>)
 800085e:	4293      	cmp	r3, r2
 8000860:	d003      	beq.n	800086a <HAL_GPIO_Init+0x66>
 8000862:	21b3      	movs	r1, #179	; 0xb3
 8000864:	4838      	ldr	r0, [pc, #224]	; (8000948 <HAL_GPIO_Init+0x144>)
 8000866:	f001 f924 	bl	8001ab2 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	b29b      	uxth	r3, r3
 8000870:	2b00      	cmp	r3, #0
 8000872:	d005      	beq.n	8000880 <HAL_GPIO_Init+0x7c>
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	0c1b      	lsrs	r3, r3, #16
 800087a:	041b      	lsls	r3, r3, #16
 800087c:	2b00      	cmp	r3, #0
 800087e:	d003      	beq.n	8000888 <HAL_GPIO_Init+0x84>
 8000880:	21b4      	movs	r1, #180	; 0xb4
 8000882:	4831      	ldr	r0, [pc, #196]	; (8000948 <HAL_GPIO_Init+0x144>)
 8000884:	f001 f915 	bl	8001ab2 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	685b      	ldr	r3, [r3, #4]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d035      	beq.n	80008fc <HAL_GPIO_Init+0xf8>
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	685b      	ldr	r3, [r3, #4]
 8000894:	2b01      	cmp	r3, #1
 8000896:	d031      	beq.n	80008fc <HAL_GPIO_Init+0xf8>
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	685b      	ldr	r3, [r3, #4]
 800089c:	2b11      	cmp	r3, #17
 800089e:	d02d      	beq.n	80008fc <HAL_GPIO_Init+0xf8>
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	685b      	ldr	r3, [r3, #4]
 80008a4:	2b02      	cmp	r3, #2
 80008a6:	d029      	beq.n	80008fc <HAL_GPIO_Init+0xf8>
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	685b      	ldr	r3, [r3, #4]
 80008ac:	2b12      	cmp	r3, #18
 80008ae:	d025      	beq.n	80008fc <HAL_GPIO_Init+0xf8>
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	685b      	ldr	r3, [r3, #4]
 80008b4:	4a25      	ldr	r2, [pc, #148]	; (800094c <HAL_GPIO_Init+0x148>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d020      	beq.n	80008fc <HAL_GPIO_Init+0xf8>
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	685b      	ldr	r3, [r3, #4]
 80008be:	4a24      	ldr	r2, [pc, #144]	; (8000950 <HAL_GPIO_Init+0x14c>)
 80008c0:	4293      	cmp	r3, r2
 80008c2:	d01b      	beq.n	80008fc <HAL_GPIO_Init+0xf8>
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	685b      	ldr	r3, [r3, #4]
 80008c8:	4a22      	ldr	r2, [pc, #136]	; (8000954 <HAL_GPIO_Init+0x150>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d016      	beq.n	80008fc <HAL_GPIO_Init+0xf8>
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	685b      	ldr	r3, [r3, #4]
 80008d2:	4a21      	ldr	r2, [pc, #132]	; (8000958 <HAL_GPIO_Init+0x154>)
 80008d4:	4293      	cmp	r3, r2
 80008d6:	d011      	beq.n	80008fc <HAL_GPIO_Init+0xf8>
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	685b      	ldr	r3, [r3, #4]
 80008dc:	4a1f      	ldr	r2, [pc, #124]	; (800095c <HAL_GPIO_Init+0x158>)
 80008de:	4293      	cmp	r3, r2
 80008e0:	d00c      	beq.n	80008fc <HAL_GPIO_Init+0xf8>
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	685b      	ldr	r3, [r3, #4]
 80008e6:	4a1e      	ldr	r2, [pc, #120]	; (8000960 <HAL_GPIO_Init+0x15c>)
 80008e8:	4293      	cmp	r3, r2
 80008ea:	d007      	beq.n	80008fc <HAL_GPIO_Init+0xf8>
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	685b      	ldr	r3, [r3, #4]
 80008f0:	2b03      	cmp	r3, #3
 80008f2:	d003      	beq.n	80008fc <HAL_GPIO_Init+0xf8>
 80008f4:	21b5      	movs	r1, #181	; 0xb5
 80008f6:	4814      	ldr	r0, [pc, #80]	; (8000948 <HAL_GPIO_Init+0x144>)
 80008f8:	f001 f8db 	bl	8001ab2 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	689b      	ldr	r3, [r3, #8]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d00b      	beq.n	800091c <HAL_GPIO_Init+0x118>
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	689b      	ldr	r3, [r3, #8]
 8000908:	2b01      	cmp	r3, #1
 800090a:	d007      	beq.n	800091c <HAL_GPIO_Init+0x118>
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	689b      	ldr	r3, [r3, #8]
 8000910:	2b02      	cmp	r3, #2
 8000912:	d003      	beq.n	800091c <HAL_GPIO_Init+0x118>
 8000914:	21b6      	movs	r1, #182	; 0xb6
 8000916:	480c      	ldr	r0, [pc, #48]	; (8000948 <HAL_GPIO_Init+0x144>)
 8000918:	f001 f8cb 	bl	8001ab2 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800091c:	2300      	movs	r3, #0
 800091e:	61fb      	str	r3, [r7, #28]
 8000920:	e24f      	b.n	8000dc2 <HAL_GPIO_Init+0x5be>
 8000922:	bf00      	nop
 8000924:	40020000 	.word	0x40020000
 8000928:	40020400 	.word	0x40020400
 800092c:	40020800 	.word	0x40020800
 8000930:	40020c00 	.word	0x40020c00
 8000934:	40021000 	.word	0x40021000
 8000938:	40021400 	.word	0x40021400
 800093c:	40021800 	.word	0x40021800
 8000940:	40021c00 	.word	0x40021c00
 8000944:	40022000 	.word	0x40022000
 8000948:	08001ce0 	.word	0x08001ce0
 800094c:	10110000 	.word	0x10110000
 8000950:	10210000 	.word	0x10210000
 8000954:	10310000 	.word	0x10310000
 8000958:	10120000 	.word	0x10120000
 800095c:	10220000 	.word	0x10220000
 8000960:	10320000 	.word	0x10320000
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000964:	2201      	movs	r2, #1
 8000966:	69fb      	ldr	r3, [r7, #28]
 8000968:	fa02 f303 	lsl.w	r3, r2, r3
 800096c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	697a      	ldr	r2, [r7, #20]
 8000974:	4013      	ands	r3, r2
 8000976:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000978:	693a      	ldr	r2, [r7, #16]
 800097a:	697b      	ldr	r3, [r7, #20]
 800097c:	429a      	cmp	r2, r3
 800097e:	f040 821d 	bne.w	8000dbc <HAL_GPIO_Init+0x5b8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	685b      	ldr	r3, [r3, #4]
 8000986:	2b02      	cmp	r3, #2
 8000988:	d004      	beq.n	8000994 <HAL_GPIO_Init+0x190>
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	685b      	ldr	r3, [r3, #4]
 800098e:	2b12      	cmp	r3, #18
 8000990:	f040 80bc 	bne.w	8000b0c <HAL_GPIO_Init+0x308>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	691b      	ldr	r3, [r3, #16]
 8000998:	2b00      	cmp	r3, #0
 800099a:	f000 8093 	beq.w	8000ac4 <HAL_GPIO_Init+0x2c0>
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	691b      	ldr	r3, [r3, #16]
 80009a2:	2b09      	cmp	r3, #9
 80009a4:	f000 808e 	beq.w	8000ac4 <HAL_GPIO_Init+0x2c0>
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	691b      	ldr	r3, [r3, #16]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	f000 8089 	beq.w	8000ac4 <HAL_GPIO_Init+0x2c0>
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	691b      	ldr	r3, [r3, #16]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	f000 8084 	beq.w	8000ac4 <HAL_GPIO_Init+0x2c0>
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	691b      	ldr	r3, [r3, #16]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d07f      	beq.n	8000ac4 <HAL_GPIO_Init+0x2c0>
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	691b      	ldr	r3, [r3, #16]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d07b      	beq.n	8000ac4 <HAL_GPIO_Init+0x2c0>
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	691b      	ldr	r3, [r3, #16]
 80009d0:	2b01      	cmp	r3, #1
 80009d2:	d077      	beq.n	8000ac4 <HAL_GPIO_Init+0x2c0>
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	691b      	ldr	r3, [r3, #16]
 80009d8:	2b01      	cmp	r3, #1
 80009da:	d073      	beq.n	8000ac4 <HAL_GPIO_Init+0x2c0>
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	691b      	ldr	r3, [r3, #16]
 80009e0:	2b02      	cmp	r3, #2
 80009e2:	d06f      	beq.n	8000ac4 <HAL_GPIO_Init+0x2c0>
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	691b      	ldr	r3, [r3, #16]
 80009e8:	2b02      	cmp	r3, #2
 80009ea:	d06b      	beq.n	8000ac4 <HAL_GPIO_Init+0x2c0>
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	691b      	ldr	r3, [r3, #16]
 80009f0:	2b02      	cmp	r3, #2
 80009f2:	d067      	beq.n	8000ac4 <HAL_GPIO_Init+0x2c0>
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	691b      	ldr	r3, [r3, #16]
 80009f8:	2b03      	cmp	r3, #3
 80009fa:	d063      	beq.n	8000ac4 <HAL_GPIO_Init+0x2c0>
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	691b      	ldr	r3, [r3, #16]
 8000a00:	2b04      	cmp	r3, #4
 8000a02:	d05f      	beq.n	8000ac4 <HAL_GPIO_Init+0x2c0>
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	691b      	ldr	r3, [r3, #16]
 8000a08:	2b04      	cmp	r3, #4
 8000a0a:	d05b      	beq.n	8000ac4 <HAL_GPIO_Init+0x2c0>
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	691b      	ldr	r3, [r3, #16]
 8000a10:	2b04      	cmp	r3, #4
 8000a12:	d057      	beq.n	8000ac4 <HAL_GPIO_Init+0x2c0>
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	691b      	ldr	r3, [r3, #16]
 8000a18:	2b05      	cmp	r3, #5
 8000a1a:	d053      	beq.n	8000ac4 <HAL_GPIO_Init+0x2c0>
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	691b      	ldr	r3, [r3, #16]
 8000a20:	2b05      	cmp	r3, #5
 8000a22:	d04f      	beq.n	8000ac4 <HAL_GPIO_Init+0x2c0>
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	691b      	ldr	r3, [r3, #16]
 8000a28:	2b09      	cmp	r3, #9
 8000a2a:	d04b      	beq.n	8000ac4 <HAL_GPIO_Init+0x2c0>
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	691b      	ldr	r3, [r3, #16]
 8000a30:	2b06      	cmp	r3, #6
 8000a32:	d047      	beq.n	8000ac4 <HAL_GPIO_Init+0x2c0>
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	691b      	ldr	r3, [r3, #16]
 8000a38:	2b09      	cmp	r3, #9
 8000a3a:	d043      	beq.n	8000ac4 <HAL_GPIO_Init+0x2c0>
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	691b      	ldr	r3, [r3, #16]
 8000a40:	2b07      	cmp	r3, #7
 8000a42:	d03f      	beq.n	8000ac4 <HAL_GPIO_Init+0x2c0>
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	691b      	ldr	r3, [r3, #16]
 8000a48:	2b07      	cmp	r3, #7
 8000a4a:	d03b      	beq.n	8000ac4 <HAL_GPIO_Init+0x2c0>
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	691b      	ldr	r3, [r3, #16]
 8000a50:	2b07      	cmp	r3, #7
 8000a52:	d037      	beq.n	8000ac4 <HAL_GPIO_Init+0x2c0>
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	691b      	ldr	r3, [r3, #16]
 8000a58:	2b08      	cmp	r3, #8
 8000a5a:	d033      	beq.n	8000ac4 <HAL_GPIO_Init+0x2c0>
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	691b      	ldr	r3, [r3, #16]
 8000a60:	2b08      	cmp	r3, #8
 8000a62:	d02f      	beq.n	8000ac4 <HAL_GPIO_Init+0x2c0>
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	691b      	ldr	r3, [r3, #16]
 8000a68:	2b08      	cmp	r3, #8
 8000a6a:	d02b      	beq.n	8000ac4 <HAL_GPIO_Init+0x2c0>
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	691b      	ldr	r3, [r3, #16]
 8000a70:	2b09      	cmp	r3, #9
 8000a72:	d027      	beq.n	8000ac4 <HAL_GPIO_Init+0x2c0>
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	691b      	ldr	r3, [r3, #16]
 8000a78:	2b09      	cmp	r3, #9
 8000a7a:	d023      	beq.n	8000ac4 <HAL_GPIO_Init+0x2c0>
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	691b      	ldr	r3, [r3, #16]
 8000a80:	2b0a      	cmp	r3, #10
 8000a82:	d01f      	beq.n	8000ac4 <HAL_GPIO_Init+0x2c0>
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	691b      	ldr	r3, [r3, #16]
 8000a88:	2b0a      	cmp	r3, #10
 8000a8a:	d01b      	beq.n	8000ac4 <HAL_GPIO_Init+0x2c0>
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	691b      	ldr	r3, [r3, #16]
 8000a90:	2b0b      	cmp	r3, #11
 8000a92:	d017      	beq.n	8000ac4 <HAL_GPIO_Init+0x2c0>
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	691b      	ldr	r3, [r3, #16]
 8000a98:	2b0c      	cmp	r3, #12
 8000a9a:	d013      	beq.n	8000ac4 <HAL_GPIO_Init+0x2c0>
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	691b      	ldr	r3, [r3, #16]
 8000aa0:	2b0c      	cmp	r3, #12
 8000aa2:	d00f      	beq.n	8000ac4 <HAL_GPIO_Init+0x2c0>
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	691b      	ldr	r3, [r3, #16]
 8000aa8:	2b0d      	cmp	r3, #13
 8000aaa:	d00b      	beq.n	8000ac4 <HAL_GPIO_Init+0x2c0>
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	691b      	ldr	r3, [r3, #16]
 8000ab0:	2b0c      	cmp	r3, #12
 8000ab2:	d007      	beq.n	8000ac4 <HAL_GPIO_Init+0x2c0>
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	691b      	ldr	r3, [r3, #16]
 8000ab8:	2b0f      	cmp	r3, #15
 8000aba:	d003      	beq.n	8000ac4 <HAL_GPIO_Init+0x2c0>
 8000abc:	21c7      	movs	r1, #199	; 0xc7
 8000abe:	4882      	ldr	r0, [pc, #520]	; (8000cc8 <HAL_GPIO_Init+0x4c4>)
 8000ac0:	f000 fff7 	bl	8001ab2 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ac4:	69fb      	ldr	r3, [r7, #28]
 8000ac6:	08da      	lsrs	r2, r3, #3
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	3208      	adds	r2, #8
 8000acc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ad0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ad2:	69fb      	ldr	r3, [r7, #28]
 8000ad4:	f003 0307 	and.w	r3, r3, #7
 8000ad8:	009b      	lsls	r3, r3, #2
 8000ada:	220f      	movs	r2, #15
 8000adc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae0:	43db      	mvns	r3, r3
 8000ae2:	69ba      	ldr	r2, [r7, #24]
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	691a      	ldr	r2, [r3, #16]
 8000aec:	69fb      	ldr	r3, [r7, #28]
 8000aee:	f003 0307 	and.w	r3, r3, #7
 8000af2:	009b      	lsls	r3, r3, #2
 8000af4:	fa02 f303 	lsl.w	r3, r2, r3
 8000af8:	69ba      	ldr	r2, [r7, #24]
 8000afa:	4313      	orrs	r3, r2
 8000afc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000afe:	69fb      	ldr	r3, [r7, #28]
 8000b00:	08da      	lsrs	r2, r3, #3
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	3208      	adds	r2, #8
 8000b06:	69b9      	ldr	r1, [r7, #24]
 8000b08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000b12:	69fb      	ldr	r3, [r7, #28]
 8000b14:	005b      	lsls	r3, r3, #1
 8000b16:	2203      	movs	r2, #3
 8000b18:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1c:	43db      	mvns	r3, r3
 8000b1e:	69ba      	ldr	r2, [r7, #24]
 8000b20:	4013      	ands	r3, r2
 8000b22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	f003 0203 	and.w	r2, r3, #3
 8000b2c:	69fb      	ldr	r3, [r7, #28]
 8000b2e:	005b      	lsls	r3, r3, #1
 8000b30:	fa02 f303 	lsl.w	r3, r2, r3
 8000b34:	69ba      	ldr	r2, [r7, #24]
 8000b36:	4313      	orrs	r3, r2
 8000b38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	69ba      	ldr	r2, [r7, #24]
 8000b3e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	685b      	ldr	r3, [r3, #4]
 8000b44:	2b01      	cmp	r3, #1
 8000b46:	d00b      	beq.n	8000b60 <HAL_GPIO_Init+0x35c>
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	685b      	ldr	r3, [r3, #4]
 8000b4c:	2b02      	cmp	r3, #2
 8000b4e:	d007      	beq.n	8000b60 <HAL_GPIO_Init+0x35c>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b54:	2b11      	cmp	r3, #17
 8000b56:	d003      	beq.n	8000b60 <HAL_GPIO_Init+0x35c>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	685b      	ldr	r3, [r3, #4]
 8000b5c:	2b12      	cmp	r3, #18
 8000b5e:	d144      	bne.n	8000bea <HAL_GPIO_Init+0x3e6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	68db      	ldr	r3, [r3, #12]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d00f      	beq.n	8000b88 <HAL_GPIO_Init+0x384>
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	68db      	ldr	r3, [r3, #12]
 8000b6c:	2b01      	cmp	r3, #1
 8000b6e:	d00b      	beq.n	8000b88 <HAL_GPIO_Init+0x384>
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	68db      	ldr	r3, [r3, #12]
 8000b74:	2b02      	cmp	r3, #2
 8000b76:	d007      	beq.n	8000b88 <HAL_GPIO_Init+0x384>
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	68db      	ldr	r3, [r3, #12]
 8000b7c:	2b03      	cmp	r3, #3
 8000b7e:	d003      	beq.n	8000b88 <HAL_GPIO_Init+0x384>
 8000b80:	21da      	movs	r1, #218	; 0xda
 8000b82:	4851      	ldr	r0, [pc, #324]	; (8000cc8 <HAL_GPIO_Init+0x4c4>)
 8000b84:	f000 ff95 	bl	8001ab2 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	689b      	ldr	r3, [r3, #8]
 8000b8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b8e:	69fb      	ldr	r3, [r7, #28]
 8000b90:	005b      	lsls	r3, r3, #1
 8000b92:	2203      	movs	r2, #3
 8000b94:	fa02 f303 	lsl.w	r3, r2, r3
 8000b98:	43db      	mvns	r3, r3
 8000b9a:	69ba      	ldr	r2, [r7, #24]
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	68da      	ldr	r2, [r3, #12]
 8000ba4:	69fb      	ldr	r3, [r7, #28]
 8000ba6:	005b      	lsls	r3, r3, #1
 8000ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bac:	69ba      	ldr	r2, [r7, #24]
 8000bae:	4313      	orrs	r3, r2
 8000bb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	69ba      	ldr	r2, [r7, #24]
 8000bb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	69fb      	ldr	r3, [r7, #28]
 8000bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc6:	43db      	mvns	r3, r3
 8000bc8:	69ba      	ldr	r2, [r7, #24]
 8000bca:	4013      	ands	r3, r2
 8000bcc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	091b      	lsrs	r3, r3, #4
 8000bd4:	f003 0201 	and.w	r2, r3, #1
 8000bd8:	69fb      	ldr	r3, [r7, #28]
 8000bda:	fa02 f303 	lsl.w	r3, r2, r3
 8000bde:	69ba      	ldr	r2, [r7, #24]
 8000be0:	4313      	orrs	r3, r2
 8000be2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	69ba      	ldr	r2, [r7, #24]
 8000be8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	68db      	ldr	r3, [r3, #12]
 8000bee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000bf0:	69fb      	ldr	r3, [r7, #28]
 8000bf2:	005b      	lsls	r3, r3, #1
 8000bf4:	2203      	movs	r2, #3
 8000bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfa:	43db      	mvns	r3, r3
 8000bfc:	69ba      	ldr	r2, [r7, #24]
 8000bfe:	4013      	ands	r3, r2
 8000c00:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	689a      	ldr	r2, [r3, #8]
 8000c06:	69fb      	ldr	r3, [r7, #28]
 8000c08:	005b      	lsls	r3, r3, #1
 8000c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0e:	69ba      	ldr	r2, [r7, #24]
 8000c10:	4313      	orrs	r3, r2
 8000c12:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	69ba      	ldr	r2, [r7, #24]
 8000c18:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f000 80ca 	beq.w	8000dbc <HAL_GPIO_Init+0x5b8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c28:	2300      	movs	r3, #0
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	4b27      	ldr	r3, [pc, #156]	; (8000ccc <HAL_GPIO_Init+0x4c8>)
 8000c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c30:	4a26      	ldr	r2, [pc, #152]	; (8000ccc <HAL_GPIO_Init+0x4c8>)
 8000c32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c36:	6453      	str	r3, [r2, #68]	; 0x44
 8000c38:	4b24      	ldr	r3, [pc, #144]	; (8000ccc <HAL_GPIO_Init+0x4c8>)
 8000c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c40:	60fb      	str	r3, [r7, #12]
 8000c42:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000c44:	4a22      	ldr	r2, [pc, #136]	; (8000cd0 <HAL_GPIO_Init+0x4cc>)
 8000c46:	69fb      	ldr	r3, [r7, #28]
 8000c48:	089b      	lsrs	r3, r3, #2
 8000c4a:	3302      	adds	r3, #2
 8000c4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000c52:	69fb      	ldr	r3, [r7, #28]
 8000c54:	f003 0303 	and.w	r3, r3, #3
 8000c58:	009b      	lsls	r3, r3, #2
 8000c5a:	220f      	movs	r2, #15
 8000c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c60:	43db      	mvns	r3, r3
 8000c62:	69ba      	ldr	r2, [r7, #24]
 8000c64:	4013      	ands	r3, r2
 8000c66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	4a1a      	ldr	r2, [pc, #104]	; (8000cd4 <HAL_GPIO_Init+0x4d0>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d041      	beq.n	8000cf4 <HAL_GPIO_Init+0x4f0>
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	4a19      	ldr	r2, [pc, #100]	; (8000cd8 <HAL_GPIO_Init+0x4d4>)
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d025      	beq.n	8000cc4 <HAL_GPIO_Init+0x4c0>
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	4a18      	ldr	r2, [pc, #96]	; (8000cdc <HAL_GPIO_Init+0x4d8>)
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	d01f      	beq.n	8000cc0 <HAL_GPIO_Init+0x4bc>
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	4a17      	ldr	r2, [pc, #92]	; (8000ce0 <HAL_GPIO_Init+0x4dc>)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d019      	beq.n	8000cbc <HAL_GPIO_Init+0x4b8>
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	4a16      	ldr	r2, [pc, #88]	; (8000ce4 <HAL_GPIO_Init+0x4e0>)
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d013      	beq.n	8000cb8 <HAL_GPIO_Init+0x4b4>
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	4a15      	ldr	r2, [pc, #84]	; (8000ce8 <HAL_GPIO_Init+0x4e4>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d00d      	beq.n	8000cb4 <HAL_GPIO_Init+0x4b0>
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	4a14      	ldr	r2, [pc, #80]	; (8000cec <HAL_GPIO_Init+0x4e8>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d007      	beq.n	8000cb0 <HAL_GPIO_Init+0x4ac>
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	4a13      	ldr	r2, [pc, #76]	; (8000cf0 <HAL_GPIO_Init+0x4ec>)
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	d101      	bne.n	8000cac <HAL_GPIO_Init+0x4a8>
 8000ca8:	2307      	movs	r3, #7
 8000caa:	e024      	b.n	8000cf6 <HAL_GPIO_Init+0x4f2>
 8000cac:	2308      	movs	r3, #8
 8000cae:	e022      	b.n	8000cf6 <HAL_GPIO_Init+0x4f2>
 8000cb0:	2306      	movs	r3, #6
 8000cb2:	e020      	b.n	8000cf6 <HAL_GPIO_Init+0x4f2>
 8000cb4:	2305      	movs	r3, #5
 8000cb6:	e01e      	b.n	8000cf6 <HAL_GPIO_Init+0x4f2>
 8000cb8:	2304      	movs	r3, #4
 8000cba:	e01c      	b.n	8000cf6 <HAL_GPIO_Init+0x4f2>
 8000cbc:	2303      	movs	r3, #3
 8000cbe:	e01a      	b.n	8000cf6 <HAL_GPIO_Init+0x4f2>
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	e018      	b.n	8000cf6 <HAL_GPIO_Init+0x4f2>
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	e016      	b.n	8000cf6 <HAL_GPIO_Init+0x4f2>
 8000cc8:	08001ce0 	.word	0x08001ce0
 8000ccc:	40023800 	.word	0x40023800
 8000cd0:	40013800 	.word	0x40013800
 8000cd4:	40020000 	.word	0x40020000
 8000cd8:	40020400 	.word	0x40020400
 8000cdc:	40020800 	.word	0x40020800
 8000ce0:	40020c00 	.word	0x40020c00
 8000ce4:	40021000 	.word	0x40021000
 8000ce8:	40021400 	.word	0x40021400
 8000cec:	40021800 	.word	0x40021800
 8000cf0:	40021c00 	.word	0x40021c00
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	69fa      	ldr	r2, [r7, #28]
 8000cf8:	f002 0203 	and.w	r2, r2, #3
 8000cfc:	0092      	lsls	r2, r2, #2
 8000cfe:	4093      	lsls	r3, r2
 8000d00:	69ba      	ldr	r2, [r7, #24]
 8000d02:	4313      	orrs	r3, r2
 8000d04:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d06:	4933      	ldr	r1, [pc, #204]	; (8000dd4 <HAL_GPIO_Init+0x5d0>)
 8000d08:	69fb      	ldr	r3, [r7, #28]
 8000d0a:	089b      	lsrs	r3, r3, #2
 8000d0c:	3302      	adds	r3, #2
 8000d0e:	69ba      	ldr	r2, [r7, #24]
 8000d10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d14:	4b30      	ldr	r3, [pc, #192]	; (8000dd8 <HAL_GPIO_Init+0x5d4>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d1a:	693b      	ldr	r3, [r7, #16]
 8000d1c:	43db      	mvns	r3, r3
 8000d1e:	69ba      	ldr	r2, [r7, #24]
 8000d20:	4013      	ands	r3, r2
 8000d22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d003      	beq.n	8000d38 <HAL_GPIO_Init+0x534>
        {
          temp |= iocurrent;
 8000d30:	69ba      	ldr	r2, [r7, #24]
 8000d32:	693b      	ldr	r3, [r7, #16]
 8000d34:	4313      	orrs	r3, r2
 8000d36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000d38:	4a27      	ldr	r2, [pc, #156]	; (8000dd8 <HAL_GPIO_Init+0x5d4>)
 8000d3a:	69bb      	ldr	r3, [r7, #24]
 8000d3c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000d3e:	4b26      	ldr	r3, [pc, #152]	; (8000dd8 <HAL_GPIO_Init+0x5d4>)
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d44:	693b      	ldr	r3, [r7, #16]
 8000d46:	43db      	mvns	r3, r3
 8000d48:	69ba      	ldr	r2, [r7, #24]
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d003      	beq.n	8000d62 <HAL_GPIO_Init+0x55e>
        {
          temp |= iocurrent;
 8000d5a:	69ba      	ldr	r2, [r7, #24]
 8000d5c:	693b      	ldr	r3, [r7, #16]
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000d62:	4a1d      	ldr	r2, [pc, #116]	; (8000dd8 <HAL_GPIO_Init+0x5d4>)
 8000d64:	69bb      	ldr	r3, [r7, #24]
 8000d66:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d68:	4b1b      	ldr	r3, [pc, #108]	; (8000dd8 <HAL_GPIO_Init+0x5d4>)
 8000d6a:	689b      	ldr	r3, [r3, #8]
 8000d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d6e:	693b      	ldr	r3, [r7, #16]
 8000d70:	43db      	mvns	r3, r3
 8000d72:	69ba      	ldr	r2, [r7, #24]
 8000d74:	4013      	ands	r3, r2
 8000d76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d003      	beq.n	8000d8c <HAL_GPIO_Init+0x588>
        {
          temp |= iocurrent;
 8000d84:	69ba      	ldr	r2, [r7, #24]
 8000d86:	693b      	ldr	r3, [r7, #16]
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000d8c:	4a12      	ldr	r2, [pc, #72]	; (8000dd8 <HAL_GPIO_Init+0x5d4>)
 8000d8e:	69bb      	ldr	r3, [r7, #24]
 8000d90:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d92:	4b11      	ldr	r3, [pc, #68]	; (8000dd8 <HAL_GPIO_Init+0x5d4>)
 8000d94:	68db      	ldr	r3, [r3, #12]
 8000d96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d98:	693b      	ldr	r3, [r7, #16]
 8000d9a:	43db      	mvns	r3, r3
 8000d9c:	69ba      	ldr	r2, [r7, #24]
 8000d9e:	4013      	ands	r3, r2
 8000da0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d003      	beq.n	8000db6 <HAL_GPIO_Init+0x5b2>
        {
          temp |= iocurrent;
 8000dae:	69ba      	ldr	r2, [r7, #24]
 8000db0:	693b      	ldr	r3, [r7, #16]
 8000db2:	4313      	orrs	r3, r2
 8000db4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000db6:	4a08      	ldr	r2, [pc, #32]	; (8000dd8 <HAL_GPIO_Init+0x5d4>)
 8000db8:	69bb      	ldr	r3, [r7, #24]
 8000dba:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	61fb      	str	r3, [r7, #28]
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	2b0f      	cmp	r3, #15
 8000dc6:	f67f adcd 	bls.w	8000964 <HAL_GPIO_Init+0x160>
      }
    }
  }
}
 8000dca:	bf00      	nop
 8000dcc:	3720      	adds	r7, #32
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40013800 	.word	0x40013800
 8000dd8:	40013c00 	.word	0x40013c00

08000ddc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	460b      	mov	r3, r1
 8000de6:	807b      	strh	r3, [r7, #2]
 8000de8:	4613      	mov	r3, r2
 8000dea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8000dec:	887b      	ldrh	r3, [r7, #2]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d004      	beq.n	8000dfc <HAL_GPIO_WritePin+0x20>
 8000df2:	887b      	ldrh	r3, [r7, #2]
 8000df4:	0c1b      	lsrs	r3, r3, #16
 8000df6:	041b      	lsls	r3, r3, #16
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d004      	beq.n	8000e06 <HAL_GPIO_WritePin+0x2a>
 8000dfc:	f240 119f 	movw	r1, #415	; 0x19f
 8000e00:	480e      	ldr	r0, [pc, #56]	; (8000e3c <HAL_GPIO_WritePin+0x60>)
 8000e02:	f000 fe56 	bl	8001ab2 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8000e06:	787b      	ldrb	r3, [r7, #1]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d007      	beq.n	8000e1c <HAL_GPIO_WritePin+0x40>
 8000e0c:	787b      	ldrb	r3, [r7, #1]
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d004      	beq.n	8000e1c <HAL_GPIO_WritePin+0x40>
 8000e12:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8000e16:	4809      	ldr	r0, [pc, #36]	; (8000e3c <HAL_GPIO_WritePin+0x60>)
 8000e18:	f000 fe4b 	bl	8001ab2 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8000e1c:	787b      	ldrb	r3, [r7, #1]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d003      	beq.n	8000e2a <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e22:	887a      	ldrh	r2, [r7, #2]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000e28:	e003      	b.n	8000e32 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000e2a:	887b      	ldrh	r3, [r7, #2]
 8000e2c:	041a      	lsls	r2, r3, #16
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	619a      	str	r2, [r3, #24]
}
 8000e32:	bf00      	nop
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	08001ce0 	.word	0x08001ce0

08000e40 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
 8000e48:	460b      	mov	r3, r1
 8000e4a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8000e4c:	887b      	ldrh	r3, [r7, #2]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d004      	beq.n	8000e5c <HAL_GPIO_TogglePin+0x1c>
 8000e52:	887b      	ldrh	r3, [r7, #2]
 8000e54:	0c1b      	lsrs	r3, r3, #16
 8000e56:	041b      	lsls	r3, r3, #16
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d004      	beq.n	8000e66 <HAL_GPIO_TogglePin+0x26>
 8000e5c:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 8000e60:	480a      	ldr	r0, [pc, #40]	; (8000e8c <HAL_GPIO_TogglePin+0x4c>)
 8000e62:	f000 fe26 	bl	8001ab2 <assert_failed>

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	695a      	ldr	r2, [r3, #20]
 8000e6a:	887b      	ldrh	r3, [r7, #2]
 8000e6c:	401a      	ands	r2, r3
 8000e6e:	887b      	ldrh	r3, [r7, #2]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	d104      	bne.n	8000e7e <HAL_GPIO_TogglePin+0x3e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000e74:	887b      	ldrh	r3, [r7, #2]
 8000e76:	041a      	lsls	r2, r3, #16
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8000e7c:	e002      	b.n	8000e84 <HAL_GPIO_TogglePin+0x44>
    GPIOx->BSRR = GPIO_Pin;
 8000e7e:	887a      	ldrh	r2, [r7, #2]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	619a      	str	r2, [r3, #24]
}
 8000e84:	bf00      	nop
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	08001ce0 	.word	0x08001ce0

08000e90 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d101      	bne.n	8000ea2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e2e0      	b.n	8001464 <HAL_RCC_OscConfig+0x5d4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	2b0f      	cmp	r3, #15
 8000ea8:	d903      	bls.n	8000eb2 <HAL_RCC_OscConfig+0x22>
 8000eaa:	21e8      	movs	r1, #232	; 0xe8
 8000eac:	48a3      	ldr	r0, [pc, #652]	; (800113c <HAL_RCC_OscConfig+0x2ac>)
 8000eae:	f000 fe00 	bl	8001ab2 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f003 0301 	and.w	r3, r3, #1
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	f000 8088 	beq.w	8000fd0 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d00d      	beq.n	8000ee4 <HAL_RCC_OscConfig+0x54>
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ed0:	d008      	beq.n	8000ee4 <HAL_RCC_OscConfig+0x54>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000eda:	d003      	beq.n	8000ee4 <HAL_RCC_OscConfig+0x54>
 8000edc:	21ed      	movs	r1, #237	; 0xed
 8000ede:	4897      	ldr	r0, [pc, #604]	; (800113c <HAL_RCC_OscConfig+0x2ac>)
 8000ee0:	f000 fde7 	bl	8001ab2 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000ee4:	4b96      	ldr	r3, [pc, #600]	; (8001140 <HAL_RCC_OscConfig+0x2b0>)
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	f003 030c 	and.w	r3, r3, #12
 8000eec:	2b04      	cmp	r3, #4
 8000eee:	d00c      	beq.n	8000f0a <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ef0:	4b93      	ldr	r3, [pc, #588]	; (8001140 <HAL_RCC_OscConfig+0x2b0>)
 8000ef2:	689b      	ldr	r3, [r3, #8]
 8000ef4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000ef8:	2b08      	cmp	r3, #8
 8000efa:	d112      	bne.n	8000f22 <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000efc:	4b90      	ldr	r3, [pc, #576]	; (8001140 <HAL_RCC_OscConfig+0x2b0>)
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000f08:	d10b      	bne.n	8000f22 <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f0a:	4b8d      	ldr	r3, [pc, #564]	; (8001140 <HAL_RCC_OscConfig+0x2b0>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d05b      	beq.n	8000fce <HAL_RCC_OscConfig+0x13e>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d157      	bne.n	8000fce <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	e2a0      	b.n	8001464 <HAL_RCC_OscConfig+0x5d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f2a:	d106      	bne.n	8000f3a <HAL_RCC_OscConfig+0xaa>
 8000f2c:	4b84      	ldr	r3, [pc, #528]	; (8001140 <HAL_RCC_OscConfig+0x2b0>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a83      	ldr	r2, [pc, #524]	; (8001140 <HAL_RCC_OscConfig+0x2b0>)
 8000f32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f36:	6013      	str	r3, [r2, #0]
 8000f38:	e01d      	b.n	8000f76 <HAL_RCC_OscConfig+0xe6>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f42:	d10c      	bne.n	8000f5e <HAL_RCC_OscConfig+0xce>
 8000f44:	4b7e      	ldr	r3, [pc, #504]	; (8001140 <HAL_RCC_OscConfig+0x2b0>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a7d      	ldr	r2, [pc, #500]	; (8001140 <HAL_RCC_OscConfig+0x2b0>)
 8000f4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f4e:	6013      	str	r3, [r2, #0]
 8000f50:	4b7b      	ldr	r3, [pc, #492]	; (8001140 <HAL_RCC_OscConfig+0x2b0>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a7a      	ldr	r2, [pc, #488]	; (8001140 <HAL_RCC_OscConfig+0x2b0>)
 8000f56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f5a:	6013      	str	r3, [r2, #0]
 8000f5c:	e00b      	b.n	8000f76 <HAL_RCC_OscConfig+0xe6>
 8000f5e:	4b78      	ldr	r3, [pc, #480]	; (8001140 <HAL_RCC_OscConfig+0x2b0>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a77      	ldr	r2, [pc, #476]	; (8001140 <HAL_RCC_OscConfig+0x2b0>)
 8000f64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f68:	6013      	str	r3, [r2, #0]
 8000f6a:	4b75      	ldr	r3, [pc, #468]	; (8001140 <HAL_RCC_OscConfig+0x2b0>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a74      	ldr	r2, [pc, #464]	; (8001140 <HAL_RCC_OscConfig+0x2b0>)
 8000f70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f74:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d013      	beq.n	8000fa6 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f7e:	f7ff fb09 	bl	8000594 <HAL_GetTick>
 8000f82:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f84:	e008      	b.n	8000f98 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f86:	f7ff fb05 	bl	8000594 <HAL_GetTick>
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	1ad3      	subs	r3, r2, r3
 8000f90:	2b64      	cmp	r3, #100	; 0x64
 8000f92:	d901      	bls.n	8000f98 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8000f94:	2303      	movs	r3, #3
 8000f96:	e265      	b.n	8001464 <HAL_RCC_OscConfig+0x5d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f98:	4b69      	ldr	r3, [pc, #420]	; (8001140 <HAL_RCC_OscConfig+0x2b0>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d0f0      	beq.n	8000f86 <HAL_RCC_OscConfig+0xf6>
 8000fa4:	e014      	b.n	8000fd0 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fa6:	f7ff faf5 	bl	8000594 <HAL_GetTick>
 8000faa:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fac:	e008      	b.n	8000fc0 <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fae:	f7ff faf1 	bl	8000594 <HAL_GetTick>
 8000fb2:	4602      	mov	r2, r0
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	1ad3      	subs	r3, r2, r3
 8000fb8:	2b64      	cmp	r3, #100	; 0x64
 8000fba:	d901      	bls.n	8000fc0 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8000fbc:	2303      	movs	r3, #3
 8000fbe:	e251      	b.n	8001464 <HAL_RCC_OscConfig+0x5d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fc0:	4b5f      	ldr	r3, [pc, #380]	; (8001140 <HAL_RCC_OscConfig+0x2b0>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d1f0      	bne.n	8000fae <HAL_RCC_OscConfig+0x11e>
 8000fcc:	e000      	b.n	8000fd0 <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fce:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f003 0302 	and.w	r3, r3, #2
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d079      	beq.n	80010d0 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d008      	beq.n	8000ff6 <HAL_RCC_OscConfig+0x166>
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d004      	beq.n	8000ff6 <HAL_RCC_OscConfig+0x166>
 8000fec:	f240 111f 	movw	r1, #287	; 0x11f
 8000ff0:	4852      	ldr	r0, [pc, #328]	; (800113c <HAL_RCC_OscConfig+0x2ac>)
 8000ff2:	f000 fd5e 	bl	8001ab2 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	691b      	ldr	r3, [r3, #16]
 8000ffa:	2b1f      	cmp	r3, #31
 8000ffc:	d904      	bls.n	8001008 <HAL_RCC_OscConfig+0x178>
 8000ffe:	f44f 7190 	mov.w	r1, #288	; 0x120
 8001002:	484e      	ldr	r0, [pc, #312]	; (800113c <HAL_RCC_OscConfig+0x2ac>)
 8001004:	f000 fd55 	bl	8001ab2 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001008:	4b4d      	ldr	r3, [pc, #308]	; (8001140 <HAL_RCC_OscConfig+0x2b0>)
 800100a:	689b      	ldr	r3, [r3, #8]
 800100c:	f003 030c 	and.w	r3, r3, #12
 8001010:	2b00      	cmp	r3, #0
 8001012:	d00b      	beq.n	800102c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001014:	4b4a      	ldr	r3, [pc, #296]	; (8001140 <HAL_RCC_OscConfig+0x2b0>)
 8001016:	689b      	ldr	r3, [r3, #8]
 8001018:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800101c:	2b08      	cmp	r3, #8
 800101e:	d11c      	bne.n	800105a <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001020:	4b47      	ldr	r3, [pc, #284]	; (8001140 <HAL_RCC_OscConfig+0x2b0>)
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001028:	2b00      	cmp	r3, #0
 800102a:	d116      	bne.n	800105a <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800102c:	4b44      	ldr	r3, [pc, #272]	; (8001140 <HAL_RCC_OscConfig+0x2b0>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f003 0302 	and.w	r3, r3, #2
 8001034:	2b00      	cmp	r3, #0
 8001036:	d005      	beq.n	8001044 <HAL_RCC_OscConfig+0x1b4>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	2b01      	cmp	r3, #1
 800103e:	d001      	beq.n	8001044 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8001040:	2301      	movs	r3, #1
 8001042:	e20f      	b.n	8001464 <HAL_RCC_OscConfig+0x5d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001044:	4b3e      	ldr	r3, [pc, #248]	; (8001140 <HAL_RCC_OscConfig+0x2b0>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	691b      	ldr	r3, [r3, #16]
 8001050:	00db      	lsls	r3, r3, #3
 8001052:	493b      	ldr	r1, [pc, #236]	; (8001140 <HAL_RCC_OscConfig+0x2b0>)
 8001054:	4313      	orrs	r3, r2
 8001056:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001058:	e03a      	b.n	80010d0 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	68db      	ldr	r3, [r3, #12]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d020      	beq.n	80010a4 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001062:	4b38      	ldr	r3, [pc, #224]	; (8001144 <HAL_RCC_OscConfig+0x2b4>)
 8001064:	2201      	movs	r2, #1
 8001066:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001068:	f7ff fa94 	bl	8000594 <HAL_GetTick>
 800106c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800106e:	e008      	b.n	8001082 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001070:	f7ff fa90 	bl	8000594 <HAL_GetTick>
 8001074:	4602      	mov	r2, r0
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	2b02      	cmp	r3, #2
 800107c:	d901      	bls.n	8001082 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800107e:	2303      	movs	r3, #3
 8001080:	e1f0      	b.n	8001464 <HAL_RCC_OscConfig+0x5d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001082:	4b2f      	ldr	r3, [pc, #188]	; (8001140 <HAL_RCC_OscConfig+0x2b0>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f003 0302 	and.w	r3, r3, #2
 800108a:	2b00      	cmp	r3, #0
 800108c:	d0f0      	beq.n	8001070 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800108e:	4b2c      	ldr	r3, [pc, #176]	; (8001140 <HAL_RCC_OscConfig+0x2b0>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	691b      	ldr	r3, [r3, #16]
 800109a:	00db      	lsls	r3, r3, #3
 800109c:	4928      	ldr	r1, [pc, #160]	; (8001140 <HAL_RCC_OscConfig+0x2b0>)
 800109e:	4313      	orrs	r3, r2
 80010a0:	600b      	str	r3, [r1, #0]
 80010a2:	e015      	b.n	80010d0 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010a4:	4b27      	ldr	r3, [pc, #156]	; (8001144 <HAL_RCC_OscConfig+0x2b4>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010aa:	f7ff fa73 	bl	8000594 <HAL_GetTick>
 80010ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010b0:	e008      	b.n	80010c4 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010b2:	f7ff fa6f 	bl	8000594 <HAL_GetTick>
 80010b6:	4602      	mov	r2, r0
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	1ad3      	subs	r3, r2, r3
 80010bc:	2b02      	cmp	r3, #2
 80010be:	d901      	bls.n	80010c4 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 80010c0:	2303      	movs	r3, #3
 80010c2:	e1cf      	b.n	8001464 <HAL_RCC_OscConfig+0x5d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010c4:	4b1e      	ldr	r3, [pc, #120]	; (8001140 <HAL_RCC_OscConfig+0x2b0>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f003 0302 	and.w	r3, r3, #2
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d1f0      	bne.n	80010b2 <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f003 0308 	and.w	r3, r3, #8
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d046      	beq.n	800116a <HAL_RCC_OscConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	695b      	ldr	r3, [r3, #20]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d008      	beq.n	80010f6 <HAL_RCC_OscConfig+0x266>
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	695b      	ldr	r3, [r3, #20]
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d004      	beq.n	80010f6 <HAL_RCC_OscConfig+0x266>
 80010ec:	f44f 71b0 	mov.w	r1, #352	; 0x160
 80010f0:	4812      	ldr	r0, [pc, #72]	; (800113c <HAL_RCC_OscConfig+0x2ac>)
 80010f2:	f000 fcde 	bl	8001ab2 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	695b      	ldr	r3, [r3, #20]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d016      	beq.n	800112c <HAL_RCC_OscConfig+0x29c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010fe:	4b12      	ldr	r3, [pc, #72]	; (8001148 <HAL_RCC_OscConfig+0x2b8>)
 8001100:	2201      	movs	r2, #1
 8001102:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001104:	f7ff fa46 	bl	8000594 <HAL_GetTick>
 8001108:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800110a:	e008      	b.n	800111e <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800110c:	f7ff fa42 	bl	8000594 <HAL_GetTick>
 8001110:	4602      	mov	r2, r0
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	2b02      	cmp	r3, #2
 8001118:	d901      	bls.n	800111e <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 800111a:	2303      	movs	r3, #3
 800111c:	e1a2      	b.n	8001464 <HAL_RCC_OscConfig+0x5d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800111e:	4b08      	ldr	r3, [pc, #32]	; (8001140 <HAL_RCC_OscConfig+0x2b0>)
 8001120:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001122:	f003 0302 	and.w	r3, r3, #2
 8001126:	2b00      	cmp	r3, #0
 8001128:	d0f0      	beq.n	800110c <HAL_RCC_OscConfig+0x27c>
 800112a:	e01e      	b.n	800116a <HAL_RCC_OscConfig+0x2da>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800112c:	4b06      	ldr	r3, [pc, #24]	; (8001148 <HAL_RCC_OscConfig+0x2b8>)
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001132:	f7ff fa2f 	bl	8000594 <HAL_GetTick>
 8001136:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001138:	e011      	b.n	800115e <HAL_RCC_OscConfig+0x2ce>
 800113a:	bf00      	nop
 800113c:	08001d1c 	.word	0x08001d1c
 8001140:	40023800 	.word	0x40023800
 8001144:	42470000 	.word	0x42470000
 8001148:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800114c:	f7ff fa22 	bl	8000594 <HAL_GetTick>
 8001150:	4602      	mov	r2, r0
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	2b02      	cmp	r3, #2
 8001158:	d901      	bls.n	800115e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800115a:	2303      	movs	r3, #3
 800115c:	e182      	b.n	8001464 <HAL_RCC_OscConfig+0x5d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800115e:	4b97      	ldr	r3, [pc, #604]	; (80013bc <HAL_RCC_OscConfig+0x52c>)
 8001160:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001162:	f003 0302 	and.w	r3, r3, #2
 8001166:	2b00      	cmp	r3, #0
 8001168:	d1f0      	bne.n	800114c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 0304 	and.w	r3, r3, #4
 8001172:	2b00      	cmp	r3, #0
 8001174:	f000 80a8 	beq.w	80012c8 <HAL_RCC_OscConfig+0x438>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001178:	2300      	movs	r3, #0
 800117a:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d00c      	beq.n	800119e <HAL_RCC_OscConfig+0x30e>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	2b01      	cmp	r3, #1
 800118a:	d008      	beq.n	800119e <HAL_RCC_OscConfig+0x30e>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	2b05      	cmp	r3, #5
 8001192:	d004      	beq.n	800119e <HAL_RCC_OscConfig+0x30e>
 8001194:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8001198:	4889      	ldr	r0, [pc, #548]	; (80013c0 <HAL_RCC_OscConfig+0x530>)
 800119a:	f000 fc8a 	bl	8001ab2 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800119e:	4b87      	ldr	r3, [pc, #540]	; (80013bc <HAL_RCC_OscConfig+0x52c>)
 80011a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d10f      	bne.n	80011ca <HAL_RCC_OscConfig+0x33a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	60fb      	str	r3, [r7, #12]
 80011ae:	4b83      	ldr	r3, [pc, #524]	; (80013bc <HAL_RCC_OscConfig+0x52c>)
 80011b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b2:	4a82      	ldr	r2, [pc, #520]	; (80013bc <HAL_RCC_OscConfig+0x52c>)
 80011b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011b8:	6413      	str	r3, [r2, #64]	; 0x40
 80011ba:	4b80      	ldr	r3, [pc, #512]	; (80013bc <HAL_RCC_OscConfig+0x52c>)
 80011bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80011c6:	2301      	movs	r3, #1
 80011c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011ca:	4b7e      	ldr	r3, [pc, #504]	; (80013c4 <HAL_RCC_OscConfig+0x534>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d118      	bne.n	8001208 <HAL_RCC_OscConfig+0x378>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011d6:	4b7b      	ldr	r3, [pc, #492]	; (80013c4 <HAL_RCC_OscConfig+0x534>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a7a      	ldr	r2, [pc, #488]	; (80013c4 <HAL_RCC_OscConfig+0x534>)
 80011dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011e2:	f7ff f9d7 	bl	8000594 <HAL_GetTick>
 80011e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011e8:	e008      	b.n	80011fc <HAL_RCC_OscConfig+0x36c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011ea:	f7ff f9d3 	bl	8000594 <HAL_GetTick>
 80011ee:	4602      	mov	r2, r0
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	1ad3      	subs	r3, r2, r3
 80011f4:	2b02      	cmp	r3, #2
 80011f6:	d901      	bls.n	80011fc <HAL_RCC_OscConfig+0x36c>
        {
          return HAL_TIMEOUT;
 80011f8:	2303      	movs	r3, #3
 80011fa:	e133      	b.n	8001464 <HAL_RCC_OscConfig+0x5d4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011fc:	4b71      	ldr	r3, [pc, #452]	; (80013c4 <HAL_RCC_OscConfig+0x534>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001204:	2b00      	cmp	r3, #0
 8001206:	d0f0      	beq.n	80011ea <HAL_RCC_OscConfig+0x35a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	2b01      	cmp	r3, #1
 800120e:	d106      	bne.n	800121e <HAL_RCC_OscConfig+0x38e>
 8001210:	4b6a      	ldr	r3, [pc, #424]	; (80013bc <HAL_RCC_OscConfig+0x52c>)
 8001212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001214:	4a69      	ldr	r2, [pc, #420]	; (80013bc <HAL_RCC_OscConfig+0x52c>)
 8001216:	f043 0301 	orr.w	r3, r3, #1
 800121a:	6713      	str	r3, [r2, #112]	; 0x70
 800121c:	e01c      	b.n	8001258 <HAL_RCC_OscConfig+0x3c8>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	2b05      	cmp	r3, #5
 8001224:	d10c      	bne.n	8001240 <HAL_RCC_OscConfig+0x3b0>
 8001226:	4b65      	ldr	r3, [pc, #404]	; (80013bc <HAL_RCC_OscConfig+0x52c>)
 8001228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800122a:	4a64      	ldr	r2, [pc, #400]	; (80013bc <HAL_RCC_OscConfig+0x52c>)
 800122c:	f043 0304 	orr.w	r3, r3, #4
 8001230:	6713      	str	r3, [r2, #112]	; 0x70
 8001232:	4b62      	ldr	r3, [pc, #392]	; (80013bc <HAL_RCC_OscConfig+0x52c>)
 8001234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001236:	4a61      	ldr	r2, [pc, #388]	; (80013bc <HAL_RCC_OscConfig+0x52c>)
 8001238:	f043 0301 	orr.w	r3, r3, #1
 800123c:	6713      	str	r3, [r2, #112]	; 0x70
 800123e:	e00b      	b.n	8001258 <HAL_RCC_OscConfig+0x3c8>
 8001240:	4b5e      	ldr	r3, [pc, #376]	; (80013bc <HAL_RCC_OscConfig+0x52c>)
 8001242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001244:	4a5d      	ldr	r2, [pc, #372]	; (80013bc <HAL_RCC_OscConfig+0x52c>)
 8001246:	f023 0301 	bic.w	r3, r3, #1
 800124a:	6713      	str	r3, [r2, #112]	; 0x70
 800124c:	4b5b      	ldr	r3, [pc, #364]	; (80013bc <HAL_RCC_OscConfig+0x52c>)
 800124e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001250:	4a5a      	ldr	r2, [pc, #360]	; (80013bc <HAL_RCC_OscConfig+0x52c>)
 8001252:	f023 0304 	bic.w	r3, r3, #4
 8001256:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d015      	beq.n	800128c <HAL_RCC_OscConfig+0x3fc>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001260:	f7ff f998 	bl	8000594 <HAL_GetTick>
 8001264:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001266:	e00a      	b.n	800127e <HAL_RCC_OscConfig+0x3ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001268:	f7ff f994 	bl	8000594 <HAL_GetTick>
 800126c:	4602      	mov	r2, r0
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	f241 3288 	movw	r2, #5000	; 0x1388
 8001276:	4293      	cmp	r3, r2
 8001278:	d901      	bls.n	800127e <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 800127a:	2303      	movs	r3, #3
 800127c:	e0f2      	b.n	8001464 <HAL_RCC_OscConfig+0x5d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800127e:	4b4f      	ldr	r3, [pc, #316]	; (80013bc <HAL_RCC_OscConfig+0x52c>)
 8001280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001282:	f003 0302 	and.w	r3, r3, #2
 8001286:	2b00      	cmp	r3, #0
 8001288:	d0ee      	beq.n	8001268 <HAL_RCC_OscConfig+0x3d8>
 800128a:	e014      	b.n	80012b6 <HAL_RCC_OscConfig+0x426>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800128c:	f7ff f982 	bl	8000594 <HAL_GetTick>
 8001290:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001292:	e00a      	b.n	80012aa <HAL_RCC_OscConfig+0x41a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001294:	f7ff f97e 	bl	8000594 <HAL_GetTick>
 8001298:	4602      	mov	r2, r0
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	f241 3288 	movw	r2, #5000	; 0x1388
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d901      	bls.n	80012aa <HAL_RCC_OscConfig+0x41a>
        {
          return HAL_TIMEOUT;
 80012a6:	2303      	movs	r3, #3
 80012a8:	e0dc      	b.n	8001464 <HAL_RCC_OscConfig+0x5d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012aa:	4b44      	ldr	r3, [pc, #272]	; (80013bc <HAL_RCC_OscConfig+0x52c>)
 80012ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d1ee      	bne.n	8001294 <HAL_RCC_OscConfig+0x404>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80012b6:	7dfb      	ldrb	r3, [r7, #23]
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d105      	bne.n	80012c8 <HAL_RCC_OscConfig+0x438>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012bc:	4b3f      	ldr	r3, [pc, #252]	; (80013bc <HAL_RCC_OscConfig+0x52c>)
 80012be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c0:	4a3e      	ldr	r2, [pc, #248]	; (80013bc <HAL_RCC_OscConfig+0x52c>)
 80012c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012c6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d00c      	beq.n	80012ea <HAL_RCC_OscConfig+0x45a>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	699b      	ldr	r3, [r3, #24]
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d008      	beq.n	80012ea <HAL_RCC_OscConfig+0x45a>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	699b      	ldr	r3, [r3, #24]
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d004      	beq.n	80012ea <HAL_RCC_OscConfig+0x45a>
 80012e0:	f240 11cf 	movw	r1, #463	; 0x1cf
 80012e4:	4836      	ldr	r0, [pc, #216]	; (80013c0 <HAL_RCC_OscConfig+0x530>)
 80012e6:	f000 fbe4 	bl	8001ab2 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	699b      	ldr	r3, [r3, #24]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	f000 80b7 	beq.w	8001462 <HAL_RCC_OscConfig+0x5d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80012f4:	4b31      	ldr	r3, [pc, #196]	; (80013bc <HAL_RCC_OscConfig+0x52c>)
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	f003 030c 	and.w	r3, r3, #12
 80012fc:	2b08      	cmp	r3, #8
 80012fe:	f000 80ae 	beq.w	800145e <HAL_RCC_OscConfig+0x5ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	699b      	ldr	r3, [r3, #24]
 8001306:	2b02      	cmp	r3, #2
 8001308:	f040 8092 	bne.w	8001430 <HAL_RCC_OscConfig+0x5a0>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	69db      	ldr	r3, [r3, #28]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d009      	beq.n	8001328 <HAL_RCC_OscConfig+0x498>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	69db      	ldr	r3, [r3, #28]
 8001318:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800131c:	d004      	beq.n	8001328 <HAL_RCC_OscConfig+0x498>
 800131e:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8001322:	4827      	ldr	r0, [pc, #156]	; (80013c0 <HAL_RCC_OscConfig+0x530>)
 8001324:	f000 fbc5 	bl	8001ab2 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6a1b      	ldr	r3, [r3, #32]
 800132c:	2b3f      	cmp	r3, #63	; 0x3f
 800132e:	d904      	bls.n	800133a <HAL_RCC_OscConfig+0x4aa>
 8001330:	f240 11d9 	movw	r1, #473	; 0x1d9
 8001334:	4822      	ldr	r0, [pc, #136]	; (80013c0 <HAL_RCC_OscConfig+0x530>)
 8001336:	f000 fbbc 	bl	8001ab2 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800133e:	2b31      	cmp	r3, #49	; 0x31
 8001340:	d904      	bls.n	800134c <HAL_RCC_OscConfig+0x4bc>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001346:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 800134a:	d904      	bls.n	8001356 <HAL_RCC_OscConfig+0x4c6>
 800134c:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8001350:	481b      	ldr	r0, [pc, #108]	; (80013c0 <HAL_RCC_OscConfig+0x530>)
 8001352:	f000 fbae 	bl	8001ab2 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800135a:	2b02      	cmp	r3, #2
 800135c:	d010      	beq.n	8001380 <HAL_RCC_OscConfig+0x4f0>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001362:	2b04      	cmp	r3, #4
 8001364:	d00c      	beq.n	8001380 <HAL_RCC_OscConfig+0x4f0>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800136a:	2b06      	cmp	r3, #6
 800136c:	d008      	beq.n	8001380 <HAL_RCC_OscConfig+0x4f0>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001372:	2b08      	cmp	r3, #8
 8001374:	d004      	beq.n	8001380 <HAL_RCC_OscConfig+0x4f0>
 8001376:	f240 11db 	movw	r1, #475	; 0x1db
 800137a:	4811      	ldr	r0, [pc, #68]	; (80013c0 <HAL_RCC_OscConfig+0x530>)
 800137c:	f000 fb99 	bl	8001ab2 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001384:	2b01      	cmp	r3, #1
 8001386:	d903      	bls.n	8001390 <HAL_RCC_OscConfig+0x500>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800138c:	2b0f      	cmp	r3, #15
 800138e:	d904      	bls.n	800139a <HAL_RCC_OscConfig+0x50a>
 8001390:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8001394:	480a      	ldr	r0, [pc, #40]	; (80013c0 <HAL_RCC_OscConfig+0x530>)
 8001396:	f000 fb8c 	bl	8001ab2 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800139a:	4b0b      	ldr	r3, [pc, #44]	; (80013c8 <HAL_RCC_OscConfig+0x538>)
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a0:	f7ff f8f8 	bl	8000594 <HAL_GetTick>
 80013a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013a6:	e011      	b.n	80013cc <HAL_RCC_OscConfig+0x53c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013a8:	f7ff f8f4 	bl	8000594 <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d90a      	bls.n	80013cc <HAL_RCC_OscConfig+0x53c>
          {
            return HAL_TIMEOUT;
 80013b6:	2303      	movs	r3, #3
 80013b8:	e054      	b.n	8001464 <HAL_RCC_OscConfig+0x5d4>
 80013ba:	bf00      	nop
 80013bc:	40023800 	.word	0x40023800
 80013c0:	08001d1c 	.word	0x08001d1c
 80013c4:	40007000 	.word	0x40007000
 80013c8:	42470060 	.word	0x42470060
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013cc:	4b27      	ldr	r3, [pc, #156]	; (800146c <HAL_RCC_OscConfig+0x5dc>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d1e7      	bne.n	80013a8 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	69da      	ldr	r2, [r3, #28]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6a1b      	ldr	r3, [r3, #32]
 80013e0:	431a      	orrs	r2, r3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e6:	019b      	lsls	r3, r3, #6
 80013e8:	431a      	orrs	r2, r3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ee:	085b      	lsrs	r3, r3, #1
 80013f0:	3b01      	subs	r3, #1
 80013f2:	041b      	lsls	r3, r3, #16
 80013f4:	431a      	orrs	r2, r3
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013fa:	061b      	lsls	r3, r3, #24
 80013fc:	491b      	ldr	r1, [pc, #108]	; (800146c <HAL_RCC_OscConfig+0x5dc>)
 80013fe:	4313      	orrs	r3, r2
 8001400:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001402:	4b1b      	ldr	r3, [pc, #108]	; (8001470 <HAL_RCC_OscConfig+0x5e0>)
 8001404:	2201      	movs	r2, #1
 8001406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001408:	f7ff f8c4 	bl	8000594 <HAL_GetTick>
 800140c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800140e:	e008      	b.n	8001422 <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001410:	f7ff f8c0 	bl	8000594 <HAL_GetTick>
 8001414:	4602      	mov	r2, r0
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	2b02      	cmp	r3, #2
 800141c:	d901      	bls.n	8001422 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800141e:	2303      	movs	r3, #3
 8001420:	e020      	b.n	8001464 <HAL_RCC_OscConfig+0x5d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001422:	4b12      	ldr	r3, [pc, #72]	; (800146c <HAL_RCC_OscConfig+0x5dc>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d0f0      	beq.n	8001410 <HAL_RCC_OscConfig+0x580>
 800142e:	e018      	b.n	8001462 <HAL_RCC_OscConfig+0x5d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001430:	4b0f      	ldr	r3, [pc, #60]	; (8001470 <HAL_RCC_OscConfig+0x5e0>)
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001436:	f7ff f8ad 	bl	8000594 <HAL_GetTick>
 800143a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800143c:	e008      	b.n	8001450 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800143e:	f7ff f8a9 	bl	8000594 <HAL_GetTick>
 8001442:	4602      	mov	r2, r0
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	2b02      	cmp	r3, #2
 800144a:	d901      	bls.n	8001450 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 800144c:	2303      	movs	r3, #3
 800144e:	e009      	b.n	8001464 <HAL_RCC_OscConfig+0x5d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001450:	4b06      	ldr	r3, [pc, #24]	; (800146c <HAL_RCC_OscConfig+0x5dc>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001458:	2b00      	cmp	r3, #0
 800145a:	d1f0      	bne.n	800143e <HAL_RCC_OscConfig+0x5ae>
 800145c:	e001      	b.n	8001462 <HAL_RCC_OscConfig+0x5d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e000      	b.n	8001464 <HAL_RCC_OscConfig+0x5d4>
    }
  }
  return HAL_OK;
 8001462:	2300      	movs	r3, #0
}
 8001464:	4618      	mov	r0, r3
 8001466:	3718      	adds	r7, #24
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	40023800 	.word	0x40023800
 8001470:	42470060 	.word	0x42470060

08001474 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d101      	bne.n	8001488 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	e172      	b.n	800176e <HAL_RCC_ClockConfig+0x2fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d003      	beq.n	8001498 <HAL_RCC_ClockConfig+0x24>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2b0f      	cmp	r3, #15
 8001496:	d904      	bls.n	80014a2 <HAL_RCC_ClockConfig+0x2e>
 8001498:	f44f 7110 	mov.w	r1, #576	; 0x240
 800149c:	487b      	ldr	r0, [pc, #492]	; (800168c <HAL_RCC_ClockConfig+0x218>)
 800149e:	f000 fb08 	bl	8001ab2 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d019      	beq.n	80014dc <HAL_RCC_ClockConfig+0x68>
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d016      	beq.n	80014dc <HAL_RCC_ClockConfig+0x68>
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d013      	beq.n	80014dc <HAL_RCC_ClockConfig+0x68>
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	2b03      	cmp	r3, #3
 80014b8:	d010      	beq.n	80014dc <HAL_RCC_ClockConfig+0x68>
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	2b04      	cmp	r3, #4
 80014be:	d00d      	beq.n	80014dc <HAL_RCC_ClockConfig+0x68>
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	2b05      	cmp	r3, #5
 80014c4:	d00a      	beq.n	80014dc <HAL_RCC_ClockConfig+0x68>
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	2b06      	cmp	r3, #6
 80014ca:	d007      	beq.n	80014dc <HAL_RCC_ClockConfig+0x68>
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	2b07      	cmp	r3, #7
 80014d0:	d004      	beq.n	80014dc <HAL_RCC_ClockConfig+0x68>
 80014d2:	f240 2141 	movw	r1, #577	; 0x241
 80014d6:	486d      	ldr	r0, [pc, #436]	; (800168c <HAL_RCC_ClockConfig+0x218>)
 80014d8:	f000 faeb 	bl	8001ab2 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014dc:	4b6c      	ldr	r3, [pc, #432]	; (8001690 <HAL_RCC_ClockConfig+0x21c>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f003 030f 	and.w	r3, r3, #15
 80014e4:	683a      	ldr	r2, [r7, #0]
 80014e6:	429a      	cmp	r2, r3
 80014e8:	d90c      	bls.n	8001504 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014ea:	4b69      	ldr	r3, [pc, #420]	; (8001690 <HAL_RCC_ClockConfig+0x21c>)
 80014ec:	683a      	ldr	r2, [r7, #0]
 80014ee:	b2d2      	uxtb	r2, r2
 80014f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014f2:	4b67      	ldr	r3, [pc, #412]	; (8001690 <HAL_RCC_ClockConfig+0x21c>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 030f 	and.w	r3, r3, #15
 80014fa:	683a      	ldr	r2, [r7, #0]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d001      	beq.n	8001504 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 8001500:	2301      	movs	r3, #1
 8001502:	e134      	b.n	800176e <HAL_RCC_ClockConfig+0x2fa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 0302 	and.w	r3, r3, #2
 800150c:	2b00      	cmp	r3, #0
 800150e:	d049      	beq.n	80015a4 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 0304 	and.w	r3, r3, #4
 8001518:	2b00      	cmp	r3, #0
 800151a:	d005      	beq.n	8001528 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800151c:	4b5d      	ldr	r3, [pc, #372]	; (8001694 <HAL_RCC_ClockConfig+0x220>)
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	4a5c      	ldr	r2, [pc, #368]	; (8001694 <HAL_RCC_ClockConfig+0x220>)
 8001522:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001526:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 0308 	and.w	r3, r3, #8
 8001530:	2b00      	cmp	r3, #0
 8001532:	d005      	beq.n	8001540 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001534:	4b57      	ldr	r3, [pc, #348]	; (8001694 <HAL_RCC_ClockConfig+0x220>)
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	4a56      	ldr	r2, [pc, #344]	; (8001694 <HAL_RCC_ClockConfig+0x220>)
 800153a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800153e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d024      	beq.n	8001592 <HAL_RCC_ClockConfig+0x11e>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	2b80      	cmp	r3, #128	; 0x80
 800154e:	d020      	beq.n	8001592 <HAL_RCC_ClockConfig+0x11e>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	2b90      	cmp	r3, #144	; 0x90
 8001556:	d01c      	beq.n	8001592 <HAL_RCC_ClockConfig+0x11e>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	2ba0      	cmp	r3, #160	; 0xa0
 800155e:	d018      	beq.n	8001592 <HAL_RCC_ClockConfig+0x11e>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	2bb0      	cmp	r3, #176	; 0xb0
 8001566:	d014      	beq.n	8001592 <HAL_RCC_ClockConfig+0x11e>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	2bc0      	cmp	r3, #192	; 0xc0
 800156e:	d010      	beq.n	8001592 <HAL_RCC_ClockConfig+0x11e>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	2bd0      	cmp	r3, #208	; 0xd0
 8001576:	d00c      	beq.n	8001592 <HAL_RCC_ClockConfig+0x11e>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	2be0      	cmp	r3, #224	; 0xe0
 800157e:	d008      	beq.n	8001592 <HAL_RCC_ClockConfig+0x11e>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	2bf0      	cmp	r3, #240	; 0xf0
 8001586:	d004      	beq.n	8001592 <HAL_RCC_ClockConfig+0x11e>
 8001588:	f44f 7119 	mov.w	r1, #612	; 0x264
 800158c:	483f      	ldr	r0, [pc, #252]	; (800168c <HAL_RCC_ClockConfig+0x218>)
 800158e:	f000 fa90 	bl	8001ab2 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001592:	4b40      	ldr	r3, [pc, #256]	; (8001694 <HAL_RCC_ClockConfig+0x220>)
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	493d      	ldr	r1, [pc, #244]	; (8001694 <HAL_RCC_ClockConfig+0x220>)
 80015a0:	4313      	orrs	r3, r2
 80015a2:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 0301 	and.w	r3, r3, #1
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d059      	beq.n	8001664 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d010      	beq.n	80015da <HAL_RCC_ClockConfig+0x166>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d00c      	beq.n	80015da <HAL_RCC_ClockConfig+0x166>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d008      	beq.n	80015da <HAL_RCC_ClockConfig+0x166>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	2b03      	cmp	r3, #3
 80015ce:	d004      	beq.n	80015da <HAL_RCC_ClockConfig+0x166>
 80015d0:	f240 216b 	movw	r1, #619	; 0x26b
 80015d4:	482d      	ldr	r0, [pc, #180]	; (800168c <HAL_RCC_ClockConfig+0x218>)
 80015d6:	f000 fa6c 	bl	8001ab2 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d107      	bne.n	80015f2 <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015e2:	4b2c      	ldr	r3, [pc, #176]	; (8001694 <HAL_RCC_ClockConfig+0x220>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d119      	bne.n	8001622 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e0bd      	b.n	800176e <HAL_RCC_ClockConfig+0x2fa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d003      	beq.n	8001602 <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015fe:	2b03      	cmp	r3, #3
 8001600:	d107      	bne.n	8001612 <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001602:	4b24      	ldr	r3, [pc, #144]	; (8001694 <HAL_RCC_ClockConfig+0x220>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d109      	bne.n	8001622 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e0ad      	b.n	800176e <HAL_RCC_ClockConfig+0x2fa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001612:	4b20      	ldr	r3, [pc, #128]	; (8001694 <HAL_RCC_ClockConfig+0x220>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0302 	and.w	r3, r3, #2
 800161a:	2b00      	cmp	r3, #0
 800161c:	d101      	bne.n	8001622 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e0a5      	b.n	800176e <HAL_RCC_ClockConfig+0x2fa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001622:	4b1c      	ldr	r3, [pc, #112]	; (8001694 <HAL_RCC_ClockConfig+0x220>)
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	f023 0203 	bic.w	r2, r3, #3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	4919      	ldr	r1, [pc, #100]	; (8001694 <HAL_RCC_ClockConfig+0x220>)
 8001630:	4313      	orrs	r3, r2
 8001632:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001634:	f7fe ffae 	bl	8000594 <HAL_GetTick>
 8001638:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800163a:	e00a      	b.n	8001652 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800163c:	f7fe ffaa 	bl	8000594 <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	f241 3288 	movw	r2, #5000	; 0x1388
 800164a:	4293      	cmp	r3, r2
 800164c:	d901      	bls.n	8001652 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e08d      	b.n	800176e <HAL_RCC_ClockConfig+0x2fa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001652:	4b10      	ldr	r3, [pc, #64]	; (8001694 <HAL_RCC_ClockConfig+0x220>)
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	f003 020c 	and.w	r2, r3, #12
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	429a      	cmp	r2, r3
 8001662:	d1eb      	bne.n	800163c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001664:	4b0a      	ldr	r3, [pc, #40]	; (8001690 <HAL_RCC_ClockConfig+0x21c>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 030f 	and.w	r3, r3, #15
 800166c:	683a      	ldr	r2, [r7, #0]
 800166e:	429a      	cmp	r2, r3
 8001670:	d212      	bcs.n	8001698 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001672:	4b07      	ldr	r3, [pc, #28]	; (8001690 <HAL_RCC_ClockConfig+0x21c>)
 8001674:	683a      	ldr	r2, [r7, #0]
 8001676:	b2d2      	uxtb	r2, r2
 8001678:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800167a:	4b05      	ldr	r3, [pc, #20]	; (8001690 <HAL_RCC_ClockConfig+0x21c>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 030f 	and.w	r3, r3, #15
 8001682:	683a      	ldr	r2, [r7, #0]
 8001684:	429a      	cmp	r2, r3
 8001686:	d007      	beq.n	8001698 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e070      	b.n	800176e <HAL_RCC_ClockConfig+0x2fa>
 800168c:	08001d1c 	.word	0x08001d1c
 8001690:	40023c00 	.word	0x40023c00
 8001694:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0304 	and.w	r3, r3, #4
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d025      	beq.n	80016f0 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d018      	beq.n	80016de <HAL_RCC_ClockConfig+0x26a>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016b4:	d013      	beq.n	80016de <HAL_RCC_ClockConfig+0x26a>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	68db      	ldr	r3, [r3, #12]
 80016ba:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80016be:	d00e      	beq.n	80016de <HAL_RCC_ClockConfig+0x26a>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80016c8:	d009      	beq.n	80016de <HAL_RCC_ClockConfig+0x26a>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	68db      	ldr	r3, [r3, #12]
 80016ce:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80016d2:	d004      	beq.n	80016de <HAL_RCC_ClockConfig+0x26a>
 80016d4:	f240 21a9 	movw	r1, #681	; 0x2a9
 80016d8:	4827      	ldr	r0, [pc, #156]	; (8001778 <HAL_RCC_ClockConfig+0x304>)
 80016da:	f000 f9ea 	bl	8001ab2 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016de:	4b27      	ldr	r3, [pc, #156]	; (800177c <HAL_RCC_ClockConfig+0x308>)
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	68db      	ldr	r3, [r3, #12]
 80016ea:	4924      	ldr	r1, [pc, #144]	; (800177c <HAL_RCC_ClockConfig+0x308>)
 80016ec:	4313      	orrs	r3, r2
 80016ee:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 0308 	and.w	r3, r3, #8
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d026      	beq.n	800174a <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	691b      	ldr	r3, [r3, #16]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d018      	beq.n	8001736 <HAL_RCC_ClockConfig+0x2c2>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	691b      	ldr	r3, [r3, #16]
 8001708:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800170c:	d013      	beq.n	8001736 <HAL_RCC_ClockConfig+0x2c2>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	691b      	ldr	r3, [r3, #16]
 8001712:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8001716:	d00e      	beq.n	8001736 <HAL_RCC_ClockConfig+0x2c2>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	691b      	ldr	r3, [r3, #16]
 800171c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8001720:	d009      	beq.n	8001736 <HAL_RCC_ClockConfig+0x2c2>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	691b      	ldr	r3, [r3, #16]
 8001726:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800172a:	d004      	beq.n	8001736 <HAL_RCC_ClockConfig+0x2c2>
 800172c:	f44f 712c 	mov.w	r1, #688	; 0x2b0
 8001730:	4811      	ldr	r0, [pc, #68]	; (8001778 <HAL_RCC_ClockConfig+0x304>)
 8001732:	f000 f9be 	bl	8001ab2 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001736:	4b11      	ldr	r3, [pc, #68]	; (800177c <HAL_RCC_ClockConfig+0x308>)
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	691b      	ldr	r3, [r3, #16]
 8001742:	00db      	lsls	r3, r3, #3
 8001744:	490d      	ldr	r1, [pc, #52]	; (800177c <HAL_RCC_ClockConfig+0x308>)
 8001746:	4313      	orrs	r3, r2
 8001748:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800174a:	f000 f81d 	bl	8001788 <HAL_RCC_GetSysClockFreq>
 800174e:	4601      	mov	r1, r0
 8001750:	4b0a      	ldr	r3, [pc, #40]	; (800177c <HAL_RCC_ClockConfig+0x308>)
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	091b      	lsrs	r3, r3, #4
 8001756:	f003 030f 	and.w	r3, r3, #15
 800175a:	4a09      	ldr	r2, [pc, #36]	; (8001780 <HAL_RCC_ClockConfig+0x30c>)
 800175c:	5cd3      	ldrb	r3, [r2, r3]
 800175e:	fa21 f303 	lsr.w	r3, r1, r3
 8001762:	4a08      	ldr	r2, [pc, #32]	; (8001784 <HAL_RCC_ClockConfig+0x310>)
 8001764:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8001766:	2000      	movs	r0, #0
 8001768:	f7fe fed0 	bl	800050c <HAL_InitTick>

  return HAL_OK;
 800176c:	2300      	movs	r3, #0
}
 800176e:	4618      	mov	r0, r3
 8001770:	3710      	adds	r7, #16
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	08001d1c 	.word	0x08001d1c
 800177c:	40023800 	.word	0x40023800
 8001780:	08001d54 	.word	0x08001d54
 8001784:	20000008 	.word	0x20000008

08001788 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001788:	b5f0      	push	{r4, r5, r6, r7, lr}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800178e:	2300      	movs	r3, #0
 8001790:	607b      	str	r3, [r7, #4]
 8001792:	2300      	movs	r3, #0
 8001794:	60fb      	str	r3, [r7, #12]
 8001796:	2300      	movs	r3, #0
 8001798:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800179a:	2300      	movs	r3, #0
 800179c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800179e:	4b50      	ldr	r3, [pc, #320]	; (80018e0 <HAL_RCC_GetSysClockFreq+0x158>)
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	f003 030c 	and.w	r3, r3, #12
 80017a6:	2b04      	cmp	r3, #4
 80017a8:	d007      	beq.n	80017ba <HAL_RCC_GetSysClockFreq+0x32>
 80017aa:	2b08      	cmp	r3, #8
 80017ac:	d008      	beq.n	80017c0 <HAL_RCC_GetSysClockFreq+0x38>
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	f040 808d 	bne.w	80018ce <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017b4:	4b4b      	ldr	r3, [pc, #300]	; (80018e4 <HAL_RCC_GetSysClockFreq+0x15c>)
 80017b6:	60bb      	str	r3, [r7, #8]
       break;
 80017b8:	e08c      	b.n	80018d4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017ba:	4b4b      	ldr	r3, [pc, #300]	; (80018e8 <HAL_RCC_GetSysClockFreq+0x160>)
 80017bc:	60bb      	str	r3, [r7, #8]
      break;
 80017be:	e089      	b.n	80018d4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017c0:	4b47      	ldr	r3, [pc, #284]	; (80018e0 <HAL_RCC_GetSysClockFreq+0x158>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017c8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017ca:	4b45      	ldr	r3, [pc, #276]	; (80018e0 <HAL_RCC_GetSysClockFreq+0x158>)
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d023      	beq.n	800181e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017d6:	4b42      	ldr	r3, [pc, #264]	; (80018e0 <HAL_RCC_GetSysClockFreq+0x158>)
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	099b      	lsrs	r3, r3, #6
 80017dc:	f04f 0400 	mov.w	r4, #0
 80017e0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80017e4:	f04f 0200 	mov.w	r2, #0
 80017e8:	ea03 0501 	and.w	r5, r3, r1
 80017ec:	ea04 0602 	and.w	r6, r4, r2
 80017f0:	4a3d      	ldr	r2, [pc, #244]	; (80018e8 <HAL_RCC_GetSysClockFreq+0x160>)
 80017f2:	fb02 f106 	mul.w	r1, r2, r6
 80017f6:	2200      	movs	r2, #0
 80017f8:	fb02 f205 	mul.w	r2, r2, r5
 80017fc:	440a      	add	r2, r1
 80017fe:	493a      	ldr	r1, [pc, #232]	; (80018e8 <HAL_RCC_GetSysClockFreq+0x160>)
 8001800:	fba5 0101 	umull	r0, r1, r5, r1
 8001804:	1853      	adds	r3, r2, r1
 8001806:	4619      	mov	r1, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f04f 0400 	mov.w	r4, #0
 800180e:	461a      	mov	r2, r3
 8001810:	4623      	mov	r3, r4
 8001812:	f7fe fcd9 	bl	80001c8 <__aeabi_uldivmod>
 8001816:	4603      	mov	r3, r0
 8001818:	460c      	mov	r4, r1
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	e049      	b.n	80018b2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800181e:	4b30      	ldr	r3, [pc, #192]	; (80018e0 <HAL_RCC_GetSysClockFreq+0x158>)
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	099b      	lsrs	r3, r3, #6
 8001824:	f04f 0400 	mov.w	r4, #0
 8001828:	f240 11ff 	movw	r1, #511	; 0x1ff
 800182c:	f04f 0200 	mov.w	r2, #0
 8001830:	ea03 0501 	and.w	r5, r3, r1
 8001834:	ea04 0602 	and.w	r6, r4, r2
 8001838:	4629      	mov	r1, r5
 800183a:	4632      	mov	r2, r6
 800183c:	f04f 0300 	mov.w	r3, #0
 8001840:	f04f 0400 	mov.w	r4, #0
 8001844:	0154      	lsls	r4, r2, #5
 8001846:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800184a:	014b      	lsls	r3, r1, #5
 800184c:	4619      	mov	r1, r3
 800184e:	4622      	mov	r2, r4
 8001850:	1b49      	subs	r1, r1, r5
 8001852:	eb62 0206 	sbc.w	r2, r2, r6
 8001856:	f04f 0300 	mov.w	r3, #0
 800185a:	f04f 0400 	mov.w	r4, #0
 800185e:	0194      	lsls	r4, r2, #6
 8001860:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001864:	018b      	lsls	r3, r1, #6
 8001866:	1a5b      	subs	r3, r3, r1
 8001868:	eb64 0402 	sbc.w	r4, r4, r2
 800186c:	f04f 0100 	mov.w	r1, #0
 8001870:	f04f 0200 	mov.w	r2, #0
 8001874:	00e2      	lsls	r2, r4, #3
 8001876:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800187a:	00d9      	lsls	r1, r3, #3
 800187c:	460b      	mov	r3, r1
 800187e:	4614      	mov	r4, r2
 8001880:	195b      	adds	r3, r3, r5
 8001882:	eb44 0406 	adc.w	r4, r4, r6
 8001886:	f04f 0100 	mov.w	r1, #0
 800188a:	f04f 0200 	mov.w	r2, #0
 800188e:	02a2      	lsls	r2, r4, #10
 8001890:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001894:	0299      	lsls	r1, r3, #10
 8001896:	460b      	mov	r3, r1
 8001898:	4614      	mov	r4, r2
 800189a:	4618      	mov	r0, r3
 800189c:	4621      	mov	r1, r4
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	f04f 0400 	mov.w	r4, #0
 80018a4:	461a      	mov	r2, r3
 80018a6:	4623      	mov	r3, r4
 80018a8:	f7fe fc8e 	bl	80001c8 <__aeabi_uldivmod>
 80018ac:	4603      	mov	r3, r0
 80018ae:	460c      	mov	r4, r1
 80018b0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80018b2:	4b0b      	ldr	r3, [pc, #44]	; (80018e0 <HAL_RCC_GetSysClockFreq+0x158>)
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	0c1b      	lsrs	r3, r3, #16
 80018b8:	f003 0303 	and.w	r3, r3, #3
 80018bc:	3301      	adds	r3, #1
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80018c2:	68fa      	ldr	r2, [r7, #12]
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ca:	60bb      	str	r3, [r7, #8]
      break;
 80018cc:	e002      	b.n	80018d4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80018ce:	4b05      	ldr	r3, [pc, #20]	; (80018e4 <HAL_RCC_GetSysClockFreq+0x15c>)
 80018d0:	60bb      	str	r3, [r7, #8]
      break;
 80018d2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018d4:	68bb      	ldr	r3, [r7, #8]
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3714      	adds	r7, #20
 80018da:	46bd      	mov	sp, r7
 80018dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018de:	bf00      	nop
 80018e0:	40023800 	.word	0x40023800
 80018e4:	00f42400 	.word	0x00f42400
 80018e8:	017d7840 	.word	0x017d7840

080018ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018f0:	f7fe fdea 	bl	80004c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018f4:	f000 f826 	bl	8001944 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018f8:	f000 f882 	bl	8001a00 <MX_GPIO_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(GPIOD, LED1_Pin);
 80018fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001900:	480f      	ldr	r0, [pc, #60]	; (8001940 <main+0x54>)
 8001902:	f7ff fa9d 	bl	8000e40 <HAL_GPIO_TogglePin>
	  HAL_Delay(200);
 8001906:	20c8      	movs	r0, #200	; 0xc8
 8001908:	f7fe fe50 	bl	80005ac <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOD, LED2_Pin);
 800190c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001910:	480b      	ldr	r0, [pc, #44]	; (8001940 <main+0x54>)
 8001912:	f7ff fa95 	bl	8000e40 <HAL_GPIO_TogglePin>
	  HAL_Delay(200);
 8001916:	20c8      	movs	r0, #200	; 0xc8
 8001918:	f7fe fe48 	bl	80005ac <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOD, LED3_Pin);
 800191c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001920:	4807      	ldr	r0, [pc, #28]	; (8001940 <main+0x54>)
 8001922:	f7ff fa8d 	bl	8000e40 <HAL_GPIO_TogglePin>
	  HAL_Delay(200);
 8001926:	20c8      	movs	r0, #200	; 0xc8
 8001928:	f7fe fe40 	bl	80005ac <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOD, LED4_Pin);
 800192c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001930:	4803      	ldr	r0, [pc, #12]	; (8001940 <main+0x54>)
 8001932:	f7ff fa85 	bl	8000e40 <HAL_GPIO_TogglePin>
	  HAL_Delay(200);
 8001936:	20c8      	movs	r0, #200	; 0xc8
 8001938:	f7fe fe38 	bl	80005ac <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOD, LED1_Pin);
 800193c:	e7de      	b.n	80018fc <main+0x10>
 800193e:	bf00      	nop
 8001940:	40020c00 	.word	0x40020c00

08001944 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b094      	sub	sp, #80	; 0x50
 8001948:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800194a:	f107 0320 	add.w	r3, r7, #32
 800194e:	2230      	movs	r2, #48	; 0x30
 8001950:	2100      	movs	r1, #0
 8001952:	4618      	mov	r0, r3
 8001954:	f000 f992 	bl	8001c7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001958:	f107 030c 	add.w	r3, r7, #12
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	605a      	str	r2, [r3, #4]
 8001962:	609a      	str	r2, [r3, #8]
 8001964:	60da      	str	r2, [r3, #12]
 8001966:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001968:	2300      	movs	r3, #0
 800196a:	60bb      	str	r3, [r7, #8]
 800196c:	4b22      	ldr	r3, [pc, #136]	; (80019f8 <SystemClock_Config+0xb4>)
 800196e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001970:	4a21      	ldr	r2, [pc, #132]	; (80019f8 <SystemClock_Config+0xb4>)
 8001972:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001976:	6413      	str	r3, [r2, #64]	; 0x40
 8001978:	4b1f      	ldr	r3, [pc, #124]	; (80019f8 <SystemClock_Config+0xb4>)
 800197a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001980:	60bb      	str	r3, [r7, #8]
 8001982:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001984:	2300      	movs	r3, #0
 8001986:	607b      	str	r3, [r7, #4]
 8001988:	4b1c      	ldr	r3, [pc, #112]	; (80019fc <SystemClock_Config+0xb8>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a1b      	ldr	r2, [pc, #108]	; (80019fc <SystemClock_Config+0xb8>)
 800198e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001992:	6013      	str	r3, [r2, #0]
 8001994:	4b19      	ldr	r3, [pc, #100]	; (80019fc <SystemClock_Config+0xb8>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800199c:	607b      	str	r3, [r7, #4]
 800199e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019a0:	2302      	movs	r3, #2
 80019a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019a4:	2301      	movs	r3, #1
 80019a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019a8:	2310      	movs	r3, #16
 80019aa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80019ac:	2300      	movs	r3, #0
 80019ae:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019b0:	f107 0320 	add.w	r3, r7, #32
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff fa6b 	bl	8000e90 <HAL_RCC_OscConfig>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80019c0:	f000 f870 	bl	8001aa4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019c4:	230f      	movs	r3, #15
 80019c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80019c8:	2300      	movs	r3, #0
 80019ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019cc:	2300      	movs	r3, #0
 80019ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019d0:	2300      	movs	r3, #0
 80019d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019d4:	2300      	movs	r3, #0
 80019d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80019d8:	f107 030c 	add.w	r3, r7, #12
 80019dc:	2100      	movs	r1, #0
 80019de:	4618      	mov	r0, r3
 80019e0:	f7ff fd48 	bl	8001474 <HAL_RCC_ClockConfig>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80019ea:	f000 f85b 	bl	8001aa4 <Error_Handler>
  }
}
 80019ee:	bf00      	nop
 80019f0:	3750      	adds	r7, #80	; 0x50
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40023800 	.word	0x40023800
 80019fc:	40007000 	.word	0x40007000

08001a00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b088      	sub	sp, #32
 8001a04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a06:	f107 030c 	add.w	r3, r7, #12
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	601a      	str	r2, [r3, #0]
 8001a0e:	605a      	str	r2, [r3, #4]
 8001a10:	609a      	str	r2, [r3, #8]
 8001a12:	60da      	str	r2, [r3, #12]
 8001a14:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a16:	2300      	movs	r3, #0
 8001a18:	60bb      	str	r3, [r7, #8]
 8001a1a:	4b20      	ldr	r3, [pc, #128]	; (8001a9c <MX_GPIO_Init+0x9c>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1e:	4a1f      	ldr	r2, [pc, #124]	; (8001a9c <MX_GPIO_Init+0x9c>)
 8001a20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a24:	6313      	str	r3, [r2, #48]	; 0x30
 8001a26:	4b1d      	ldr	r3, [pc, #116]	; (8001a9c <MX_GPIO_Init+0x9c>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a2e:	60bb      	str	r3, [r7, #8]
 8001a30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a32:	2300      	movs	r3, #0
 8001a34:	607b      	str	r3, [r7, #4]
 8001a36:	4b19      	ldr	r3, [pc, #100]	; (8001a9c <MX_GPIO_Init+0x9c>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3a:	4a18      	ldr	r2, [pc, #96]	; (8001a9c <MX_GPIO_Init+0x9c>)
 8001a3c:	f043 0308 	orr.w	r3, r3, #8
 8001a40:	6313      	str	r3, [r2, #48]	; 0x30
 8001a42:	4b16      	ldr	r3, [pc, #88]	; (8001a9c <MX_GPIO_Init+0x9c>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a46:	f003 0308 	and.w	r3, r3, #8
 8001a4a:	607b      	str	r3, [r7, #4]
 8001a4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a4e:	2300      	movs	r3, #0
 8001a50:	603b      	str	r3, [r7, #0]
 8001a52:	4b12      	ldr	r3, [pc, #72]	; (8001a9c <MX_GPIO_Init+0x9c>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	4a11      	ldr	r2, [pc, #68]	; (8001a9c <MX_GPIO_Init+0x9c>)
 8001a58:	f043 0301 	orr.w	r3, r3, #1
 8001a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a5e:	4b0f      	ldr	r3, [pc, #60]	; (8001a9c <MX_GPIO_Init+0x9c>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a62:	f003 0301 	and.w	r3, r3, #1
 8001a66:	603b      	str	r3, [r7, #0]
 8001a68:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001a70:	480b      	ldr	r0, [pc, #44]	; (8001aa0 <MX_GPIO_Init+0xa0>)
 8001a72:	f7ff f9b3 	bl	8000ddc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin;
 8001a76:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001a7a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a80:	2300      	movs	r3, #0
 8001a82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a84:	2300      	movs	r3, #0
 8001a86:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a88:	f107 030c 	add.w	r3, r7, #12
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4804      	ldr	r0, [pc, #16]	; (8001aa0 <MX_GPIO_Init+0xa0>)
 8001a90:	f7fe feb8 	bl	8000804 <HAL_GPIO_Init>

}
 8001a94:	bf00      	nop
 8001a96:	3720      	adds	r7, #32
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	40023800 	.word	0x40023800
 8001aa0:	40020c00 	.word	0x40020c00

08001aa4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001aa8:	bf00      	nop
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr

08001ab2 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
 8001ab2:	b480      	push	{r7}
 8001ab4:	b083      	sub	sp, #12
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
 8001aba:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8001abc:	bf00      	nop
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr

08001ac8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ace:	2300      	movs	r3, #0
 8001ad0:	607b      	str	r3, [r7, #4]
 8001ad2:	4b10      	ldr	r3, [pc, #64]	; (8001b14 <HAL_MspInit+0x4c>)
 8001ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad6:	4a0f      	ldr	r2, [pc, #60]	; (8001b14 <HAL_MspInit+0x4c>)
 8001ad8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001adc:	6453      	str	r3, [r2, #68]	; 0x44
 8001ade:	4b0d      	ldr	r3, [pc, #52]	; (8001b14 <HAL_MspInit+0x4c>)
 8001ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ae6:	607b      	str	r3, [r7, #4]
 8001ae8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aea:	2300      	movs	r3, #0
 8001aec:	603b      	str	r3, [r7, #0]
 8001aee:	4b09      	ldr	r3, [pc, #36]	; (8001b14 <HAL_MspInit+0x4c>)
 8001af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af2:	4a08      	ldr	r2, [pc, #32]	; (8001b14 <HAL_MspInit+0x4c>)
 8001af4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001af8:	6413      	str	r3, [r2, #64]	; 0x40
 8001afa:	4b06      	ldr	r3, [pc, #24]	; (8001b14 <HAL_MspInit+0x4c>)
 8001afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b02:	603b      	str	r3, [r7, #0]
 8001b04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b06:	bf00      	nop
 8001b08:	370c      	adds	r7, #12
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	40023800 	.word	0x40023800

08001b18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001b1c:	bf00      	nop
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr

08001b26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b26:	b480      	push	{r7}
 8001b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b2a:	e7fe      	b.n	8001b2a <HardFault_Handler+0x4>

08001b2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b30:	e7fe      	b.n	8001b30 <MemManage_Handler+0x4>

08001b32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b32:	b480      	push	{r7}
 8001b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b36:	e7fe      	b.n	8001b36 <BusFault_Handler+0x4>

08001b38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b3c:	e7fe      	b.n	8001b3c <UsageFault_Handler+0x4>

08001b3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b42:	bf00      	nop
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b50:	bf00      	nop
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr

08001b5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b6c:	f7fe fcfe 	bl	800056c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b70:	bf00      	nop
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b78:	4b16      	ldr	r3, [pc, #88]	; (8001bd4 <SystemInit+0x60>)
 8001b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b7e:	4a15      	ldr	r2, [pc, #84]	; (8001bd4 <SystemInit+0x60>)
 8001b80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001b88:	4b13      	ldr	r3, [pc, #76]	; (8001bd8 <SystemInit+0x64>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a12      	ldr	r2, [pc, #72]	; (8001bd8 <SystemInit+0x64>)
 8001b8e:	f043 0301 	orr.w	r3, r3, #1
 8001b92:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001b94:	4b10      	ldr	r3, [pc, #64]	; (8001bd8 <SystemInit+0x64>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001b9a:	4b0f      	ldr	r3, [pc, #60]	; (8001bd8 <SystemInit+0x64>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a0e      	ldr	r2, [pc, #56]	; (8001bd8 <SystemInit+0x64>)
 8001ba0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001ba4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ba8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001baa:	4b0b      	ldr	r3, [pc, #44]	; (8001bd8 <SystemInit+0x64>)
 8001bac:	4a0b      	ldr	r2, [pc, #44]	; (8001bdc <SystemInit+0x68>)
 8001bae:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001bb0:	4b09      	ldr	r3, [pc, #36]	; (8001bd8 <SystemInit+0x64>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a08      	ldr	r2, [pc, #32]	; (8001bd8 <SystemInit+0x64>)
 8001bb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bba:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001bbc:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <SystemInit+0x64>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001bc2:	4b04      	ldr	r3, [pc, #16]	; (8001bd4 <SystemInit+0x60>)
 8001bc4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001bc8:	609a      	str	r2, [r3, #8]
#endif
}
 8001bca:	bf00      	nop
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr
 8001bd4:	e000ed00 	.word	0xe000ed00
 8001bd8:	40023800 	.word	0x40023800
 8001bdc:	24003010 	.word	0x24003010

08001be0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001be0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c18 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001be4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001be6:	e003      	b.n	8001bf0 <LoopCopyDataInit>

08001be8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001be8:	4b0c      	ldr	r3, [pc, #48]	; (8001c1c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001bea:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001bec:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001bee:	3104      	adds	r1, #4

08001bf0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001bf0:	480b      	ldr	r0, [pc, #44]	; (8001c20 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001bf2:	4b0c      	ldr	r3, [pc, #48]	; (8001c24 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001bf4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001bf6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001bf8:	d3f6      	bcc.n	8001be8 <CopyDataInit>
  ldr  r2, =_sbss
 8001bfa:	4a0b      	ldr	r2, [pc, #44]	; (8001c28 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001bfc:	e002      	b.n	8001c04 <LoopFillZerobss>

08001bfe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001bfe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001c00:	f842 3b04 	str.w	r3, [r2], #4

08001c04 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001c04:	4b09      	ldr	r3, [pc, #36]	; (8001c2c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001c06:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001c08:	d3f9      	bcc.n	8001bfe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001c0a:	f7ff ffb3 	bl	8001b74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c0e:	f000 f811 	bl	8001c34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c12:	f7ff fe6b 	bl	80018ec <main>
  bx  lr    
 8001c16:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001c18:	2001ffff 	.word	0x2001ffff
  ldr  r3, =_sidata
 8001c1c:	08001d74 	.word	0x08001d74
  ldr  r0, =_sdata
 8001c20:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001c24:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001c28:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001c2c:	2000002c 	.word	0x2000002c

08001c30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c30:	e7fe      	b.n	8001c30 <ADC_IRQHandler>
	...

08001c34 <__libc_init_array>:
 8001c34:	b570      	push	{r4, r5, r6, lr}
 8001c36:	4e0d      	ldr	r6, [pc, #52]	; (8001c6c <__libc_init_array+0x38>)
 8001c38:	4c0d      	ldr	r4, [pc, #52]	; (8001c70 <__libc_init_array+0x3c>)
 8001c3a:	1ba4      	subs	r4, r4, r6
 8001c3c:	10a4      	asrs	r4, r4, #2
 8001c3e:	2500      	movs	r5, #0
 8001c40:	42a5      	cmp	r5, r4
 8001c42:	d109      	bne.n	8001c58 <__libc_init_array+0x24>
 8001c44:	4e0b      	ldr	r6, [pc, #44]	; (8001c74 <__libc_init_array+0x40>)
 8001c46:	4c0c      	ldr	r4, [pc, #48]	; (8001c78 <__libc_init_array+0x44>)
 8001c48:	f000 f820 	bl	8001c8c <_init>
 8001c4c:	1ba4      	subs	r4, r4, r6
 8001c4e:	10a4      	asrs	r4, r4, #2
 8001c50:	2500      	movs	r5, #0
 8001c52:	42a5      	cmp	r5, r4
 8001c54:	d105      	bne.n	8001c62 <__libc_init_array+0x2e>
 8001c56:	bd70      	pop	{r4, r5, r6, pc}
 8001c58:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001c5c:	4798      	blx	r3
 8001c5e:	3501      	adds	r5, #1
 8001c60:	e7ee      	b.n	8001c40 <__libc_init_array+0xc>
 8001c62:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001c66:	4798      	blx	r3
 8001c68:	3501      	adds	r5, #1
 8001c6a:	e7f2      	b.n	8001c52 <__libc_init_array+0x1e>
 8001c6c:	08001d6c 	.word	0x08001d6c
 8001c70:	08001d6c 	.word	0x08001d6c
 8001c74:	08001d6c 	.word	0x08001d6c
 8001c78:	08001d70 	.word	0x08001d70

08001c7c <memset>:
 8001c7c:	4402      	add	r2, r0
 8001c7e:	4603      	mov	r3, r0
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d100      	bne.n	8001c86 <memset+0xa>
 8001c84:	4770      	bx	lr
 8001c86:	f803 1b01 	strb.w	r1, [r3], #1
 8001c8a:	e7f9      	b.n	8001c80 <memset+0x4>

08001c8c <_init>:
 8001c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c8e:	bf00      	nop
 8001c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c92:	bc08      	pop	{r3}
 8001c94:	469e      	mov	lr, r3
 8001c96:	4770      	bx	lr

08001c98 <_fini>:
 8001c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c9a:	bf00      	nop
 8001c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c9e:	bc08      	pop	{r3}
 8001ca0:	469e      	mov	lr, r3
 8001ca2:	4770      	bx	lr
